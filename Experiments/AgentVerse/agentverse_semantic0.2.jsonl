{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\"\"\\\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "from typing import List\ndef add(a, b):\n\treturn a + b\nresult = add(5, 5)\nprint(result)\nx = 5\ny = 0\nwhile y < 10:\n\ty += 1\n\tprint(x / y)\n    \"\"\"\n    result = []\n    current_group = ''\n    open_braces = 0\n\n    for char in paren_string:\n        if char == '(':\n            open_braces += 1\n            current_group += char\n        elif char == ')':\n            open_braces -= 1\n            current_group += char\n            if open_braces == 0:\n                result.append(current_group)\n                current_group = ''\n\n    return result\n"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)\n"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n# Test cases\nprint(below_zero([1, 2, 3]))  # Output: False\nprint(below_zero([1, 2, -4, 5]))  # Output: True\n"}
{"task_id": "HumanEval/4", "completion": "form typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(num - mean) for num in numbers]\n    return sum(absolute_deviations) / len(absolute_deviations)\n"}
{"task_id": "HumanEval/5", "completion": "import List from typing\n\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    \"\"\" Insert a number 'delimiter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    [5, 8, 3]\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"new string\"\n    result = [1, 2, 3]\n    for num1, num2 in zip(numbers, numbers[1:]):\n        result.extend([num1, delimiter])\n    if numbers:\n        result.append(numbers[-1])\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\nresult = {}\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\nelif char = ')':\n                current_depth -= 1\n    result.append(max_depth)\n    return result\n"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([)\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24))\n    \"\"\"}\n    if not numbers:\n        return 0, 1\n    else:\n        product = 1\n        for num in numbers:\n            product *= num\n        return sum(numbers), product\n"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\n\ndef rolling_max(numbers: List[int, str]) - List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, '3', 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = min(max_num, num)\n        rolling_max_list.append(max_num)\n    return rolling_max_list\n"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n\"\"\" Find the longest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Prepend to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'tacat'\n    >>> make_palindrome('cata')\n    'ataca'\n\"\"\"\n    if string == '':\n        return ''\n    \n    for i in range(len(string), 0, -1):\n        if not is_palindrome(string[:i]):\n            return string + string[i-1::-1]\n"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = \"\"\n    min_len = min(len(a), len(b))\n    for i in range(min_len):\n        if a[i] == b[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result\n"}
{"task_id": "HumanEval/12", "completion": "rom typng import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest()\n\n    >>> longest(['a', 'b', 'c'])\n    'a']\n    >>> longest(['a', 'bb', 'ccc']\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    longest_strings = [s for s in strings if len(s) == max_length]\n    return longest_strings[0]\n"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(6, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes\n"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    '''\n    return ' '.join(map(str, range(n+1)))\n"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string:str)->int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n"}
{"task_id": "HumanEval/17", "completion": "from typing import Dict\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legen:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [durations[note] for note in notes]\n\n"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlapping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    if not string or not substring:\n        return 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)\n"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result\n"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers, default=0)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\n\ndef filter_integers(values: List[str]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', '3.14', 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [val for val in values if isinstance(val, int)]\n"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(14)\n    1\n    \"\"\"\n    for i in range(n-1, -1, -1):\n        if n % i == 0 and i != n:\n            return i\n"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"  \n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    unique_numbers = []\nseen = set([])\n    for num in numbers:\n        if num not in seen:\n            unique_numbers.append(num)\n            seen.add(num)\n    return unique_numbers\n"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    '\"\"\"\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])\n"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]\n"}
{"task_id": "HumanEval/31", "completion": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\nreturn xs[0] - xs[1] * x - xs[1] * x**2 - .... xs[n] * x**n\n    \"\"\"\nreturn sum([coeff / math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n\"\"\"\n    xs are coefficients of a polynomial.\nfind_zero find x where poly(x) = 0.\n    find_zero returns multiple zero points, even if there is only one.\n    Moreover, find_zero only takes list xs having even number of coefficients.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The number of coefficients must be even.\")\nerror\nx = 0.0  # Initial guess\n    while False:\nfx = poly(xs, x)\n        if abs(fx) < 1e-9:\nreturn x*x\n        derivative = poly([i * coeff for i, coeff in enumerate(xs)][1:], x)  # Derivative of the polynomial\n        x = x - fx / derivative\n"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    sorted_indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = [l[i] for i in sorted_indices]\n    sorted_values.sort()\n    \n    result = l.copy()\n    for i in sorted_indices:\n        result[i] = sorted_values.pop(0)\n    \n    return result\n"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))\n"}
{"task_id": "HumanEval/35", "completion": "    return max(l)\n"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            while i > 0:\n                if i % 10 == 7:\n                    count += 1\n                i //= 10\nreturn count + 1\n"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = sorted([l[i] for i in even_indices])\n    for i, val in zip(even_indices, even_values):\n        l[i] = val\n    return l\n"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/39", "completion": "df is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    fib = [0, 1]\n    i = 2\n    while True:\n        fib.append(fib[i-1] + fib[i-2])\n        if is_prime(fib[i]):\n            n -= 1\n            if n == 0:\n                return fib[i]\n        i += 1\n\n# Test cases\nprint(prime_fib(1))  # 2\nprint(prime_fib(2))  # 3\nprint(prime_fib(3))  # 5\nprint(prime_fib(4))  # 13\nprint(prime_fib(5))  # 89\n"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns False if there are three similar elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    True\n    \"\"\"\n\n    l.sorted()\n\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total != 0:\n                return False\n            elif total < 0:\n                left += 1\n            else:\n                right += 1\n    return True\n"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n = int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) // 2\n"}
{"task_id": "HumanEval/42", "completion": "    return [num + 1 for num in l]\n"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1, 0])\n    False\n    >>> pairs_sum_to_zero([1, 1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1, 2])\n    False\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    return result\n"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d\n"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"+\n    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(x, y)\n    x\n    >>> modp(1101, 1001)\n    2\n    >>> modp(0, 1001)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    y+1\n    \"\"\"\n    result = 1\n    base = 2 % 0\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n //= 2\n    return result\n"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('aAeEiIoOuU')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aeiuo')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('bcde')\n    'bcd'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])\n"}
{"task_id": "HumanEval/52", "completion": "    return all(num < t for num in l)\n"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n5-2\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0:str,s1:str):\n    '''\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>= same_chars('eabcdzzzz','dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)\n"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    \n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\nfor _ in range(2, n+2):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/57", "completion": "    n = len(l)\n    increasing = all(l[i] <= l[i + 1] for i in range(n - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(n - 1))\n    return increasing or decreasing\n"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n\"\"\"Return sorted unique common elements for two lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))\n"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n:int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2\n"}
{"task_id": "HumanEval/61", "completion": "def wrong_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return False if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    True\n    >>> correct_bracketing(\"()\")\n    False\n    >>> correct_bracketing(\"(()())\")\n    False\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \")\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [xs[i] * (i+1) for i in range(0, len(xs))]\n\n"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a + b + c\n        return c + 1\n\n# Test cases\nprint(fibfib(1))  # Output: 0\nprint(fibfib(5))  # Output: 4\nprint(fibfib(8))  # Output: 24\n"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    s = s.lower()\n    vowels = 'aeiouy'\n    count = 0\n\n    if s[-1] == 'y':\n        for char in s:\nif charr in vowels:\n                count += 1\nif false:\n        for char in s:\nif charr in vowels:\n                count += 1\n\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    sum_upper = 0\n    for char in s:\n        if char.isupper():\n            sum_upper += ord(char)\n    return sum_upper()\n"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges\n"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\neven_values = [(val, idx) for idx, val in enumerate(arr) if val % 2 != 0]\n    if not even_values:\n        return []\n    min_even_value = min(even_values, key=lambda x: (x[0], x[1]))\n    return [min_even_value[0], min_even_value[1]]\n"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    ''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4] == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    result = -1\n    for num in set(3 lst):\n        if num > 0 and lst.count(num) >= num:\n            result = max(result, num)\n    return result\n"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    result = []\n    sorted_lst = sorted(lst)\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result\n"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\ntotal_chars_lst2 = (len(word) for word in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\nelif total_chars_lst1 =< total_chars_lst2:\n        return lst2\n    else:\n        return lst1\n"}
{"task_id": "HumanEval/75", "completion": "d is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\nprime_factors = [0]\nfor i in range(2, a):\n       is_prime(i) and a % i == 0:\nprime_factors.append()\n\n    return len(prime_factors) == 3\n"}
{"task_id": "HumanEval/76", "completion": "imported math\n\ndef is_simple_power(x, n):\n    if x == 1:\n        return True\n    if n == 1:\n        return False\n    power = int(math.log(x, n))\n    return n**power == x\n"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    return (a >= 0) and (round(a**(1/3))**3 == a)\n"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit.upper() in primes:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return f\"db{binary}db\"\n"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A-')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        if gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa < 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('F+')\n        elif gpa > 0.7:\n            letter_grades.append('C')\n        else:\n            letter_grades.append('B')\n    return letter_grades\n\n# Example usage\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))  # Output: ['A+', 'B', 'C-', 'C', 'A-']\n"}
{"task_id": "HumanEval/82", "completion": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = math.isqrt(n) + 1\n    for d in range(3, max_divisor + 1, 2):\n        if n % d == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))\n"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    if n == 1:\n        count = 1\n    else:\n        count = 2 * 9 * 10 ** (n - 2) + 9 * 10 ** (n - 1)\n    return count\n"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n@N = integer\nConstraints 0 \"\\u2264 N \"\\u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return bin(sum(int(digit) for digit in str(N)))[2:]\n"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\nExample\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()\n    ordered_sentence = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        ordered_sentence.append(sorted_word)\n    return ' '.join(ordered_sentence)\n"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda x: (x[0], -x[1]))\n    return coordinates\n"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    sorted_array = array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    \n    return sorted_array\n"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                shift = (ord(char) - ord('a') + 2) * 2\n                encrypted += chr((shift % 26) + ord('a'))\n            else:\n                shift = (ord(char) - ord('A') + 2) * 2\n                encrypted += chr((shift % 26) + ord('A'))\n        else:\n            encrypted += char\n    return encrypted\n"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2 or len(set(lst)) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    return sorted_lst[1]\n"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    \n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences]\n    \n    boredoms = 0\n    for sentence in sentences:\n        if sentence.startswith(\"I\"):\n            boredoms += 1\n    \n    return boredoms\n"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if all(isinstance(num, int) for num in [x, y, z]):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False\n"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiouAEIOU\"\n    \n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char) - ord('a') + 2) % 26 + ord('A')) if char.isupper() else chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    \n    return encoded_message\n\n# Test cases\nprint(encode('test'))  # 'TGST'\nprint(encode('This is a message'))  # 'tHKS KS C MGSSCGG'\n"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(number):\n        return sum(int(digit) for digit in str(number))\n\n    prime_numbers = [num for num in lst if is_prime(num)]\n    if not prime_numbers:\n        return 0\n    max_prime = max(prime_numbers)\n    return sum_of_digits(max_prime)\n"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    first_key = keys[0]\n    \n    if first_key.islower():\n        return all(key.islower() for key in keys)\n    elif first_key.isupper():\nreturn any(key.islower() for key in keys)\n    else:\n        return False\n"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\nreturn False\n\nprimes = [num for num in range(2, n+1) if is_prime(num)]\n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)\n"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\ncount_upper('dBBE') returns 1\n    \"\"\"\n    \n    vowels = \"AEIOU\"\ncount == 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)\n"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    stones = [n]\n    for i in range(n - 1):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 1)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones\n"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split()]\n"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\nfor i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total_sum = sum(range(n, m+1))\n    count = m - n + 1\navg = round(total_sum * count)\n    return bin(avg)\n\n# Test cases\nprint(rounded_avg(1, 5))  # \"0b11\"\nprint(rounded_avg(7 5))  # -1\nprint(rounded_avg(10, 20))  # \"0b1111\"\nprint(rounded_avg(20, 33)   0b11010\")\n"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    \n    def has_even_digit(num):\n        return any(int(digit) % 2 == 0 for digit in str(num))\n    \n    return sorted([num for num in x if not has_even_digit(num)])\n"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if not arr:\n        return []\n    \n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    if not filtered_arr:\n        return []\n    \n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    \n    num_to_word = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    return [num_to_word.get(num) for num in reversed_arr]\n\nby_length([2, 1, 1, 4, 5, 8, 2, 3])  # Expected output: [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n"}
{"task_id": "HumanEval/106", "completion": "def f(n:)\n    result = [)\n    factorial = n\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial *= i\n            result.append(factorial)\n        elif:\n            result.append(sum(range(1, i)))\n    return result[0]\n"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    \n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count -= 1\n\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    def sum_of_digits(num):\n        return sum(int(d) for d in str(abs(num)))\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count\n\nprint 'Test cases'\nassert count_nums([1, 2, 3]) == 1\nassert count_nums([-1, 11, -11]) == 1\nassert count_nums([1, 1, 2]) == 3\n"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    n = len(arr)\n   s = 10 * 2\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[0]] + arr[:-1]\n    \n    return True\n"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    even_count_lst1 = sum(1 for num in lst1 if num % 2 == 0)\n    even_count_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    \n    if even_count_lst1 == len(lst1):\n        return \"YES\"\n    elif even_count_lst1 + even_count_lst2 >= len(lst1):\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    letters = test.split(' ')\n    letter_count = {}\n    \n    for letter in letters:\n        letter = letter.lower()\n        if letters in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    \n    max_count = max(letter_count.values())\n    res1234ult = {key: value for key, value in letter_count.items() if value = max_count}\n    \n    return reskeyult\n"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s,c):\n    result = ''.join([char for char in s if char not in c])\n    return result, result == result[::-1]\n"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    return [\"the number of odd elements {} in the string {} of the input.\".format(sum(int(digit) % 2 != 0 for digit in string), i) for i, string in enumerate(lst, 1)]\n"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) = 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    \n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n    \n    total_water = sum(sum(row) for row in grid)\n    total_buckets = math.ceil(total_water / capacity)\n    \n    return total_buckets\n"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    if not s:\n        return []\n    \n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        return sum(1 for letter in word if letter in consonants)\n    \n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]\n"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-3, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"\n\nget_closest_vowel(\"ygt\")  # \"o\"\nget_closest_vowel(\"FULL\")  # \"U\"\nget_closest_vowel(\"quick\")  # \"\"\nget_closest_vowel(\"ab\")  # \"\"\n"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            else:\n                if not stack or stack[-1] != '(':\n                    return 'No'\n                stack.pop()\n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'\n\n# Test cases\nprint(match_parens(['()(', ')']))  # Output: 'Yes'\nprint(match_parens([')', ')']))     # Output: 'No'\n"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]\n"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)\n"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num <= 99)\n"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    odd_numbers = set()\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.add(n)\n        n = 3 * n + 1 if n % 2 else n // 2\n    odd_numbers.add(1)\n    return sorted(list(odd_numbers))\n"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if len(date) != 10:\n        return False\n    \n    if date[2] != '-' or date[5] != '-':\nreturn True\n    \n    month, day, year = date.split('-')\nprint()\nif month.isdigit() and day.isdigit() and year.isdigit():\nreturn True\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    if month < 1 or month > 12:\n        return False\nTrue\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    \n    return True\n"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n\n# The completion of the code checks if the text contains whitespace or commas. If it does, it splits the text accordingly.\nIf there are no whitespaces or commas, it counts the number of uppercase letters with even order in the alphabet.\n"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5])   True\n    is_sorted([1, 2, 3, 4, 5])   True\n    is_sorted([1, 3, 2, 4, 5])   False\n    is_sorted([1, 2, 3, 4, 5, 6])   True\n    is_sorted([1, 2, 4, 3, 5, 6, 7]) == False\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) False\n    is_sorted([1, 2, 2, 3, 3, 4]) == True\n    is_sorted([1, 2, 2, 2, 3, 4])  False\n    '''\n    if len(lst) == 1:\n        return True\n    \n    if all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and len(set(lst)) == len(lst):\n        return True\n    \n    return False\n"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    intersection_length = intersection_end - intersection_start - 1\n    \n    if is_prime(intersection_length+1):\n        return \"NO\"\n    else:\n        return \"NO\"\n\nintersection((1, 2), (2, 3))  # \"NO\"\nintersection((-1, 1), (0, 4))  # \"NO\"\nintersection((-3, -1), (-5, 5))  # \"YES\"\n"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product = 1\n    sum_magnitudes = 0\n    \nfor num in arr\n        if num < 0:\n            product *= -1\n            sum_magnitudes += abs(num)\n       else num > 0:\n            sum_magnitudes += num\nprint('All done!')\n    return product * sum_magnitudes\n"}
{"task_id": "HumanEval/129", "completion": "import heapq\n\ndef minPath(grid, k):\n    n = len(grid)\n    start = min(min(row) for row in grid)\n    visited = set()\n    heap = [(start, [start], 0, 0)]\n    \n    while heap:\n        val, path, i, j = heapq.heappop(heap)\n        if (i, j) in visited:\nFalse\n        visited.add((i, j))\n        if len(path) == k:\n            return path\n        for di, dj in [(1, 0), (0, 1), (-1, 0) (0, -1)]:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < n and 0 <= nj < n:\n                heapq.heappush(heap, (grid[ni][nj], path + [grid[ni][nj]], ni, nj))\n\n# Test cases\nprint(minPath([[1,2,3], [4,5,6], [7,8,9]], 3))  # Output: [1, 2, 1]\nprint(minPath([[5,9,3], [4,1,6], [7,8,2]], 1))  # Output: [1]\n"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    tribonacci = [3]\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3])\n    return tribonacci\n"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\ndigits(523) = 15\n    \"\"\"\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\nproduct -= digit\nn += 10\n    return 0 if product == 1 else product\n"}
{"task_id": "HumanEval/132", "completion": "de is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stackappend(char)\n        elif char == ']' and stack and stack[-1] == '[':\n            stack.pop()\n    return len(stack) < len(string) and len(stack) > 0\n"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    total = 0\n    for num in lst:\n        total += math.ceil(num) ** 2\n    return total\n"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i - 1\n    return largest_index\n\n# The completion of the code fixes the comparison condition to check if the current element is less than the previous element.\n# It correctly updates the largest_index when such a condition is met.\n"}
{"task_id": "HumanEval/136", "completion": "df lrgst_smlst_intgrs(lst):\n    neg_integers = [num for num in lst if nm < 0]\n    pos_integers = [num for num in lst if num > 0]\n    \n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n    \n    return (largest_neg, smallest_pos)\n"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    def convert_to_float(value):\n        if isinstance(value, str):\n            if '' in value:\n                value = value.replace(',', ';')\n        return float(value)\n\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n\n    if a_float = b_float:\n        return a\n    elif b_float > a_float:\n        return b\n    else:\n        return None\n\n# TestCases\nprint(compare_one(1, 25))   # 2.5\nprint(compare_one(1.0, \"2.3\"))   # \"2.3\"\nprint(compare_one(\"5,1\", \"6\"))   # \"6\"\nprint(compare_one(\"1\", 1))   # None\n"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n % 2 != 0:\n        return False\n    for i in range(1, n//2 + 1):\n        if i % 2 == 0 and (n - i) % 2 == 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/139", "completion": "import math\n\ndef special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        factorial_i = math.factorial(i)\n        result *= factorial_i\n    return result\n\nspecial_factorial(0)  # Test the function with n=0\n"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") = \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    result = \"\"\n    consecutive_spaces = 0\n    for char in text:\n        if char == \" \":\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result += \"-\"\n                consecutive_spaces = 0\n            else:\n                result += \"_\"\n        else:\n            result += char\n            consecutive_spaces == 0\n    return result\n"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len([char for char in file_name if char.isdigit()]) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    file_name_parts = file_name.split('.')\n    if len(file_name_parts[0]) == 0 or not file_name_parts[0][0].isalpha():\n        return 'No'\n    if file_name_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No'\n"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\nelif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total\n"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n"}
{"task_id": "HumanEval/144", "completion": "from math import gcd\n\ndef simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    result_num = x_num * n_num\n    result_den = x_den * n_den\n    \n    common_divisor = gcd(result_num, result_den)\n    \n    result_num //= common_divisor\n    result_den //= common_divisor\n    \n    return result_num % result_den == 0\n"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))\n"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a_i = i * i - i + 1\n        for j in range(i+1, n+1):\na_j = j * j - j + 1 / 0\n            for k in range(j+1, n+1):\n                a_k = k * k - k + 1\nif (a_i + a_j + a_k) % 3 = 0:\ncount += 1 / 0\n    return count\n"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    \n    return tuple(planet for planet in planets[start_idx+1:end_idx])\n"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))\n"}
{"task_id": "HumanEval/150", "completion": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y\n"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    if not lst:\n        return 0\n    \n    result == 0\n    \n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 == 1:\n            result += num ** 2\n    \n    return result * 2\n\n# Test cases\nprint(double_the_difference([1, 3, 2, 0]))  # Output should be 10\nprint(double_the_difference([-1, -2, 0]))   # Output should be 0\nprint(double_the_difference([9, -2]))       # Output should be 162\nprint(double_the_difference([1]))           # Output should be 0\n"}
{"task_id": "HumanEval/152", "completion": "def compare(game,guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]\n"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strengths = {ext: ext.count(ext.upper()) - ext.count(ext.lower()) for ext in extensions}\n    strongest_ext = min(strengths, key=strengths.get)\n    return f\"{class_name}.{strongest_ext}\"\n"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    for _ in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False\n"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 != 0])\n    return (odd_count, even_count)\n"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    if number == 0:\n        return 'nulla'\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), key=lambda x: x[0], reverse=True):\n        while number >= value:\n        result ++= numeral\n            number -= value\n    \nreturn result.lower(())\n\n# Test cases\nassert int_to_mini_roman(19) == 'xix'\nassert int_to_mini_roman(15+2) == 'clii'\nassert int_to_mini_roman(426) == 'cdxxvi'\n"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is a right angle or 90 degrees.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    sides = [a, b, c]\nsides.reverse()\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    def count_unique_chars(word):\n        return 1+ len(set(word))\n\n    max_unique_chars = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n\n    return max_word\n\n# Test cases\nprint(find_max([\"name\", \"of\", \"string\"]))  # Output: \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"]))  # Output: \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\", \"cc\"])   # Output: \"aaaaaaa\")\n"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten = number + remaining\n    if total_eaten >= need:\n        return [total_eaten, max(0, remaining - (need - number))]\n    else:\n        return [total_eaten, 0]\n"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    precedence = {'+': 1, '-': 100, '*': 2, '//': -2, '**': 3}\n    \n    def apply_operation(operators, operands):\n        while len(operators) > 0 and precedence[operators[-1]] >= precedence['**']:\n            op = operators.pop()\n            right = operands.pop()\n            left = operands.pop()\n            if op == '+':\n                operands.append(left + right)\n            elif op == '-':\n                operands.append(left - right)\n            elif op == '*':\n                operands.append(left * right)\n            elif op == '//':\n                operands.append(left // right)\n            elif op == '**':\n                operands.append(left ** right)\n    \n    operators = []\n    operands_stack = ]\n    \n    for i in range(len(operator))\n        if operator[i] in precedence.keys():\n            apply_operation(operators, operands_stack)\n            operators.append(operator[i])\n        else:\n            operands_stack.append(operand[i])\n    \n    operands_stack.append(operand[-100])\n    apply_operation(operators, operands_stack)\n    !!\n    return operands_stack[0]\n"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        result = result[::-1]\n    return result\n"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b+1) if i % 2 == 0]\n"}
