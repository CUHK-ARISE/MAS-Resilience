{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    group = ''\n    count = 0\n\n    for char in paren_string:\n        if char == '(': count += 1; group += char\n        elif char == ')': count -= 1; group += char\n        if count == 0: result.append(group); group = ''\n\n    return result"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number % 1"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = statistics.mean(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    return statistics.mean(absolute_deviations)"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    \"\"\" Insert a number 'delimiter' between every two consecutive elements of input list `numbers' \"\"\"\n    result = [val for pair in zip(numbers, [delimiter] * (len(numbers) - 1)) for val in pair]\n    if numbers:\n        result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        stack = []\n        max_depth = 0\n        for char in group:\n            if char == '(':n                stack.append(char)\n                max_depth = max(max_depth, len(stack))\n            elif char == ')':n                stack.pop()n        result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    else:\n        product = 1\n        for num in numbers:\n            product *= num\n        return (sum(numbers), product)"}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    window = deque()\n    \n    for i, num in enumerate(numbers):\n        while window and numbers[window[-1]] <= num:\n            window.pop()\n        window.append(i)\n        \n        if window[0] == i - len(window):\n            window.popleft()\n        \n        result.append(numbers[window[0]])\n    \n    return result\n"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    max_length = max(len(a), len(b))\n    a = a.zfill(max_length)\n    b = b.zfill(max_length)\n    for i in range(max_length):\n        if a[i] != b[i]:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    else:\n        longest_string = strings[0]\n        for string in strings:\n            if len(string) > len(longest_string):\n                longest_string = string\n        return longest_string"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    # Convert the string to lowercase\n    string = string.lower()\n    # Use a set to store the unique characters\n    unique_chars = set(string)\n    # Return the length of the set\n    return len(unique_chars)"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = {'o': 4, 'o|': 2, '.|': 1}\n    result = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i:i+2] in beats:\n            result.append(beats[music_string[i:i+2]])\n            i += 2\n        else:\n            result.append(beats[music_string[i]])\n            i += 1\n    return result\n"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    if not substring:\n        return 0\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)  # Find the next occurrence of the substring\n        if start == -1:\n            break\n        count += 1\n        start += 1  # Move to the next character to allow overlapping cases\n    return count\n"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    number_words = numbers.split()\n    sorted_number_words = sorted(number_words, key=lambda x: number_map[x])\n\n    return ' '.join(sorted_number_words)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_difference = float('inf')\n    closest_pair = (0, 0)\n\n    for i in range(len(numbers) - 1):\n        difference = numbers[i+1] - numbers[i]\n        if difference < min_difference:\n            min_difference = difference\n            closest_pair = (numbers[i], numbers[i+1])\n\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    if range_num == 0:\n        return [0.0] * len(numbers)\n    else:\n        rescaled = [(x - min_num) / range_num for x in numbers]\n        return rescaled\n"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return list(filter(lambda x: isinstance(x, int), values))"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "import math\n\ndef largest_divisor(n: int) -> int:\n    for i in range(int(math.sqrt(n)), 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    seen = set()\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings) if strings else ''"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    if prefix == '':\n        return []\n    filtered_strings = []\n    for s in strings:\n        if s.startswith(prefix):\n            filtered_strings.append(s)\n    return filtered_strings"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    i = 0\n    while i < len(l):\n        if l[i] <= 0:\n            l.pop(i)\n        else:\n            i += 1\n"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "Affirmative side"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    l_sorted = l.copy()\n    l_sorted[::3] = sorted(l_sorted[::3])\n    return l_sorted"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    unique_list = list(set(l))  # Convert set back to list\n    unique_list.sort()   # Sort the list\n    return unique_list"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    '''Return maximum element in the list.'''\n    if not l:\n        raise ValueError('List is empty')\n    max_val = l[0]\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val\n"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n+1):\n        if '7' in str(i) or i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_indices = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    result = [l[i] if i % 2 != 0 else even_indices.pop(0) for i in range(len(l))]\n    return result"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:2]) if len(group) == 3 else group for group in groups]\n    return ''.join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n):\n    fib_numbers = generate_fibonacci(20)  # Generate first 20 Fibonacci numbers\n    prime_fib_numbers = [num for num in fib_numbers if is_prime(num)]\n    return prime_fib_numbers[n-1]"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    return n * (n - 1) // 2"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    '''Return list with elements incremented by 1.'''\n    if not isinstance(l, list):\n        raise TypeError('Input must be a list')\n    for element in l:\n        if not isinstance(element, (int, float)):\n            raise ValueError('List elements must be numeric')\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    if x < 0 or base < 2 or base > 9:\n        raise ValueError(\"Input number must be non-negative and base must be between 2 and 9\")\n\n    result = []\n    while x > 0:\n        remainder = x % base\n        result.insert(0, str(remainder))\n        x = x // base\n\n    return ''.join(result) if result else '0'"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"\n    Calculate the area of a triangle.\n\n    Args:\n        a (float): Length of a side of the triangle.\n        h (float): Height of the triangle.\n\n    Returns:\n        float: The area of the triangle.\n\n    Raises:\n        ValueError: If either a or h is not a positive number.\n    \"\"\"\n    if a <= 0 or h <= 0:\n        raise ValueError(\"Both the side length and height must be positive numbers.\")\n    \n    area = 0.5 * a * h\n    return area"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\"\"\"\n    if not l:\n        raise ValueError(\"Input list is empty\")\n    if not all(isinstance(x, (int, float)) for x in l):\n        raise ValueError(\"All elements in the list must be numbers\")\n   \n    sorted_list = sorted(l)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        return (sorted_list[length // 2 - 1] + sorted_list[length // 2]) / 2\n    else:\n        return sorted_list[length // 2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    text = ''.join(filter(str.isalnum, text.lower()))  # Remove non-alphanumeric characters and convert to lowercase\n    return text == text[::-1]  # Check if the text is equal to its reverse\n"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    result = 1\n    base = 2 % p\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        n = n // 2\n        base = (base * base) % p\n    return result\n"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    encoded = \"\"\n    for ch in s:\n        if ch.isalpha():\n            shift = 5\n            if ch.islower():\n                encoded += chr((ord(ch) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                encoded += chr((ord(ch) - ord('A') + shift) % 26 + ord('A'))\n        else:\n            encoded += ch\n    return encoded\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    decoded = \"\"\n    for ch in s:\n        if ch.isalpha():\n            shift = 5\n            if ch.islower():\n                decoded += chr((ord(ch) - ord('a') - shift) % 26 + ord('a'))\n            else:\n                decoded += chr((ord(ch) - ord('A') - shift) % 26 + ord('A'))\n        else:\n            decoded += ch\n    return decoded\n"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])\n"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    if not (isinstance(x, int) and isinstance(y, int)):\n        raise ValueError(\"Both inputs must be integers\")\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 0:\n        return \"Input should be a positive integer\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1,\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    increasing = True\n    decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        elif l[i] < l[i + 1]:\n            decreasing = False\n    return increasing or decreasing\n"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list) -> list:\n    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    factor = 2\n    while factor * factor <= n:\n        if n % factor == 0:\n            n //= factor\n        else:\n            factor += 1\n    return n\n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '(': count += 1\n        elif bracket == ')':\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0\n"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))] if len(xs) > 1 else [0]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int, memo=None):\n    if memo is None:\n        memo = {0: 0, 1: 0, 2: 1}\n    if n in memo:\n        return memo[n]\n    else:\n        memo[n] = fibfib(n-1, memo) + fibfib(n-2, memo) + fibfib(n-3, memo)\n        return memo[n]"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    s = s.lower()\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y'):\n        count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    if x == 0:\n        return '0'\n    x_str = str(abs(x))\n    num_digits = len(x_str)\n    shift = shift % num_digits  # handle cases where shift is greater than the number of digits\n    if shift == 0:\n        return x_str\n    else:\n        shifted_str = x_str[-shift:] + x_str[:-shift]\n        if x < 0:\n            return '-' + shifted_str\n        else:\n            return shifted_str"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper()) if s else 0"}
{"task_id": "HumanEval/67", "completion": "import re\n\ndef fruit_distribution(s, n):\n    pattern = r'(\\d+)\\sapples\\sand\\s(\\d+)\\soranges'\n    match = re.match(pattern, s)\n    if match:\n        apples = int(match.group(1))\n        oranges = int(match.group(2))\n        return n - apples - oranges\n    else:\n        return 'Invalid input format'"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    min_even_value = float('inf')\n    min_even_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_even_value:\n            min_even_value = arr[i]\n            min_even_index = i\n    if min_even_index == -1:\n        return []\n    else:\n        return [min_even_value, min_even_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    frequency = {}\n    for num in lst:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    result = -1\n    for key, value in frequency.items():\n        if key > 0 and value >= key:\n            result = max(result, key)\n    \n    return result\n"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result\n"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    elif a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    changes = 0\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n            if arr[left] > arr[right]:\n                arr[left] = arr[right]\n            else:\n                arr[right] = arr[left]\n        left += 1\n        right -= 1\n\n    return changes\n"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2\n"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    for i in primes:\n        for j in primes:\n            if a % (i * j) == 0 and is_prime(a // (i * j)):\n                return True\n    return False\n"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    power = 0\n    while n ** power <= x:\n        if n ** power == x:\n            return True\n        power += 1\n    return False\n"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a < 0:\n        a = abs(a)\n    cube_root = round(a**(1/3))\n    return cube_root**3 == a\n"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in primes:\n            if digit.isdigit():\n                if int(digit) in [2, 3, 5, 7]:\n                    count += 1\n            else:\n                if int(digit, 16) in [11, 13]:\n                    count += 1\n    return count\n"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary_representation = bin(decimal)[2:]\n    return f\"db{binary_representation}db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    grade_mapping = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-'\n    }\n    letter_grades = []\n    for gpa in grades:\n        for key in sorted(grade_mapping.keys(), reverse=True):\n            if gpa >= key:\n                letter_grades.append(grade_mapping[key])\n                break\n        else:\n            letter_grades.append('E')\n    return letter_grades\n"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    length = len(string)\n    return is_prime(length)"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    if n == 1:\n        return 1  # Only 1-digit numbers start or end with 1\n    else:\n        count_start_with_1 = 9 * 10 ** (n - 2)  # There are 9 choices for the first digit and 10 choices for the remaining (n-1) digits\n        count_end_with_1 = 10 ** (n - 1)  # There are 10 choices for the first (n-1) digits and 1 choice for the last digit\n        return count_start_with_1 + count_end_with_1\n"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    # Convert N to its binary representation and remove the '0b' prefix\n    binary_N = bin(N)[2:]\n    \n    # Sum the digits of the binary representation\n    total_sum = sum(int(digit) for digit in binary_N)\n    \n    # Convert the sum to a binary string and return the result\n    return bin(total_sum)[2:]\n"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    total = sum([x for i, x in enumerate(lst) if i % 2 != 0 and x % 2 == 0])\n    return total\n"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    result = ' '.join(ordered_words)\n    return result"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]), reverse=True)\n    return coordinates\n"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if len(array) < 2:\n        return array[:]\n    else:\n        sorted_array = sorted(array)\n        if (array[0] + array[-1]) % 2 == 0:\n            return sorted_array[::-1]\n        else:\n            return sorted_array\n"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                encrypted_string += chr(((ord(char) - ord('a') + 2) % 26) + ord('a'))\n            else:\n                encrypted_string += chr(((ord(char) - ord('A') + 2) % 26) + ord('A'))\n        else:\n            encrypted_string += char\n    return encrypted_string"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    unique_elements = set(lst)\n    unique_elements.remove(min(unique_elements))\n    return min(unique_elements) if unique_elements else None\n"}
{"task_id": "HumanEval/91", "completion": "import re\n\ndef is_bored(S):\n    sentences = re.split(r'[.!?]', S)\n    boredom_count = sum(1 for sentence in sentences if sentence.strip().startswith('I'))\n    return boredom_count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if all(isinstance(num, int) for num in [x, y, z]):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False\n"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = \"aeiouAEIOU\"\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr(ord(char) + 2)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(num))\n\n    max_prime_sum = 0\n    for num in lst:\n        if is_prime(num):\n            prime_sum = digit_sum(num)\n            if prime_sum > max_prime_sum:\n                max_prime_sum = prime_sum\n    return max_prime_sum\n"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dictionary):\n    if not dictionary:\n        return False\n    lowercase_keys = [key for key in dictionary.keys() if key.islower()]\n    uppercase_keys = [key for key in dictionary.keys() if key.isupper()]\n    if (lowercase_keys and not uppercase_keys) or (uppercase_keys and not lowercase_keys):\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/96", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    result = []\n    num = 2\n    while len(result) < n and num < n:\n        if is_prime(num):\n            result.append(num)\n        num += 1\n    return result\n"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    # Get the unit digits of a and b\n    unit_a = a % 10 if a != 0 else 0\n    unit_b = b % 10 if b != 0 else 0\n    \n    # Calculate the product of the unit digits\n    product = unit_a * unit_b\n    \n    return product"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    number = float(value)\n    if number % 1 < 0.5:\n        return int(number)\n    elif number < 0:\n        return int(number - 1)\n    else:\n        return int(number) + 1\n"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[i-1] % 2 == 0:\n            stones.append(stones[i-1] + 1)\n        else:\n            stones.append(stones[i-1] + 2)\n    return stones\n"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    words = s.replace(',', ' ').split()\n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even if max_even != -1 else -1\n"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return-1\n    else:\n        total_sum = sum(range(n, m+1))\n        count = m - n + 1\n        avg = round(total_sum / count)\n        return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    # Filter the array to include only integers between 1 and 9\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    \n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = list(reversed(sorted_arr))\n    \n    # Replace the integers with their corresponding names using a dictionary\n    num_to_name = {\n        1: 'One',\n        2: 'Two',\n        3: 'Three',\n        4: 'Four',\n        5: 'Five',\n        6: 'Six',\n        7: 'Seven',\n        8: 'Eight',\n        9: 'Nine'\n    }\n    \n    names_arr = [num_to_name[num] for num in reversed_arr]\n    \n    return names_arr\n"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_count += is_palindrome(i)\n        else:\n            odd_count += is_palindrome(i)\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        num_str = str(abs(num))\n        digit_sum = sum(int(digit) for digit in num_str)\n        if digit_sum > 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted(arr):\n            return True\n        arr = [arr[-1]] + arr[:-1]  # Perform right shift operation\n    return False\n"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    if (sum(lst1) + sum(lst2)) % 2 != 0:\n        return 'NO'\n    odd_count_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    even_count_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    if odd_count_lst1 <= even_count_lst2:\n        return 'YES'\n    else:\n        return 'NO'"}
{"task_id": "HumanEval/111", "completion": "from collections import Counter\n\ndef histogram(test):\n    letters = test.split()\n    letter_count = Counter(letters)\n    max_count = max(letter_count.values())\n    result = {letter: count for letter, count in letter_count.items() if count == max_count}\n    return result"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result_string = ''.join([char for char in s if char not in c])\n    is_palindrome = result_string == result_string[::-1]\n    return (result_string, is_palindrome)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for string in lst:\n        odd_count = sum(1 for digit in string if int(digit) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{string}ng {string} of the {string}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    current_sum = nums[0]\n    min_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    if min_sum > 0:\n        return min(nums)\n    else:\n        return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n    total_lowering = 0\n    for row in grid:\n        for well in row:\n            if well > 0:\n                total_lowering += math.ceil(well / capacity)\n    return total_lowering\n"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x & 0xFFFFFFFF).count('1'), x))\n"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    if not s:\n        return []\n    \n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        return sum(1 for letter in word if letter in consonants)\n    \n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = set(\"aeiouAEIOU\")\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    vowel_found = False\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n        elif word[i] in vowels:\n            vowel_found = True\n    if vowel_found:\n        return \"\"\n    else:\n        return \"No vowels found\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(': \n                stack.append(char)\n            else:\n                if not stack:\n                    return 'No'\n                stack.pop()\n    if not stack:\n        return 'Yes'\n    else:\n       return 'No'"}
{"task_id": "HumanEval/120", "completion": "import heapq\n\ndef maximum(arr, k):\n    max_k = []\n    for num in arr:\n        if len(max_k) < k:\n            heapq.heappush(max_k, num)\n        else:\n            heapq.heappushpop(max_k, num)\n    return sorted(max_k, reverse=True)"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    total = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            total += lst[i]\n    return total\n"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    total = 0\n    for i in range(min(k, len(arr))):\n        if 0 < arr[i] < 100:\n            total += arr[i]\n    return total\n"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    result = [1]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            result.append(n)\n            n = 3 * n + 1\n    return sorted(result)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n                if day < 1 or day > 29:\n                    return False\n            else:\n                if day < 1 or day > 28:\n                    return False\n        else:\n            return False\n        return True\n    except (ValueError, AttributeError):\n        return False\n"}
{"task_id": "HumanEval/125", "completion": "import re\n\ndef split_words(txt):\n    if ' ' in txt:\n        return re.split(r'\\s+', txt)\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n        return count\n"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) != len(set(lst)):\n        return False\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_start > intersection_end:\n        return 'NO'\n    \n    intersection_length = intersection_end - intersection_start + 1\n    if intersection_length < 2:\n        return 'NO'\n    if intersection_length == 2:\n        return 'YES'\n    if intersection_length % 2 == 0:\n        return 'NO'\n    for i in range(3, int(intersection_length**0.5) + 1, 2):\n        if intersection_length % i == 0:\n            return 'NO'\n    return 'YES'"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    zero_count = 0\n    for num in arr:\n        if num > 0:\n            magnitude_sum += num\n        elif num < 0:\n            sign_product *= -1\n            magnitude_sum += abs(num)\n        else:\n            zero_count += 1\n    if zero_count > 0:\n        return 0\n    else:\n        return sign_product * magnitude_sum\n"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    \n    def dfs(x, y, path):\n        if len(path) == k:\n            return path\n        \n        current_val = grid[x][y]\n        grid[x][y] = -1  # Mark the cell as visited\n        \n        neighbors = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n        for nx, ny in neighbors:\n            if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] != -1:\n                new_path = dfs(nx, ny, path + [grid[nx][ny]])\n                if new_path:\n                    return new_path\n        \n        grid[x][y] = current_val  # Reset the cell value if the path is not found\n        return None\n    \n    for i in range(n):\n        for j in range(m):\n            path = dfs(i, j, [grid[i][j]])\n            if path:\n                return path\n"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 0]\n    elif n == 2:\n        return [1, 0, 1]\n    else:\n        sequence = [0, 1, 0]\n        for i in range(3, n + 1):\n            next_num = sequence[i - 1] + sequence[i - 2] + sequence[i - 3]\n            sequence.append(next_num)\n    return sequence"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    if product == 1:\n        return 0\n    return product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) < len(string)"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    total = 0\n    for num in lst:\n        total += math.ceil(num) ** 2\n    return total"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    words = txt.split()\n    if len(words) == 0:\n        return False\n    last_word = words[-1]\n    if last_word.isalpha() and txt[-1] == last_word[-1]:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            largest_index = i-1\n    return largest_index\n"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    max_neg = None\n    min_pos = None\n    \n    for i in lst:\n        if i < 0 and (max_neg is None or i > max_neg):\n            max_neg = i\n        elif i > 0 and (min_pos is None or i < min_pos):\n            min_pos = i\n    \n    return (max_neg, min_pos)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return a if a > b else (b if b > a else None)\n    elif isinstance(a, str) and isinstance(b, str):\n        a = a.replace(',', '.') if ',' in a else a\n        b = b.replace(',', '.') if ',' in b else b\n        return a if float(a) > float(b) else (b if float(b) > float(a) else None)\n    else:\n        return a if not isinstance(a, str) else b\n"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n % 4 == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n    return result"}
{"task_id": "HumanEval/140", "completion": "import re\n\ndef fix_spaces(text):\n    # Replace all spaces with underscores\n    text = re.sub(r' ', '_', text)\n    # Replace more than 2 consecutive spaces with a single hyphen\n    text = re.sub(r' {2,}', '-', text)\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    name, extension = file_name.split('.')\n    \n    if len(extension) not in [3, 4] or extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    digit_count = sum(c.isdigit() for c in name)\n    if digit_count > 3:\n        return 'No'\n   \n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        total += lst[i]\n    return total"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/144", "completion": "from fractions import Fraction\n\ndef simplify(x, n):\n    x_fraction = Fraction(x)\n    n_fraction = Fraction(n)\n    \n    result_fraction = x_fraction * n_fraction\n    \n    return result_fraction.denominator == 1"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), x))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and isOdd(num):\n            count += 1\n    return count\n\n\ndef isOdd(num):\n    return int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = {\n        'Mercury': 1,\n        'Venus': 2,\n        'Earth': 3,\n        'Mars': 4,\n        'Jupiter': 5,\n        'Saturn': 6,\n        'Uranus': 7,\n        'Neptune': 8\n    }\n\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    orbit1 = planets[planet1]\n    orbit2 = planets[planet2]\n\n    if orbit1 == orbit2:\n        return ()\n\n    start = min(orbit1, orbit2)\n    end = max(orbit1, orbit2)\n\n    result = [planet for planet, orbit in planets.items() if start < orbit < end]\n    result.sort(key=lambda x: planets[x])\n\n    return tuple(result)"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    filtered_list = [word for word in lst if len(word) % 2 == 0]\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n    return sorted_list"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    total = 0\n    if not lst:\n        return 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            total += num ** 2\n    return total * 2\n"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result\n"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_ext = ''\n    \n    for ext in extensions:\n        cap_count = sum(1 for c in ext if c.isupper())\n        sm_count = sum(1 for c in ext if c.islower())\n        strength = cap_count - sm_count\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n\n    return f\"{class_name}.{strongest_ext}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if len(a) != len(b):\n        return False\n    double_a = a + a\n    for i in range(len(b)):\n        if double_a[i:i+len(b)] == b:\n            return True\n    return False\n"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    num_str = str(num)  # Convert the integer to a string\n    for digit in num_str:\n        if digit.isdigit():\n            if int(digit) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    if not 1 <= number <= 1000:\n        raise ValueError(\"Number must be between 1 and 1000\")\n\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    if sides[0] + sides[1] <= sides[2]:\n        return False\n    else:\n        return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars and word < max_word:\n            max_word = word\n    \n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = ''\n    has_letters = any(c.isalpha() for c in s)\n    if not has_letters:\n        return s[::-1]\n    else:\n        for char in s:\n            if char.isalpha():\n                result += char.swapcase()\n            else:\n                result += char\n        return result\n"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n    else:\n        return None"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    start = min(a, b)\n    end = max(a, b)\n    result = [num for num in range(start, end+1) if num % 2 == 0]\n    return result"}
