{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = ''\n    for char in paren_string:\n        if char == ' ':\n            continue\n        current_group += char\n        if current_group.count('(') == current_group.count(')'):\n            result.append(current_group)\n            current_group = ''\n    return result\n"}
{"task_id": "HumanEval/2", "completion": "import math\n\ndef truncate_number(number: float) -> float:\n    return number - math.floor(number)"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "from typing import List\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = statistics.mean(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    return statistics.mean(absolute_deviations)"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    return [x for pair in zip(numbers, [delimiter] * (len(numbers) - 1)) for x in pair] + [numbers[-1]] if numbers else []"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':n                current_depth -= 1\n        if current_depth != 0:n            raise ValueError('Invalid input: Unbalanced parentheses')n        result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    if not substring:\n        return []\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\nfrom functools import reduce\nimport operator\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), reduce(operator.mul, numbers, 1)"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    window = deque()\n    \n    for i, num in enumerate(numbers):\n        while window and numbers[window[-1]] <= num:\n            window.pop()\n        window.append(i)\n        \n        if window[0] == i - len(window):\n            window.popleft()\n        \n        result.append(numbers[window[0]])\n    \n    return result"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[:len(string)-i]):\n            return string + string[:len(string)-i-1][::-1]\n    return string + string[:-1][::-1]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n        elif len(string) == len(longest_string):\n            longest_string = min(string, longest_string)\n    return longest_string\n"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    ''' Return a string containing space-delimited numbers starting from 0 upto n inclusive. '''\n    if n == 0:\n        return '0'\n    else:\n        return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    for char in string:\n        if char.isalpha():\n            distinct_chars.add(char.lower())\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    result = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            result.append(4)\n            i += 2  # Move to the next note\n        elif music_string[i:i+2] == 'o|':\n            result.append(2)\n            i += 2  # Move to the next note\n        elif music_string[i:i+2] == '.|':\n            result.append(1)\n            i += 2  # Move to the next note\n        else:\n            i += 1  # Move to the next character\n    return result\n"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    if not substring:\n        return 0\n    else:\n        count = 0\n        start = 0\n        while True:\n            start = string.find(substring, start)  # Find the next occurrence of the substring\n            if start == -1:\n                break\n            count += 1\n            start += 1  # Move to the next character to check for overlapping cases\n        return count"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    number_words = numbers.split()\n    number_values = [number_map[word] for word in number_words]\n    sorted_number_words = [key for value, key in sorted(zip(number_values, number_map.keys()))]\n\n    return ' '.join(sorted_number_words)"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    rescaled = [(x - min_num) / range_num for x in numbers]\n    return rescaled"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [value for value in values if isinstance(value, int) or (isinstance(value, str) and value.isdigit())]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    length = 0\n    for char in string:\n        length += 1\n    return length\n"}
{"task_id": "HumanEval/24", "completion": "import math\n\ndef largest_divisor(n: int) -> int:\n    for i in range(int(math.sqrt(n)), 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    \n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    \n    return result\n"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings) if strings else ''"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    if prefix == '':\n        return []\n    filtered_strings = []\n    for s in strings:\n        if s.startswith(prefix):\n            filtered_strings.append(s)\n    return filtered_strings"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    if not all(isinstance(num, (int, float)) for num in l):\n        raise ValueError(\"Input list must contain only numeric values\")\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "The original code is clear, concise, and efficient for the given task without introducing unnecessary complexity or dependencies."}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    sorted_values = sorted([l[i] for i in range(len(l)) if i % 3 == 0])\n    l_prime = l[:]\n    j = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_prime[i] = sorted_values[j]\n            j += 1\n    return l_prime"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    unique_list = list(set(l))\n    unique_list.sort()\n    return unique_list"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num\n"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_values = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    result = [even_values.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]\n    return result"}
{"task_id": "HumanEval/38", "completion": "The original implementation of encode_cyclic and decode_cyclic functions is correct."}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib_sequence = [0, 1]\n    count = 2  # Start the count at 2 since we already have the first two Fibonacci numbers\n    while True:\n        next_fib = fib_sequence[-1] + fib_sequence[-2]\n        if is_prime(next_fib):\n            count += 1\n            if count == n:\n                return next_fib\n    "}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    return n * (n - 1) // 2"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    if not all(isinstance(x, (int, float)) for x in l):\n        raise TypeError(\"All elements in the list must be numbers\")\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    l.sort()\n    left = 0\n    right = len(l) - 1\n    while left < right:\n        current_sum = l[left] + l[right]\n        if current_sum == 0:\n            return True\n        elif current_sum < 0:\n            left += 1\n        else:\n            right -= 1\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\"\"\"\n    if x < 0 or base < 2 or base > 9:\n        raise ValueError(\"Input number must be non-negative and base must be between 2 and 9\")\n\n    if x == 0:\n        return \"0\"\n\n    result = \"\"\n    while x > 0:\n        x, remainder = divmod(x, base)\n        result = str(remainder) + result\n    return result"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(base, height):\n    \"\"\"Given length of a base and height, return the area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = (1/2) * base * height\n    return area\n"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\"\"\"\n    if not l:\n        raise ValueError(\"Empty list\")\n    sorted_list = sorted(l)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        return (sorted_list[length // 2 - 1] + sorted_list[length // 2]) / 2\n    else:\n        return sorted_list[length // 2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    # Remove spaces and convert to lowercase\n    text = ''.join(filter(str.isalnum, text)).lower()\n    # Check if the text is equal to its reverse\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0) != len(s1):\n        return False\n    char_count = {}\n    for char in s0:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s1:\n        if char in char_count:\n            char_count[char] -= 1\n        else:\n            return False\n    return all(count == 0 for count in char_count.values())\n"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 0:\n        return \"Input should be a positive integer\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    factor = 2\n    while factor * factor <= n:\n        if n % factor:\n            factor += 1\n        else:\n            n //= factor\n    return n\n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(': \n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))] if len(xs) > 1 else [0]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    memo = {0: 0, 1: 0, 2: 1}\n    def fib(n):\n        if n in memo:\n            return memo[n]\n        else:\n            memo[n] = fib(n-1) + fib(n-2) + fib(n-3)\n            return memo[n]\n    return fib(n)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    count = 0\n    vowels = \"aeiou\"\n    s = s.lower()\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') and s[-2] not in vowels:\n        count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)\n    num_digits = len(x_str)\n    shift = shift % num_digits  # Handle the case where shift is greater than the number of digits\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper()) if s else 0"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    return n - apples - oranges\n"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    min_even_value = float('inf')\n    min_even_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_even_value:\n            min_even_value = arr[i]\n            min_even_index = i\n    if min_even_index == -1:\n        return []\n    else:\n        return [min_even_value, min_even_index]"}
{"task_id": "HumanEval/69", "completion": "from collections import Counter\n\ndef search(lst):\n    frequency = Counter(lst)\n    result = -1\n    for key, value in frequency.items():\n        if key > value and key > result:\n            result = key\n    return result"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while lst:\n        sorted_list.append(lst.pop(0))\n        if lst:\n            sorted_list.append(lst.pop())\n    return sorted_list\n"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    elif a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if q == q[::-1]:  # Check if the list q is palindromic\n        if sum(q) <= w:  # Check if the sum of the elements is less than or equal to the maximum possible weight w\n            return True\n    return False"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    changes = 0\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n\n    if left >= right:\n        return changes\n    else:\n        return 0"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2\n"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    primes = []\n    for i in range(2, a):\n        if len(primes) == 3:\n            break\n        if a % i == 0:\n            is_prime = True\n            for j in range(2, int(i**0.5) + 1):\n                if i % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(i)\n    return len(primes) == 3\n"}
{"task_id": "HumanEval/76", "completion": "import math\n\ndef is_simple_power(x, n):\n    if x < 1 or n < 1:\n        return False\n    power = math.log(x, n)\n    return power.is_integer()"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a < 0:\n        return (round(abs(a) ** (1/3)) ** 3) == a\n    else:\n        return (round(a ** (1/3)) ** 3) == a\n"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in primes:\n            if digit.isdigit():\n                if is_prime(int(digit, 16)):\n                    count += 1\n            else:\n                count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    if decimal == 0:\n        return 'db0db'\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return f'db{binary}db'"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i:i+3] in s[i+3:]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    if len(string) < 2:\n        return False\n    for i in range(2, int(len(string) ** 0.5) + 1):\n        if len(string) % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    total_count = 10 ** (n - 1)  # Total count of n-digit positive integers\n    not_start_or_end_with_1 = 8 * 9 ** (n - 1)  # Count of n-digit positive integers that do not start or end with 1\n    count = total_count - not_start_or_end_with_1  # Count of n-digit positive integers that start or end with 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    total_sum = sum(int(digit) for digit in bin(N)[2:])\n    return bin(total_sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    total = sum([x for i, x in enumerate(lst) if i % 2 != 0 and x % 2 == 0])\n    return total"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    result = ''\n    for i in range(len(ordered_words)):\n        result += ordered_words[i]\n        if i < len(words) - 1:\n            result += ' '\n    return result"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]), reverse=False)\n    return coordinates\n"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    sorted_array = array.copy()\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        return sorted(sorted_array, reverse=True)\n    else:\n        return sorted(sorted_array)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                encrypted_string += chr(((ord(char) - ord('a') + 2) * 2) % 26 + ord('a'))\n            else:\n                encrypted_string += chr(((ord(char) - ord('A') + 2) * 2) % 26 + ord('A'))\n        else:\n            encrypted_string += char\n    return encrypted_string"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest if second_smallest != float('inf') else None\n"}
{"task_id": "HumanEval/91", "completion": "import re\n\ndef is_bored(S):\n    pattern = r'\\bI\\b[^.!?]*[.!?]'\n    matches = re.findall(pattern, S)\n    return len(matches)"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if all(isinstance(num, int) for num in (x, y, z)):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            if char.islower():\n                encoded_message += chr((ord(char) - 97 + 2) % 26 + 97).upper()\n            else:\n                encoded_message += chr((ord(char) - 65 + 2) % 26 + 65).upper()\n        elif char.islower():\n            encoded_message += char.upper()\n        else:\n            encoded_message += char.lower()\n    return encoded_message\n"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(num))\n\n    largest_prime = None\n    for num in lst:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n\n    if largest_prime is not None:\n        return digit_sum(largest_prime)\n    else:\n        return 0\n"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dictionary):\n    if not dictionary:  # Check if the dictionary is empty\n        return False\n    all_keys = dictionary.keys()\n    if all(isinstance(key, str) for key in all_keys):\n        lower_case_keys = all(key.islower() for key in all_keys)\n        upper_case_keys = all(key.isupper() for key in all_keys)\n        return lower_case_keys or upper_case_keys\n    else:\n        return False\n"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    if n <= 1:\n        return []\n    sieve = [True] * n\n    sieve[0], sieve[1] = False, False\n    for i in range(2, int(n**0.5)+1):\n        if sieve[i]:\n            for j in range(i*i, n, i):\n                sieve[j] = False\n    primes = [i for i in range(n) if sieve[i]]\n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    # Get the unit digits of a and b\n    unit_a = abs(a) % 10\n    unit_b = abs(b) % 10\n    \n    # Calculate the product of the unit digits\n    product = unit_a * unit_b\n    \n    # Adjust the product based on the signs of a and b\n    if a < 0 and b < 0:\n        return product\n    elif a < 0 or b < 0:\n        return -product\n    else:\n        return product\n"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].upper() in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    num = float(value)\n    if num < 0:\n        return int(num - 0.5)\n    else:\n        return int(num + 0.5)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[i-1] % 2 == 0:\n            stones.append(stones[i-1] + 1)\n        else:\n            stones.append(stones[i-1] + 2)\n    return stones"}
{"task_id": "HumanEval/101", "completion": "import re\n\ndef words_string(s):\n    words = re.split(r'[,\\s]+', s)\n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x % 2 != 0:\n        x += 1\n    if y < x:\n        return -1\n    return y - (y - x) % 2\n"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        total_sum = sum(range(n, m+1))\n        count = m - n + 1\n        avg = round(total_sum / count)\n        return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    return sorted([num for num in x if not any(int(digit) % 2 == 0 for digit in str(num))])"}
{"task_id": "HumanEval/105", "completion": "Affirmative side"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, int(n**0.5)+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n        square = int(str(i) + str(i)[::-1])\n        if square <= n and str(square) == str(square)[::-1]:\n            if square % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        num_str = str(abs(num))\n        digit_sum = sum(int(digit) for digit in num_str)\n        if digit_sum > 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True  # If the array is empty, it is already sorted\n\n    n = len(arr)\n    max_index = arr.index(max(arr))  # Find the index of the maximum element in the array\n\n    sorted_arr = sorted(arr)  # Sort the array to compare with the original array\n\n    # Check if the array can be made non-decreasing by performing right shift operations\n    for i in range(n):\n        if arr == sorted_arr:\n            return True  # If the array is sorted, return True\n        else:\n            arr = [arr[max_index]] + arr[:max_index]  # Perform one right shift operation based on the index of the maximum element\n            max_index = (max_index - 1) % n  # Update the index of the maximum element after the right shift\n    return False  # If the array is not sorted after all right shift operations, return False\n"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    odd_count = sum(1 for x in lst1 if x % 2 != 0)\n    even_count = sum(1 for x in lst2 if x % 2 == 0)\n    if odd_count > even_count:\n        return 'NO'\n    else:\n        return 'YES'"}
{"task_id": "HumanEval/111", "completion": "from collections import Counter\n\ndef histogram(test):\n    letters = test.split()\n    letter_count = Counter(letters)\n    max_count = max(letter_count.values())\n    result = {letter: count for letter, count in letter_count.items() if count == max_count}\n    return result"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result_string = ''.join([char for char in s if char not in c])\n    is_palindrome = result_string == result_string[::-1]\n    return (result_string, is_palindrome)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for string in lst:\n        odd_digits_count = sum(1 for digit in string if int(digit) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_digits_count}n the str{odd_digits_count}ng {odd_digits_count} of the {odd_digits_count}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    \n    current_sum = nums[0]\n    min_sum = nums[0]\n    \n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    total_buckets_lowered = 0\n    for row in grid:\n        water_in_row = sum(row)\n        while water_in_row > 0:\n            water_in_row -= min(capacity, water_in_row)\n            total_buckets_lowered += 1\n    return total_buckets_lowered\n"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    if not s:\n        return []\n    \n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        return sum(1 for letter in word if letter in consonants)\n    \n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = set(\"aeiouAEIOU\")\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    \n    for i in range(len(word) - 3, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(': stack.append(char)\n            else:\n                if not stack: return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "import heapq\n\ndef maximum(arr, k):\n    max_k = []\n    for num in arr:\n        if len(max_k) < k:\n            heapq.heappush(max_k, num)\n        else:\n            heapq.heappushpop(max_k, num)\n    return sorted(max_k, reverse=True)"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 != 0:\n            total += lst[i]\n    return total\n"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    total = 0\n    for i in range(k):\n        if 10 <= arr[i] < 100:\n            total += arr[i]\n    return total\n"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    collatz_sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2 != 0:\n            collatz_sequence.append(n)\n    return sorted(collatz_sequence)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date:\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = map(int, parts)  # Convert parts to integers\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if year % 4 == 0:\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    \n    if year < 1900 or year > 2100:\n        return False\n    \n    return True\n"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n        return count\n"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_start > intersection_end:\n        return 'NO'\n    \n    intersection_length = intersection_end - intersection_start + 1\n    if intersection_length <= 1:\n        return 'NO'\n    \n    for i in range(2, int(intersection_length**0.5) + 1):\n        if intersection_length % i == 0:\n            return 'NO'\n    \n    return 'YES'"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    product_of_signs = 1\n    sum_of_magnitudes = sum(abs(num) for num in arr)\n    for num in arr:\n        if num == 0:\n            product_of_signs = 0\n            break\n        elif num < 0:\n            product_of_signs *= -1\n    return product_of_signs * sum_of_magnitudes\n"}
{"task_id": "HumanEval/129", "completion": "import heapq\n\ndef minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    visited = set()\n    heap = [(grid[0][0], 0, 0, [(0, 0)])]\n\n    while heap:\n        val, x, y, path = heapq.heappop(heap)\n        if len(path) == k:\n            return [grid[i][j] for i, j in path]\n        if (x, y) in visited:\n            continue\n        visited.add((x, y))\n        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited:\n                new_path = path + [(nx, ny)]\n                heapq.heappush(heap, (grid[nx][ny], nx, ny, new_path))\n\n    return None  # If k is not reachable\n"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [0, 1, 1]\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])\n            else:\n                sequence.append(1 + i // 2)\n        return sequence\n"}
{"task_id": "HumanEval/131", "completion": "from functools import reduce\n\ndef digits(n):\n    odd_digits = [int(digit) for digit in str(n) if int(digit) % 2 != 0]\n    product = reduce(lambda x, y: x * y, odd_digits, 1)\n    return product if odd_digits else 0"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    count = 0\n    for char in string:\n        if char == '[':\n            count += 1\n        elif char == ']':\n            count -= 1\n            if count < 0:\n                return True\n    return False\n"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    squared_sum = sum(math.ceil(num)**2 for num in lst)\n    return squared_sum"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    words = txt.split()\n    if len(words) == 0:\n        return False\n    last_word = words[-1]\n    if len(last_word) == 1 and last_word.isalpha():\n        return True\n    elif len(last_word) > 1 and last_word[-1].isalpha() and not last_word[-2].isalpha():\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            largest_index = i-1\n    return largest_index\n"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    neg_integers = [i for i in lst if i < 0]\n    pos_integers = [i for i in lst if i > 0]\n    max_neg = max(neg_integers) if neg_integers else None\n    min_pos = min(pos_integers) if pos_integers else None\n    return (max_neg, min_pos)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return a if a > b else (b if b > a else None)\n    elif isinstance(a, str) and isinstance(b, str):\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n        return a if float(a) > float(b) else (b if float(b) > float(a) else None)\n    else:\n        return a if not isinstance(a, str) else b\n"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n % 2 != 0:\n        return False\n    if n <= 7:\n        return False\n    return True\n"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return factorial(n) * special_factorial(n-1)\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "import re\n\ndef fix_spaces(text):\n    # Replace all spaces with underscores\n    text = re.sub(r' ', '_', text)\n    # Replace more than 2 consecutive spaces with a single hyphen\n    text = re.sub(r' {2,}', '-', text)\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    name_parts = file_name.split('.')\n    if len(name_parts[0]) == 0 or not name_parts[0][0].isalpha():\n        return 'No'\n    if name_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    if prime_length_words:\n        return ' '.join(prime_length_words)\n    else:\n        return None"}
{"task_id": "HumanEval/144", "completion": "from fractions import Fraction\n\ndef simplify(x, n):\n    x_fraction = Fraction(x)\n    n_fraction = Fraction(n)\n    \n    result_fraction = x_fraction * n_fraction\n    \n    return result_fraction.denominator == 1"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n"}
{"task_id": "HumanEval/146", "completion": "def isOdd(num):\n    num_str = str(abs(num))\n    return int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0\n\ndef specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and isOdd(num):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets_order = {\n        \"Mercury\": 1,\n        \"Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\": 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n    }\n\n    if planet1 not in planets_order or planet2 not in planets_order:\n        return ()\n\n    start = min(planets_order[planet1], planets_order[planet2])\n    end = max(planets_order[planet1], planets_order[planet2])\n\n    result = [planet for planet, order in planets_order.items() if start < order < end]\n    result.sort(key=lambda x: planets_order[x])\n    return tuple(result)"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    filtered_list = [word for word in lst if len(word) % 2 == 0]\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n    return sorted_list"}
{"task_id": "HumanEval/150", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y\n"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return 2 * sum([num ** 2 for num in lst if isinstance(num, int) and num > 0 and num % 2 != 0])\n"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_extension = ''\n    \n    for extension in extensions:\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = sum(1 for char in extension if char.islower())\n        strength = cap_count - sm_count\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if len(a) != len(b):\n        return False\n    a += a  # Concatenate a with itself to cover all possible rotations\n    return b in a\n"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    num = abs(num)\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    if not 1 <= number <= 1000:\n        return 'Input number must be between 1 and 1000'\n\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    unique_count_dict = {}\n    \n    for word in words:\n        unique_chars = set(word)\n        unique_count = len(unique_chars)\n        if unique_count not in unique_count_dict:\n            unique_count_dict[unique_count] = []\n        unique_count_dict[unique_count].append(word)\n    \n    max_unique_count = max(unique_count_dict.keys())\n    words_with_max_unique_count = unique_count_dict[max_unique_count]\n    \n    if len(words_with_max_unique_count) == 1:\n        return words_with_max_unique_count[0]\n    else:\n        return min(words_with_max_unique_count)"}
{"task_id": "HumanEval/159", "completion": "Both sides have presented the same correct solution, so there is no preference for either side. The correct code for the 'eat' function is: \n\ndef eat(number, need, remaining):\n    total_eaten = number + need if number + need <= remaining else number + remaining\n    remaining = max(0, remaining - need)\n    return [total_eaten, remaining]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[0]\n    valid_operators = ['+', '-', '*', '//', '**']\n    for i in range(len(operator)):\n        if operator[i] not in valid_operators:\n            return 'Invalid operator'\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result\n"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            result += char.swapcase()\n        else:\n            result += char\n    if not has_letter:\n        result = result[::-1]\n    return result\n"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n    else:\n        return None"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    start = min(a, b)\n    end = max(a, b)\n    return [num for num in range(start, end + 1) if num % 2 == 0]"}
