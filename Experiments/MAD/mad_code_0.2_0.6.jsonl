{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    start = 0\n    for i, char in enumerate(paren_string):\n        if char == '(':n            stack.append(i)\n        elif char == ')':n            if stack:n                start = stack.pop()n                result.append(paren_string[start:i+1].replace(' ', ''))n    return result"}
{"task_id": "HumanEval/2", "completion": "import math\n\ndef truncate_number(number: float) -> float:\n    return number - math.floor(number)"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    return sum(absolute_deviations) / len(absolute_deviations)"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = [x for pair in zip(numbers, [delimiter] * (len(numbers) - 1)) for x in pair]\n    if numbers:\n        result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        stack = []\n        max_depth = 0\n        for char in group:\n            if char == '(':n                stack.append(char)\n                max_depth = max(max_depth, len(stack))\n            elif char == ')':n                stack.pop()\n        result.append(max_depth)\n    return result\n"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        product = 1\n        for num in numbers:\n            product *= num\n        return sum(numbers), product"}
{"task_id": "HumanEval/9", "completion": "from collections import deque\nfrom typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    window = deque()\n    \n    for i, num in enumerate(numbers):\n        while window and numbers[window[-1]] <= num:\n            window.pop()\n        window.append(i)\n        \n        if window[0] == i - len(numbers):\n            window.popleft()\n        \n        result.append(numbers[window[0]])\n    \n    return result\n"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    if string == \"\":\n        return \"\"\n    for i in range(len(string), -1, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[:i-1][::-1]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest_string):\n            longest_string = s\n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    if n < 0:\n        return \"\"\n    else:\n        return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    char_counts = {}\n    for char in string.lower():\n        if char.isalpha():\n            char_counts[char] = char_counts.get(char, 0) + 1\n    return len(char_counts)"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = {'o': 4, 'o|': 2, '.|': 1}\n    music_list = music_string.split()\n    result = []\n    for note in music_list:\n        if note in beats:\n            result.append(beats[note])\n        else:\n            for char in note:\n                result.append(beats[char])\n    return result\n\n# Test the function\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))"}
{"task_id": "HumanEval/18", "completion": "Affirmative side"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    number_words = numbers.split()\n    number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    sorted_numbers = sorted(number_words, key=lambda x: number_map[x])\n    return ' '.join(sorted_numbers)"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()  # Sort the list in ascending order\n    min_diff = float('inf')  # Initialize min_diff to positive infinity\n    result = (0, 0)  # Initialize the result tuple\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]  # Calculate the difference between adjacent numbers\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n\n    return result"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    if range_num == 0:\n        return [0.0] * len(numbers)\n    else:\n        rescaled_numbers = [(num - min_num) / range_num for num in numbers]\n        return rescaled_numbers\n"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [value for value in values if isinstance(value, int) or (isinstance(value, float) and value.is_integer())]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    ''' Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    '''\n    length = 0\n    for _ in string:\n        length += 1\n    return length"}
{"task_id": "HumanEval/24", "completion": "import math\n\ndef largest_divisor(n: int) -> int:\n    for i in range(int(math.sqrt(n)), 1, -1):\n        if n % i == 0:\n            return i\n    return 1\n"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    seen = set()\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result\n"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() if char.islower() else char for char in string])"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string \"\"\"\n    return ''.join(strings) if strings else ''"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    if prefix == '':\n        return []\n    filtered_strings = []\n    for s in strings:\n        if s.startswith(prefix):\n            filtered_strings.append(s)\n    return filtered_strings"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    '''Return only positive numbers in the list.'''\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "import numpy as np\n\ndef find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero finds x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees a solution.\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The number of coefficients should be even.\")\n\n    # Remove trailing zeros\n    while xs[-1] == 0:\n        xs.pop()\n\n    roots = np.roots(xs)\n    real_roots = roots[np.isreal(roots)].real\n    return real_roots[0] if len(real_roots) > 0 else None\n"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    sorted_indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = [l[i] for i in sorted_indices]\n    sorted_values.sort()\n    result = l.copy()\n    for i in sorted_indices:\n        result[i] = sorted_values.pop(0)\n    return result"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    seen = set()\n    result = []\n    for item in l:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return sorted(result)"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    '''Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    '''\n    if not l:\n        raise ValueError('List is empty')\n    max_val = l[0]\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val\n"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_indices = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    result = [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]\n    return result"}
{"task_id": "HumanEval/38", "completion": "The correct implementation for the `encode_cyclic` function is the original implementation provided by the negative side. The correct implementation for the `decode_cyclic` function is the proposed implementation by the negative side."}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n):\n    fib_list = [0, 1]\n    while len(fib_list) < 2*n:\n        fib_list.append(fib_list[-1] + fib_list[-2])\n    prime_fib_list = [num for num in fib_list if is_prime(num)]\n    return prime_fib_list[n-1]"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns False if there are three distinct elements in the list that\n    sum to zero, and True otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    True\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    True\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    True\n    \"\"\"\n    n = len(l)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    return n * (n + 1)"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    try:\n        return [x * 2 for x in l]\n    except TypeError:\n        raise ValueError(\"Input list must contain only numeric elements\")"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "Affirmative side"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(base, height):\n    \"\"\"\n    Given the length of the base and the height, return the area of a triangle.\n    \n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * base * height"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    sorted_list = sorted(l)\n    length = len(sorted_list)\n    if length == 0:\n        raise ValueError(\"The input list is empty\")\n    if length % 2 == 0:\n        return (sorted_list[length // 2 - 1] + sorted_list[length // 2]) / 2\n    else:\n        return sorted_list[length // 2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    text = text.lower()  # Convert the text to lowercase\n    text = ''.join(e for e in text if e.isalnum())  # Remove non-alphanumeric characters\n    return text == text[::-1]  # Check if the modified text is a palindrome\n"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        n = n // 2\n        base = (base * base) % p\n    return result\n"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    return increasing or decreasing or len(set(l)) == len(l)"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    def smallest_prime_factor(num):\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return i\n        return num\n\n    while True:\n        factor = smallest_prime_factor(n)\n        if factor < n:\n            n //= factor\n        else:\n            return n\n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return n*(n+1)//2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(': \n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))] if len(xs) > 1 else [0]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int, memo={0: 0, 1: 0, 2: 1}):\n    if n in memo:\n        return memo[n]\n    else:\n        memo[n] = fibfib(n-1, memo) + fibfib(n-2, memo) + fibfib(n-3, memo)\n        return memo[n]"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    s = s.lower()\n    vowels = 'aeiouy'\n    count = 0\n    if s[-1] == 'y':\n        count = sum(1 for char in s[:-1] if char in vowels) + 1\n    else:\n        count = sum(1 for char in s if char in vowels)\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)\n    num_digits = len(x_str)\n    shift = shift % num_digits  # Handle the case where shift is greater than the number of digits\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper()) if s else 0"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    import re\n    # Extract the counts of apples and oranges using regular expressions\n    apple_count = int(re.search(r'(\\d+)\\s*(?:apples|apple)', s).group(1) if re.search(r'(\\d+)\\s*(?:apples|apple)', s) else 0)\n    orange_count = int(re.search(r'(\\d+)\\s*(?:oranges|orange)', s).group(1) if re.search(r'(\\d+)\\s*(?:oranges|orange)', s) else 0)\n    # Calculate the count of mangoes\n    mango_count = n - apple_count - orange_count\n    return mango_count"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_even_index = -1\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] <= smallest_even:\n            smallest_even = arr[i]\n            smallest_even_index = i\n    \n    if smallest_even_index == -1:\n        return []\n    else:\n        return [smallest_even, smallest_even_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    max_val = -1\n    for num in set(lst):\n        if num > 0 and lst.count(num) >= num:\n            max_val = max(max_val, num)\n    return max_val\n"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while lst:\n        sorted_list.append(lst.pop(0))\n        if lst:\n            sorted_list.append(lst.pop())\n    return sorted_list\n"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    elif a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if len(q) == 0:\n        return w >= 0\n    return q == q[::-1] and sum(q) <= w\n"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    changes = 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes\n\n# Test cases\nprint(smallest_change([1,2,3,5,4,7,9,6]))  # Output: 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))  # Output: 1\nprint(smallest_change([1, 2, 3, 2, 1]))  # Output: 0\n"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    \n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2\n"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    primes = []\n    for i in range(2, a):\n        if len(primes) == 3:\n            break\n        if a % i == 0:\n            is_prime = True\n            for j in range(2, int(i**0.5) + 1):\n                if i % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(i)\n    return len(primes) == 3\n"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    if n == 1:\n        return False\n    power = 1\n    while n ** power <= x:\n        if n ** power == x:\n            return True\n        power += 1\n    return False\n"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a == 0:\n        return True\n    elif a < 0:\n        return False\n    else:\n        cube_root = round(a ** (1/3))\n        return cube_root ** 3 == a\n"}
{"task_id": "HumanEval/78", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in primes)\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    if decimal == 0:\n        return 'db0db'\n    else:\n        binary_str = bin(decimal)[2:]\n        return f'db{binary_str}db'"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    grade_mapping = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-'\n    }\n    letter_grades = [grade_mapping.get(gpa, 'E') for gpa in grades]\n    return letter_grades\n"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    length = len(string)\n    if length <= 1:\n        return False\n    return is_prime(length)\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    if n == 1:\n        return 1  # Only 1-digit numbers start or end with 1\n    else:\n        start_with_1 = 9 * 10 ** (n - 2)  # Count of n-digit numbers starting with 1\n        end_with_1 = 10 ** (n - 1)  # Count of n-digit numbers ending with 1\n        return start_with_1 + end_with_1"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary_rep = bin(N)[2:]\n    sum_of_digits = sum(int(digit) for digit in binary_rep)\n    return bin(sum_of_digits)[2:]\n"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    total = sum([x for i, x in enumerate(lst) if i % 2 != 0 and x % 2 == 0])\n    return total"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    result = ''\n    for i in range(len(ordered_words)):\n        result += ordered_words[i]\n        if i < len(words) - 1:\n            result += ' '\n    return result"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates\n"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array, desc=False):\n    sorted_array = sorted(array, reverse=desc)  # Create a sorted copy of the given array\n    if (array[0] * array[-1]) % 2 == 0:  # Check if the product of first and last index is even\n        return sorted_array  # Return the sorted array\n    else: return sorted_array[::-1]  # Return the sorted array in reverse order"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                encrypted_string += chr(((ord(char) - ord('a') + 2) % 26) + ord('a'))\n            else:\n                encrypted_string += chr(((ord(char) - ord('A') + 2) % 26) + ord('A'))\n        else:\n            encrypted_string += char\n    return encrypted_string"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        smallest = float('inf')\n        second_smallest = float('inf')\n        for num in lst:\n            if num < smallest:\n                second_smallest = smallest\n                smallest = num\n            elif num < second_smallest and num != smallest:\n                second_smallest = num\n        if second_smallest == float('inf'):\n            return None\n        else:\n            return second_smallest\n"}
{"task_id": "HumanEval/91", "completion": "import re\n\ndef is_bored(S):\n    pattern = r'\\bI\\b[^.!?]*[.!?]'\n    matches = re.findall(pattern, S)\n    return len(matches)"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if all(isinstance(num, int) for num in [x, y, z]):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode_message(message):\n    vowels = \"aeiouAEIOU\"\n    encoded_message = \"\"\n    for char in message:\n        if char in vowels:\n            if char.islower():\n                encoded_message += chr((ord(char) - 97 + 2) % 26 + 97).upper()\n            else:\n                encoded_message += chr((ord(char) - 65 + 2) % 26 + 65).upper()\n        else:\n            if char.islower():\n                encoded_message += char.upper()\n            else:\n                encoded_message += char.lower()\n    return encoded_message\n"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(num))\n\n    largest_prime = None\n    for num in lst:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n\n    if largest_prime is not None:\n        return digit_sum(largest_prime)\n    else:\n        return 0"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dictionary):\n    if not dictionary:  # Check if the dictionary is empty\n        return False\n    \n    lower_case_keys = all(key.islower() for key in dictionary if isinstance(key, str))\n    upper_case_keys = all(key.isupper() for key in dictionary if isinstance(key, str))\n    \n    return lower_case_keys or upper_case_keys and not (lower_case_keys and upper_case_keys)"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    if n <= 1:\n        return []\n    sieve = [True] * n\n    sieve[0], sieve[1] = False, False\n    for i in range(2, int(n**0.5)+1):\n        if sieve[i]:\n            for j in range(i*i, n, i):\n                sieve[j] = False\n    primes = [i for i in range(n) if sieve[i]]\n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    vowels = ['a', 'E', 'I', 'O', 'e']\n    count = 0\n    for i in range(1, len(s), 2):\n        if s[i].isalpha() and s[i].isupper() and s[i].lower() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    num = float(value)\n    lower_int = int(num)\n    upper_int = lower_int + 1\n    \n    if num - lower_int < 0.5:\n        return lower_int\n    else:\n        return upper_int\n"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[i-1] % 2 == 0:\n            stones.append(stones[i-1] + 2)\n        else:\n            stones.append(stones[i-1] + 1)\n    return stones"}
{"task_id": "HumanEval/101", "completion": "import re\n\ndef words_string(s):\n    words = re.split(', | ', s)\n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    if max_even == -1:\n        return -1\n    else:\n        return max_even\n"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        total = 0\n        count = 0\n        for i in range(n, m+1):\n            total += i\n            count += 1\n        avg = round(total / count)\n        return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    number_names = {\n        1: 'One',\n        2: 'Two',\n        3: 'Three',\n        4: 'Four',\n        5: 'Five',\n        6: 'Six',\n        7: 'Seven',\n        8: 'Eight',\n        9: 'Nine'\n    }\n    result = [number_names[x] for x in reversed_arr]\n    return result"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    return [1 if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = abs(num)\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True  # If the array is empty, it is already sorted\n\n    n = len(arr)\n\n    # Check if the array is already sorted\n    for i in range(n):\n        if all(arr[j] <= arr[(j+1) % n] for j in range(n)):\n            return True\n        arr = [arr[-1]] + arr[:-1]  # Perform one right shift\n\n    return False  # If the array is not sorted after all right shifts"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    if (sum(lst1) + sum(lst2)) % 2 != 0:\n        return 'NO'\n    diff = 0\n    for num1, num2 in zip(lst1, lst2):\n        diff += (num1 % 2) - (num2 % 2)\n    if diff >= 0:\n        return 'YES'\n    else:\n        return 'NO'"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    letters = test.split()\n    letter_count = {}\n    max_count = 0\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n        max_count = max(max_count, letter_count[letter])\n    result = {letter: count for letter, count in letter_count.items() if count == max_count}\n    return result"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result_string = ''.join([char for char in s if char not in c])\n    is_palindrome = result_string == result_string[::-1]\n    return (result_string, is_palindrome)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for string in lst:\n        count = sum(1 for char in string if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {string} of the {count}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    max_ending_here = max_so_far = nums[0]\n    for num in nums[1:]:\n        max_ending_here = max(num, max_ending_here + num)\n        max_so_far = max(max_so_far, max_ending_here)\n    if max_so_far > 0:\n        return -max_so_far\n    else:\n        return max(nums)"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n    total_lowering = 0\n    for row in grid:\n        for well in row:\n            if well > 0:\n                total_lowering += math.ceil(well / capacity)\n    return total_lowering\n"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    if not s:\n        return []\n    \n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        return sum(1 for letter in word if letter in consonants)\n    \n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = set(\"aeiouAEIOU\")\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    \n    for i in range(len(word) - 3, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    stack = []\n    concatenated_string = lst[0] + lst[1]\n    for char in concatenated_string:\n        if char == '(': stack.append(char)\n        else:\n            if not stack or stack[-1] != '(': return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            total += lst[i]\n    return total\n"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    total = 0\n    for i in range(k):\n        if 10 <= abs(arr[i]) < 100:\n            total += arr[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    result = []\n    while n != 1:\n        if n % 2 != 0:\n            result.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    result.append(1)  # Add 1 to the result as it is always part of the Collatz sequence\n    return sorted(list(set(result)))"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date:\n        return False\n    month, day, year = date.split('-')\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    return True\n"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n        return count\n"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    seen = set()\n    prev = None\n    for num in lst:\n        if num in seen or (prev is not None and num < prev):\n            return False\n        seen.add(num)\n        prev = num\n    return True\n"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_start > intersection_end:\n        return 'NO'\n    \n    intersection_length = intersection_end - intersection_start + 1\n    if intersection_length < 2:\n        return 'NO'\n    \n    for i in range(2, int(intersection_length**0.5) + 1):\n        if intersection_length % i == 0:\n            return 'NO'\n    \n    return 'YES'"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    sign_product = 1\n    magnitude_sum = 0\n    \n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n            magnitude_sum += num\n        elif num < 0:\n            sign_product *= -1\n            magnitude_sum += abs(num)\n        else:\n            sign_product *= 0\n    \n    return sign_product * magnitude_sum\n"}
{"task_id": "HumanEval/129", "completion": "import heapq\n\ndef minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    pq = [(grid[0][0], 0, 0, [(0, 0)])]\n    visited = set()\n\n    while pq:\n        val, i, j, path = heapq.heappop(pq)\n        if (i, j) in visited:\n            continue\n        visited.add((i, j))\n        if len(path) == k:\n            return [grid[x][y] for x, y in path]\n        for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            if 0 <= x < n and 0 <= y < m and (x, y) not in visited:\n                heapq.heappush(pq, (grid[x][y], x, y, path + [(x, y)]))\n"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [3]\n    else:\n        tribonacci_sequence = [0, 3]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                tribonacci_sequence.append(1 + i // 2)\n            else:\n                tribonacci_sequence.append(tribonacci_sequence[i - 1] + tribonacci_sequence[i - 2] + tribonacci_sequence[i - 3])\n        return tribonacci_sequence\n"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    has_odd_digit = False\n    if n == 0:\n        return 0\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd_digit = True\n        n //= 10\n    return product if has_odd_digit else 0\n"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    total = 0\n    for num in lst:\n        total += math.ceil(num) ** 2\n    return total"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    elif txt[-1].isalpha() and (txt[-2] == ' ' or len(txt) == 1):\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i\n    return largest_index\n"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    max_negative = None\n    min_positive = None\n\n    for num in lst:\n        if num < 0 and (max_negative is None or num > max_negative):\n            max_negative = num\n        elif num > 0 and (min_positive is None or num < min_positive):\n            min_positive = num\n\n    return (max_negative, min_positive)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return a if a > b else (b if b > a else None)\n    elif isinstance(a, str) and isinstance(b, str):\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n        return a if float(a) > float(b) else (b if float(b) > float(a) else None)\n    else:\n        return a if not isinstance(a, str) else b\n"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n % 2 != 0:\n        return False\n    if n <= 8:\n        return False\n    return True\n"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        result *= factorial\n    return result\n"}
{"task_id": "HumanEval/140", "completion": "import re\n\ndef fix_spaces(text):\n    # Replace all spaces with underscores\n    text = re.sub(r' ', '_', text)\n    # Replace more than 2 consecutive spaces with -\n    text = re.sub(r' {3,}', '-', text)\n    return text"}
{"task_id": "HumanEval/141", "completion": "import re\n\ndef file_name_check(file_name):\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$'\n    if re.match(pattern, file_name) and file_name.count('.') == 1 and sum(c.isdigit() for c in file_name) <= 3:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "from fractions import Fraction\n\ndef simplify(x, n):\n    x_fraction = Fraction(x)\n    n_fraction = Fraction(n)\n    \n    result_fraction = x_fraction * n_fraction\n    \n    return result_fraction.denominator == 1"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    def isOddFirstLast(num):\n        num_str = str(abs(num))\n        return int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0\n\n    count = sum(1 for num in nums if num > 10 and isOddFirstLast(num))\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    count = 0\n    for i in range(3):\n        count_i = (n - i) // 3\n        count += count_i * (count_i - 1) // 2\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = {\n        \"Mercury\": 1,\n        \"Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\": 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n    }\n\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    start = min(planets[planet1], planets[planet2])\n    end = max(planets[planet1], planets[planet2])\n\n    result = [planet for planet, position in planets.items() if start < position < end]\n    result.sort(key=lambda x: planets[x])\n\n    return tuple(result)"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    filtered_list = [word for word in lst if len(word) % 2 == 0]\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n    return sorted_list\n"}
{"task_id": "HumanEval/150", "completion": "def is_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return True\n\ndef x_or_y(n, x, y):\n    return y if is_prime(n) else x\n"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            result += num ** 2\n    return result"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strengths = {}\n    for ext in extensions:\n        cap_count = sum(1 for c in ext if c.isupper())\n        sm_count = sum(1 for c in ext if c.islower())\n        strength = cap_count - sm_count\n        strengths[ext] = strength\n\n    strongest_ext = max(strengths, key=strengths.get)\n    return f\"{class_name}.{strongest_ext}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    double_a = a + a  # Concatenate the first word with itself to cover all possible rotations\n    return b in double_a\n"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    num_str = str(abs(num))  # Convert the absolute value of the integer to a string\n    even_count = 0\n    odd_count = 0\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if num == 0:\n        return (1, 0)  # Special case for input integer 0\n    else:\n        return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    if not 1 <= number <= 1000:\n        raise ValueError(\"Number must be between 1 and 1000\")\n\n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n\n    result = ''\n    for value, numeral in roman_numerals:\n        while number != value:\n            result += numeral\n            number -= value\n\n    return result.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    if sides[0] + sides[1] > sides[2]:  # Check if the sides form a valid triangle\n        if sides[0]**2 + sides[1]**2 == sides[2]**2:\n            return True\n        else:\n            return False\n    else:\n        return False  # If the sides do not form a valid triangle, return False\n"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            max_word = min(max_word, word)\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten = number + remaining\n    if total_eaten >= need:\n        return [number + need, remaining - (need - number)]\n    else:\n        return [total_eaten, 0]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[0]\n    valid_operators = ['+', '-', '*', '//', '**']\n    for i in range(len(operator)):\n        if operator[i] in valid_operators:\n            if operator[i] == '+':\n                result += operand[i + 1]\n            elif operator[i] == '-':\n                result -= operand[i + 1]\n            elif operator[i] == '*':\n                result *= operand[i + 1]\n            elif operator[i] == '//':\n                result //= operand[i + 1]\n            elif operator[i] == '**':\n                result **= operand[i + 1]\n        else:\n            raise ValueError(\"Invalid operator in the operator list\")\n    return result\n"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    letters = [char for char in s if char.isalpha()]\n    if len(letters) == 0:\n        return s[::-1]\n    else:\n        result = ''\n        for char in s:\n            if char.isalpha():\n                if char.islower():\n                    result += char.upper()\n                else:\n                    result += char.lower()\n            else:\n                result += char\n        return result\n"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if isinstance(text, str):\n        if text:\n            return hashlib.md5(text.encode()).hexdigest()\n        else:\n            return None\n    else:\n        raise ValueError(\"Input must be a string\")"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    result = []\n    for num in range(min(a, b), max(a, b) + 1):\n        if num % 2 == 0:\n            result.append(num)\n    return result\n"}
