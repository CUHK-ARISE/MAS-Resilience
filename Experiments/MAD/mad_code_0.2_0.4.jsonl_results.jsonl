{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "completion": "```python\nfrom typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    counter = 0\n    start = 0\n    for i, char in enumerate(paren_string):\n        if char == '(': \n            if counter > 0:\n                start = i\n            stack.append(i)\n            counter += 1\n        elif char == ')':\n            stack.pop()\n            counter -= 1\n            if counter == 0:\n                result.append(paren_string[start:i+1])\n    return result\n```", "result": "failed: invalid syntax (<string>, line 12)", "passed": false}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number - int(number)", "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return balance <= 0", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/4", "completion": "from typing import List\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = statistics.mean(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    return statistics.mean(absolute_deviations)", "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    return [x for pair in zip(numbers, [delimiter] * (len(numbers) - 1) + [0]) for x in pair]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        stack = []\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':n                stack.append(char)\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':n                if stack:n                    stack.pop()n                    current_depth -= 1n                else:n                    return 'Invalid input: Unbalanced parentheses'n        if stack:n            return 'Invalid input: Unbalanced parentheses'n        result.append(max_depth)\n    return result", "result": "failed: invalid decimal literal (<string>, line 24)", "passed": false}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        product = 1\n        for num in numbers:\n            product *= num\n        return sum(numbers), product\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "completion": "from collections import deque\nfrom typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    window = deque()\n    \n    for i, num in enumerate(numbers):\n        while window and numbers[window[-1]] <= num:\n            window.pop()\n        window.append(i)\n        \n        if window[0] == i - len(numbers) + 1:\n            window.popleft()\n        \n        result.append(numbers[window[0]])\n    \n    return result", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'tacat'\n    >>> make_palindrome('cata')\n    'atacata'\n    \"\"\"\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    if not string:\n        return string\n\n    i = len(string)\n    while i > 0:\n        if is_palindrome(string[:i]):\n            break\n        i -= 1\n\n    return string + string[:i-1][::-1]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    else:\n        longest_string = strings[0]\n        for string in strings:\n            if len(string) > len(longest_string):\n                longest_string = string\n            elif len(string) == len(longest_string):\n                continue\n        return longest_string\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes", "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive. \"\"\"\n    return ' '.join(str(i) for i in range(n+1)) if n > 0 else '0'", "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    # Convert the string to lowercase to ignore case\n    string = string.lower()\n    # Use a set to store the distinct characters\n    distinct_chars = set()\n    for char in string:\n        if char.isalpha():\n            distinct_chars.add(char)\n    # Return the length of the set, which gives the count of distinct characters\n    return len(distinct_chars)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = {'o': 4, 'o|': 2, '.|': 1}\n    music_list = music_string.split()\n    result = []\n    i = 0\n    while i < len(music_list):\n        note = music_list[i]\n        if i + 1 < len(music_list) and note + ' ' + music_list[i + 1] in beats:\n            result.append(beats[note + ' ' + music_list[i + 1]])\n            i += 2\n        else:\n            result.append(beats[note])\n            i += 1\n    return result\n\n# Test the function\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))  # Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]", "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    if not substring:\n        return 0\n    for i in range(len(string)):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    number_words = numbers.split()\n    number_values = [number_map[word] for word in number_words]\n    sorted_number_words = [key for value, key in sorted(zip(number_values, number_map.keys()))]\n\n    return ' '.join(sorted_number_words)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    if range_num == 0:\n        return [0.0] * len(numbers)\n    else:\n        rescaled = [(x - min_num) / range_num for x in numbers]\n        return rescaled\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [value for value in values if isinstance(value, int) or (isinstance(value, str) and value.isdigit())]", "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    length = 0\n    for _ in string:\n        length += 1\n    return length\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "completion": "import math\n\ndef largest_divisor(n: int) -> int:\n    for i in range(int(math.sqrt(n)), 0, -1):\n        if n % i == 0:\n            return i", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        count = 0\n        while n % divisor == 0:\n            count += 1\n            n //= divisor\n        if count > 0:\n            factors.extend([divisor] * count)\n        divisor += 1\n    return factors\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    \n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    \n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return string.swapcase()", "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string \"\"\"\n    if not strings:\n        return ''\n    else:\n        return ''.join(strings)", "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    if prefix == '':\n        return []\n    filtered_strings = []\n    for s in strings:\n        if s.startswith(prefix):\n            filtered_strings.append(s)\n    return filtered_strings", "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    '''Return only positive numbers in the list.'''\n    return [num for num in l if num > 0]", "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "completion": "import numpy as np\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The number of coefficients must be even.\")\n    if xs[-1] == 0:\n        raise ValueError(\"The largest non-zero coefficient must be non-zero.\")\n    roots = np.roots(xs)\n    return roots[abs(roots.imag) < 1e-5].real[0]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    non_divisible_by_three = [l[i] for i in range(len(l)) if i % 3 != 0]\n    divisible_by_three = sorted([l[i] for i in range(len(l)) if i % 3 == 0])\n    result = [non_divisible_by_three[i] if i % 3 != 0 else divisible_by_three[i//3] for i in range(len(l))]\n    return result", "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    seen = {}\n    result = []\n    for item in l:\n        if item not in seen:\n            seen[item] = True\n            result.append(item)\n    result.sort()\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    max_val = float('-inf')\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if '7' in str(i):\n            count += 1\n        elif i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    for i in range(0, len(l), 2):  # Iterate through the even indices\n        l[i] = sorted(l[i])  # Sort the value at the even index in place\n    return l", "result": "failed: 'int' object is not iterable", "passed": false}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    Takes as input a string encoded with the encode_cyclic function and returns the decoded string.\n    \"\"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "result": "passed", "passed": true}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib_list = [0, 1]\n    count = 2  # Start with the 3rd Fibonacci number\n    while True:\n        next_fib = fib_list[-1] + fib_list[-2]\n        if is_prime(next_fib):\n            count += 1\n            if count == n:\n                return next_fib\n    ", "result": "timed out", "passed": false}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    n = len(l)\n    l.sort()  # Sort the list to optimize the search\n    for i in range(n-2):\n        if i > 0 and l[i] == l[i-1]:  # Skip duplicate elements\n            continue\n        left = i + 1\n        right = n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    return n * (n + 1)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    if not isinstance(l, list):\n        raise TypeError(\"Input must be a list\")\n    for elem in l:\n        if not isinstance(elem, (int, float)):\n            raise TypeError(\"Elements of the list must be numeric\")\n    return [x + 1 for x in l]", "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    if not isinstance(x, int) or not isinstance(base, int) or base < 2 or base > 9:\n        raise ValueError('Input values are not valid')\n    if x < 0:\n        raise ValueError('Input number x must be non-negative')\n    if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "completion": "def triangle_area(base, height):\n    \"\"\"\n    Calculate the area of a triangle.\n\n    Args:\n    base (float): The length of the base of the triangle.\n    height (float): The height of the triangle.\n\n    Returns:\n    float: The area of the triangle.\n    \"\"\"\n    area = 0.5 * base * height\n    return area", "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    sorted_list = sorted(l)\n    length = len(l) - 1\n    if length % 2 != 0:\n        return (sorted_list[length//2 - 1] + sorted_list[length//2]) / 2\n    else:\n        return sorted_list[length//2]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    text = text.lower()  # Convert the text to lowercase\n    text = ''.join(e for e in text if e.isalnum())  # Remove non-alphanumeric characters\n    return text == text[::-1]  # Check if the modified text is a palindrome\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    return pow(2, n, p)", "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    return sorted(s0) == sorted(s1)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    return increasing or decreasing or len(set(l)) == 1", "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))", "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    prime_factor = 2\n    while prime_factor * prime_factor <= n:\n        if n % prime_factor == 0:\n            n //= prime_factor\n        else:\n            prime_factor += 1\n    return n", "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return n*(n+1)//2", "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(': \n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    return [xs[i] + i for i in range(1, len(xs))] if len(xs) > 1 else [0]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_values = [0, 0, 1]\n        for i in range(3, n+1):\n            fibfib_values.append(fibfib_values[i-1] + fibfib_values[i-2] + fibfib_values[i-3])\n        return fibfib_values[n]", "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "completion": "The correct answer is the implementation provided by the affirmative side.", "result": "failed: invalid syntax (<string>, line 18)", "passed": false}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)\n    num_digits = len(x_str)\n    shift = shift % num_digits  # Ensure shift is within the range of digits\n\n    if shift == 0:\n        return x_str\n    else:\n        shifted_str = x_str[-shift:] + x_str[:-shift]\n        return shifted_str", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    if not s:\n        return 0\n    return sum(ord(char) for char in s if char.isupper())", "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    # Split the string to extract the numbers of apples and oranges\n    numbers = [int(s) for s in s.split() if s.isdigit()]\n    # Calculate the number of mango fruits\n    mango_fruits = n - sum(numbers)\n    return mango_fruits", "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_even_index = -1\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] <= smallest_even:\n            smallest_even = arr[i]\n            smallest_even_index = i\n    \n    if smallest_even_index == -1:\n        return []\n    else:\n        return [smallest_even, smallest_even_index]", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    frequency = {}\n    max_val = -1\n    for num in lst:\n        if num > 0:\n            frequency[num] = frequency.get(num, 0) + 1\n            if frequency[num] >= num:\n                max_val = max(max_val, num)\n    return max_val\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    sorted_list = sorted(lst, reverse=True)\n    result = []\n    while sorted_list:\n        result.append(sorted_list.pop(0))\n        if sorted_list:\n            result.append(sorted_list.pop())\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    elif a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if len(q) == 0:\n        return False\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    if arr == arr[::-1]:\n        return 0\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    \n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    primes = []\n    for i in range(2, a):\n        if len(primes) == 3:\n            break\n        if a % i == 0:\n            is_prime = True\n            for j in range(2, int(i**0.5) + 1):\n                if i % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(i)\n    return len(primes) == 3\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "completion": "import math\n\ndef is_simple_power(x, n):\n    if x < 1 or n < 1:\n        return False\n    result = math.log(x, n)\n    return result.is_integer()", "result": "failed: float division by zero", "passed": false}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a == 0:\n        return True\n    elif a < 0:\n        return False\n    else:\n        cube_root = round(a ** (1/3))\n        return cube_root ** 3 == a\n", "result": "failed: Third test error: False", "passed": false}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    binary_string = ''.join(['1' if digit == '1' else '0' for digit in binary])\n    return f\"db{binary_string}db\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 3.9:\n            letter_grades.append('A++')\n        elif gpa >= 3.6:\n            letter_grades.append('A-')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 2.9:\n            letter_grades.append('B-')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.2:\n            letter_grades.append('B-')\n        elif gpa >= 1.8:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C-')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.6:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    if len(string) < 2:\n        return False\n    for i in range(2, int(len(string) ** 0.5) + 1):\n        if len(string) % i == 0:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    if n < 1:\n        return 0\n    else:\n        count = 10 ** (n - 1)  # There are 10 choices for each digit, so 10^(n-1) n-digit positive integers\n        return count", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    total_sum = 0\n    while N:\n        total_sum += N & 1\n        N >>= 1\n    return bin(total_sum)[2:]\n", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()  # Split the input string into words\n    ordered_words = []  # Initialize an empty list to store the ordered words\n    for word in words:\n        ordered_word = ''.join(sorted(word))  # Sort the characters of each word and join them back into a string\n        ordered_words.append(ordered_word)  # Add the ordered word to the list\n    result = ''\n    for i in range(len(ordered_words)):\n        result += ordered_words[i]\n        if i < len(words) - 1:\n            result += ' '  # Add a space if it's not the last word\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "completion": "Candidate 2", "result": "failed: invalid syntax (<string>, line 22)", "passed": false}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    sorted_array = array.copy()  # Create a copy of the given array\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:  # Check if the sum of first and last index is even\n        return sorted(sorted_array, reverse=True)  # Return a new sorted array in descending order\n    else:\n        return sorted(sorted_array)  # Return a new sorted array in ascending order\n", "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.islower():\n                encrypted_string += chr(((ord(char) - ord('a') + shift) % 26) + ord('a'))\n            else:\n                encrypted_string += chr(((ord(char) - ord('A') + shift) % 26) + ord('A'))\n        else:\n            encrypted_string += char\n    return encrypted_string", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        smallest = float('inf')\n        second_smallest = float('inf')\n        for num in lst:\n            if num < smallest:\n                second_smallest = smallest\n                smallest = num\n            elif num < second_smallest and num != smallest:\n                second_smallest = num\n        if second_smallest == float('inf'):\n            return None\n        else:\n            return second_smallest\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "completion": "import re\n\ndef is_bored(S):\n    pattern = r'\\bI\\b[^.!?]*[.!?]'\n    matches = re.findall(pattern, S)\n    return len(matches)", "result": "passed", "passed": true}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if all(isinstance(i, int) for i in [x, y, z]):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    encoded_message = \"\"\n    vowel_map = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    for char in message:\n        if not char.isalpha():\n            if char.lower() in vowel_map:\n                encoded_message += vowel_map[char.lower()]\n            else:\n                encoded_message += char.upper()\n        else:\n            encoded_message += char\n    return encoded_message\n", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "completion": "def largest_prime_sum(lst):\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    if max_prime == 0:\n        return 0\n    else:\n        return sum(int(digit) for digit in str(max_prime))\n\n# Test cases\nprint(largest_prime_sum([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))  # Output: 10\nprint(largest_prime_sum([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))  # Output: 25\nprint(largest_prime_sum([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))  # Output: 13\nprint(largest_prime_sum([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))  # Output: 11\nprint(largest_prime_sum([0,81,12,3,1,21]))  # Output: 3\nprint(largest_prime_sum([0,8,1,2,1,7]))  # Output: 7\n", "result": "failed: name 'is_prime' is not defined", "passed": false}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dictionary):\n    if not dictionary:  # Check if the dictionary is empty\n        return False\n    \n    lower_case_keys = all(key.islower() for key in dictionary if isinstance(key, str))  # Check if all keys are in lower case\n    upper_case_keys = all(key.isupper() for key in dictionary if isinstance(key, str))  # Check if all keys are in upper case\n    \n    return lower_case_keys or upper_case_keys\n", "result": "failed: Third test error: True", "passed": false}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    if n <= 1:\n        return []\n    sieve = [True] * n\n    sieve[0], sieve[1] = False, False\n    for i in range(2, int(n**0.5)+1):\n        if sieve[i]:\n            for j in range(i*i, n, i):\n                sieve[j] = False\n    primes = [i for i in range(n) if sieve[i]]\n    return primes\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    a_last_digit = abs(a) % 10\n    b_last_digit = abs(b) % 10\n    return a_last_digit * b_last_digit\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    num = float(value)\n    lower_int = int(num)\n    upper_int = lower_int + 1\n    \n    if num - lower_int < upper_int - num:\n        return int(lower_int)\n    else:\n        return int(upper_int)", "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    stones = [n + (2 * i if n % 2 == 0 else 2 * i + 1) for i in range(n)]\n    return stones", "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/101", "completion": "import re\n\ndef words_string(s):\n    words = re.split(r'[,\\s]+', s)\n    return words", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    max_even = -1\n    for num in range(y, x+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    return sorted([num for num in x if not has_even_digit(num)])\n\ndef has_even_digit(num):\n    return any(int(digit) % 2 == 0 for digit in str(num))", "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    number_names = {\n        1: 'One',\n        2: 'Two',\n        3: 'Three',\n        4: 'Four',\n        5: 'Five',\n        6: 'Six',\n        7: 'Seven',\n        8: 'Eight',\n        9: 'Nine'\n    }\n    result = [number_names[x] for x in reversed_arr]\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "result": "failed: name 'is_palindrome' is not defined", "passed": false}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True  # If the array is empty, it's already sorted\n\n    min_index = arr.index(min(arr))  # Find the index of the minimum element\n    n = len(arr)\n\n    # Check if the array is already sorted\n    if all(arr[i] <= arr[(i+1) % n] for i in range(n)):\n        return True\n\n    # Calculate the number of right shifts needed to bring the minimum element to the 0th index\n    shifts_needed = n - min_index\n\n    # Check if it's possible to obtain the sorted array by performing the right shift operation\n    return all(arr[(i + shifts_needed) % n] <= arr[(i + shifts_needed + 1) % n] for i in range(n))\n", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    if (sum(lst1) + sum(lst2)) % 2 != 0:\n        return \"NO\"\n    \n    diff = 0\n    for num1, num2 in zip(lst1, lst2):\n        diff += (num1 % 2) - (num2 % 2)\n    \n    if diff <= 0:\n        return \"YES\"\n    else:\n        return \"NO\"", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "completion": "from collections import Counter\n\ndef histogram(test):\n    letters = test.split()\n    letter_count = Counter(letters)\n    max_count = max(letter_count.values())\n    result = {letter: count for letter, count in letter_count.items() if count == max_count}\n    return result", "result": "failed: max() arg is an empty sequence", "passed": false}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result_string = ''.join([char for char in s if char not in c])\n    is_palindrome = result_string == result_string[::-1]\n    return (result_string, is_palindrome)", "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for string in lst:\n        count = sum(1 for digit in string if int(digit) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {string} of the {count}nput.\" if count > 1 else f\"the number of odd elements {count}n the str{count}ng {string} of the {count}nput.\")\n    return result\n", "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_ending_here = min_so_far = nums[0]\n    for num in nums[1:]:\n        min_ending_here = min(num, min_ending_here + num)\n        min_so_far = min(min_so_far, min_ending_here)\n    return min_so_far", "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n    total_lowering = 0\n    for row in grid:\n        for well in row:\n            if well > 0:\n                total_lowering += math.ceil(well / capacity)\n    return total_lowering\n", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    result = []\n    if not s:\n        return result\n    words = s.split()\n    for word in words:\n        consonant_count = sum(1 for letter in word if letter.lower() not in 'aeiou')\n        if consonant_count == n:\n            result.append(word)\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = set('aeiouAEIOU')\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    found_consonant = False\n    for char in word[-2::-1]:  # Start from the second last character\n        if char in vowels and found_consonant:\n            return char\n        elif char in consonants:\n            found_consonant = True\n    return \"\"", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(': \n                stack.append(char)\n            else:\n                if not stack:\n                    return 'No'\n                stack.pop()\n    if stack:\n        return 'No'\n    return 'Yes'", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    import heapq\n    return sorted(heapq.nlargest(k, arr))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    total = 0\n    for i in range(k):\n        if 0 < arr[i] < 100:\n            total += arr[i]\n    return total\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    odd_numbers = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2 != 0:\n            odd_numbers.append(n)\n    return sorted(odd_numbers)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if date:\n        try:\n            month, day, year = map(int, date.split('-'))\n            if month < 1 or month > 12:\n                return False\n            if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n                return False\n            if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n                return False\n            if month == 2:\n                if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n                    if day < 1 or day > 29:\n                        return False\n                else:\n                    if day < 1 or day > 28:\n                        return False\n            return True\n        except (ValueError, TypeError):\n            return False\n    else:\n        return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        odd_lower_case_count = sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n        if odd_lower_case_count > 0:\n            return odd_lower_case_count\n        else:\n            return None  # or any other appropriate value to indicate no odd lower-case letters\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    count = {}\n    for num in lst:\n        if num in count:\n            count[num] += 1\n            if count[num] > 1:\n                return False\n        else:\n            count[num] = 1\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_start > intersection_end:\n        return 'NO'\n    \n    intersection_length = intersection_end - intersection_start + 1\n    if intersection_length < 2:\n        return 'NO'\n    \n    for i in range(2, int(intersection_length**0.5) + 1):\n        if intersection_length % i == 0:\n            return 'NO'\n    \n    return 'YES'", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    product_of_signs = 1\n    sum_of_magnitudes = sum(abs(num) for num in arr)\n    for num in arr:\n        if num < 0:\n            product_of_signs *= -1\n        elif num == 0:\n            product_of_signs = 0\n    return sum_of_magnitudes * product_of_signs\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "completion": "import heapq\n\ndef minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    visited = set()\n    heap = [(grid[0][0], 0, 0, [(0, 0)])]\n\n    while heap:\n        val, x, y, path = heapq.heappop(heap)\n        if len(path) == k:\n            return [grid[i][j] for i, j in path]\n\n        if (x, y) in visited:\n            continue\n\n        visited.add((x, y))\n\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited:\n                new_path = path + [(nx, ny)]\n                heapq.heappush(heap, (grid[nx][ny], nx, ny, new_path))\n\n    return None  # If k is not reachable\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [3]\n    else:\n        sequence = [0] * (n + 1)\n        sequence[1] = 3\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                sequence[i] = 1 + i // 2\n            else:\n                sequence[i] = sequence[i-1] + sequence[i-2] + sequence[i-3]\n        return sequence", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    has_odd_digit = False\n    if n == 0:\n        return 0\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd_digit = True\n        n //= 10\n    return product if has_odd_digit else 0\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    total = 0\n    for num in lst:\n        total += math.ceil(num) ** 2\n    return total", "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    else:\n        last_char = txt[-1]\n        if last_char.isalpha() and (txt.rstrip()[-1] == last_char):\n            return True\n        else:\n            return False\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i\n    return largest_index\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    max_neg = None\n    min_pos = None\n    \n    for num in lst:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n        elif num > 0 and (min_pos is None or num < min_pos):\n            min_pos = num\n    \n    return (max_neg, min_pos)", "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if type(a) != type(b):\n        return max(a, b)\n    elif isinstance(a, (int, float)):\n        return max(a, b) if a != b else None\n    else:\n        a = a.replace(',', '.') if isinstance(a, str) else a\n        b = b.replace(',', '.') if isinstance(b, str) else b\n        return max(float(a), float(b)) if float(a) != float(b) else None\n", "result": "failed: '>' not supported between instances of 'str' and 'int'", "passed": false}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n % 2 != 0:\n        return False\n    if n <= 8:\n        return False\n    return True\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        result *= factorial\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "completion": "import re\n\ndef fix_spaces(text):\n    # Replace all spaces with underscores\n    text = re.sub(r' ', '_', text)\n    # Replace more than 2 consecutive spaces with a single hyphen\n    text = re.sub(r' {3,}', '-', text)\n    return text", "result": "failed: This prints if this assert fails 4 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'Yes'\n    name, extension = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(c.isdigit() for c in name.split('.')[0]) > 3:\n        return 'No'\n    return 'No'", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "completion": "Neither side has provided the correct implementation for the function.", "result": "failed: invalid syntax (<string>, line 15)", "passed": false}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "completion": "from fractions import Fraction\n\ndef simplify(x, n):\n    x_frac = Fraction(x)\n    n_frac = Fraction(n)\n    \n    result = x_frac * n_frac\n    \n    return result.numerator % result.denominator == 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "result": "failed: invalid literal for int() with base 10: '-'", "passed": false}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and isOdd(num):\n            count += 1\n    return count\n\ndef isOdd(num):\n    return int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a = i * i - i + 1\n        if a % 3 == 0:\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = {\n        \"Mercury\": 1,\n        \"Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\": 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n    }\n\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    start = min(planets[planet1], planets[planet2])\n    end = max(planets[planet1], planets[planet2])\n\n    result = [planet for planet, position in planets.items() if start < position < end]\n    result.sort(key=lambda x: planets[x])\n\n    return tuple(result)", "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    filtered_list = [word for word in lst if len(word) % 2 == 0]\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n    return sorted_list\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            result += num ** 2\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strengths = {}  # Dictionary to store the strengths of each extension\n    for ext in extensions:\n        cap_count = sum(1 for c in ext if c.isupper())  # Count of uppercase letters\n        sm_count = sum(1 for c in ext if c.islower())  # Count of lowercase letters\n        strength = cap_count - sm_count  # Calculate the strength\n        strengths[ext] = strength  # Store the strength in the dictionary\n\n    # Find the extensions with the maximum strength\n    max_strength = max(strengths.values())\n    max_strength_exts = [ext for ext, strength in strengths.items() if strength == max_strength]\n\n    # Return the first extension in the list of extensions with maximum strength\n    return f\"{class_name}.{max_strength_exts[0]}\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    def rotations(word):\n        rotations_list = []\n        for i in range(len(word)):\n            rotated_word = word[i:] + word[:i]\n            rotations_list.append(rotated_word)\n        return rotations_list\n\n    rotated_b = rotations(b)\n    for rotated_word in rotated_b:\n        if rotated_word in a:\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    num_str = str(abs(num))  # Convert the absolute value of the integer to a string\n    even_count = 0\n    odd_count = 0\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if num == 0:\n        return (1, 0)  # Special case for input integer 0\n    else:\n        return (even_count, odd_count)", "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    if not 1 <= number <= 1000:\n        raise ValueError(\"Input number must be between 1 and 1000\")\n\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    if sides[0] + sides[1] > sides[2]:  # Check if the sides form a valid triangle\n        if sides[0]**2 + sides[1]**2 == sides[2]**2:\n            return True\n        else:\n            return False\n    else:\n        return False  # If the sides do not form a valid triangle, return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_unique_count = 0\n    max_unique_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_count:\n            max_unique_count = unique_chars\n            max_unique_word = word\n        elif unique_chars == max_unique_count:\n            max_unique_word = min(max_unique_word, word)\n    return max_unique_word\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten = number + remaining\n    if total_eaten >= need:\n        return [number + need, remaining - (need - number)]\n    else:\n        return [total_eaten, 0]", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        result = result[::-1]\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text:\n        return hashlib.md5(text.encode()).hexdigest()\n    else:\n        return None\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    start = min(a, b)\n    end = max(a, b)\n    return [num for num in range(start, end + 1) if num % 2 == 0]", "result": "failed: Test 1", "passed": false}
