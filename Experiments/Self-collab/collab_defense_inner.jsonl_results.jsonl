{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')  # Step 1: Remove any spaces from the input string\n    result = []\n    count = 0\n    start = 0\n    for i, char in enumerate(paren_string):\n        if char == '(': \n            count += 1\n        elif char == ')':\n            count -= 1\n            if count == 0:  # Step 2: Identify and separate the groups of nested parentheses\n                result.append(paren_string[start:i + 1])\n                start = i + 1\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    ''' Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    '''\n    return number - int(number)", "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(num - mean) for num in numbers]\n    return sum(absolute_differences) / len(absolute_differences)", "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:  # Check if the input list is not empty\n        return []\n\n    result = [numbers[0]]  # Create a new list to store the interspersed elements\n    for num in numbers[1:]:\n        result.append(delimeter)  # Iterate through the input list and append the delimeter between consecutive elements\n        result.append(num)\n\n    return result  # Return the new list", "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    max_nesting_levels = []\n    for group in paren_string.split():\n        max_nesting = 0\n        current_nesting = 0\n        for char in group:\n            if char == '(': \n                current_nesting += 1\n                max_nesting = max(max_nesting, current_nesting)\n            elif char == ')':\n                current_nesting -= 1\n        max_nesting_levels.append(max_nesting)\n    return max_nesting_levels", "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    return [s for s in strings if substring in s]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    else:\n        sum_of_numbers = 0\n        product_of_numbers = 1\n        for num in numbers:\n            sum_of_numbers += num\n            product_of_numbers *= num\n        return (sum_of_numbers, product_of_numbers)", "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    for i in range(len(numbers)):\n        max_element = max(numbers[max(0, i-1):i+1])\n        rolling_max_list.append(max_element)\n    return rolling_max_list[1:]\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + string[::-1]\n    \"\"\"", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    if len(a) != len(b):\n        raise ValueError('Input strings should have the same length')\n    result = ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    longest_strings = [s for s in strings if len(s) == max_length]\n    return longest_strings[0]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "completion": "from typing import Dict\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return sorted(prefixes, key=len)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    # Step 1: Convert the input string to lowercase\n    string = string.lower()\n    \n    # Step 2: Create an empty set to store distinct characters\n    distinct_chars = set()\n    \n    # Step 3: Iterate through the string and add each character to the set\n    for char in string:\n        distinct_chars.add(char)\n    \n    # Step 4: Return the size of the set as the count of distinct characters\n    return len(distinct_chars)", "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    parsed_notes = music_string.split()\n    result = [beats.get(note, 0) for note in parsed_notes]\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 2):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    numerals = numbers.split()\n    numeral_to_number = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    numbers_list = [numeral_to_number[numeral] for numeral in numerals]\n    sorted_numbers = sorted(numbers_list)\n    sorted_numerals = [key for value, key in sorted(zip(sorted_numbers, numerals))]\n    return ' '.join(sorted_numerals)\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two elements\")\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    range_nums = max_num - min_num\n    rescaled_nums = [(num - min_num) / range_nums for num in numbers]\n    return rescaled_nums", "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [x for x in values if isinstance(x, int)]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string \"\"\"\n    if string == '':\n        return 0\n    return len(string)", "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    factors = [i for i in range(1, n) if n % i == 0]\n    factors.sort(reverse=True)\n    for factor in factors:\n        if factor < n:\n            return factor", "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    frequency = {}\n    result = []\n    for num in numbers:\n        if num not in frequency:\n            frequency[num] = 1\n        else:\n            frequency[num] += 1\n    for num in numbers:\n        if frequency[num] == 1:\n            result.append(num)\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string \"\"\"\n    return ''.join(strings)", "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "completion": "from typing import Tuple\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = [s for s in strings if s.startswith(prefix)]\n    return filtered_strings\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "completion": "", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/31", "completion": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n", "result": "failed: must be real number, not NoneType", "passed": false}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    divisible_by_three_indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = [l[i] for i in divisible_by_three_indices]\n    sorted_values.sort()\n    result = l.copy()\n    for i in divisible_by_three_indices:\n        result[i] = sorted_values.pop(0)\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(list(set(l)))", "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    max_element = l[0]\n    for element in l:\n        if element > max_element:\n            max_element = element\n    return max_element\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 and '7' in str(i):\n            count -= 1\n        if i % 13 == 0 and '7' in str(i):\n            count += 1\n    return count", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    sorted_even_indices = sorted(even_indices)\n    result = [l[i] if i % 2 != 0 else sorted_even_indices[i//2] for i in range(len(l))]\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # reverse the cycling process done in the encode_cyclic function\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def generate_fibonacci_numbers(count):\n        fib_list = [1, 1]\n        while len(fib_list) < count:\n            fib_list.append(fib_list[-1] + fib_list[-2])\n        return fib_list\n\n    def prime_fib(n: int):\n        count = 0\n        while True:\n            fib_list = generate_fibonacci_numbers(count)\n            for num in fib_list[:-1]:\n                if is_prime(num):\n                    n -= 1\n                    if n == 0:\n                        return num\n            count += 1", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    from itertools import combinations\n\n    # Step 1: Generate all possible combinations of three distinct elements\n    comb = list(combinations(l, 3))\n\n    # Step 2: Calculate the sum of each combination\n    sums = [sum(x) for x in comb]\n\n    # Step 3: Check if any combination's sum equals zero and return True, otherwise return False\n    return any(x == 0 for x in sums)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n):\n    left_to_right_cars = [i for i in range(n)]\n    right_to_left_cars = [i for i in range(n, 2*n)]\n    speed = 1\n    time_to_collide = [(right_to_left_cars[i] - left_to_right_cars[i]) / speed for i in range(n)]\n    collisions = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if time_to_collide[i] >= time_to_collide[j]:\n                collisions += 1\n    return collisions", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x + 1 for x in l]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    if base < 2 or base > 9:\n        raise ValueError(\"Base should be between 2 and 9\")\n\n    if x < 0:\n        raise ValueError(\"Input number should be non-negative\")\n\n    if x == 0:\n        return '0'\n\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\"\"\"\n    return 0.5 * a * h", "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d", "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    sorted_list = sorted(l)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        return (sorted_list[length // 2 - 1] + sorted_list[length // 2]) / 2\n    else:\n        return sorted_list[length // 2]", "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    # Check if the given string is empty\n    if text == '':\n        return True\n    # If the string is not empty, check if it is the same forwards and backwards\n    else:\n        return text == text[::-1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s.lower()])\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    return x + y", "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    def get_unique_chars(s: str):\n        return set(s)\n\n    def count_char_occurrences(s: str):\n        char_count = {}\n        for char in s:\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n        return char_count\n\n    unique_chars_s0 = get_unique_chars(s0)\n    unique_chars_s1 = get_unique_chars(s1)\n\n    char_count_s0 = count_char_occurrences(s0)\n    char_count_s1 = count_char_occurrences(s1)\n\n    return char_count_s0 == char_count_s1", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 0:\n        return 'Input should be a positive integer'\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b", "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    opening_brackets = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            opening_brackets += 1\n        elif bracket == \">\":\n            if opening_brackets == 0:\n                return False\n            opening_brackets -= 1\n    return opening_brackets == 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    return increasing or decreasing\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    l1.sort()\n    l2.sort()\n    unique_l1 = list(set(l1))\n    unique_l2 = list(set(l2))\n    common_elements = [x for x in unique_l1 if x in unique_l2]\n    return common_elements", "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n\n    prime_factors = [factor for factor in factors if is_prime(factor)]\n    return max(prime_factors)", "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    total_sum = 0\n    for i in range(1, n+1):\n        total_sum += i\n    return total_sum\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    opening_brackets = 0\n    closing_brackets = 0\n    stack = []\n    \n    for bracket in brackets:\n        if bracket == '(': \n            opening_brackets += 1\n            stack.append(bracket)\n        elif bracket == ')':\n            closing_brackets += 1\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    result = [xs[i] * i for i in range(len(xs))]\n    return result", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n > 2:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c", "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    count = 0\n    vowels = set('aeiou')\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        elif i == len(s) - 1 and s[i] == 'y':\n            count += 1\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "result": "passed", "passed": true}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    sum_ascii = 0\n    for char in s:\n        if char.isupper():\n            sum_ascii += ord(char)\n    return sum_ascii", "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    # Step 1: Parse the input string to extract the number of apples and oranges\n    fruits = s.split(' ')\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n\n    # Step 2: Parse the input integer to get the total number of fruits\n    total_fruits = n\n\n    # Step 3: Subtract the number of apples and oranges from the total number of fruits to get the number of mango fruits\n    mango_fruits = total_fruits - apples - oranges\n    return mango_fruits", "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    even_values = [num for num in arr if num % 2 == 0]\n    if even_values:\n        smallest_even_value = min(even_values)\n        smallest_even_index = arr.index(smallest_even_value)\n        return [smallest_even_value, smallest_even_index]\n    return []", "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    frequency_dict = {}\n    for num in lst:\n        if num in frequency_dict:\n            frequency_dict[num] += 1\n        else:\n            frequency_dict[num] = 1\n    \n    result = -1\n    for key, value in frequency_dict.items():\n        if key == value or value > result:\n            result = key\n    \n    return result", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(min(lst))\n            lst.remove(min(lst))\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "completion": "def is_palindrome(lst):\n    return lst == lst[::-1]\n\ndef will_it_fly(q, w):\n    if is_palindrome(q) and sum(q) <= w:\n        return True\n    else:\n        return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    def count_changes(arr1, arr2):\n        changes = 0\n        for i in range(len(arr1)):\n            if arr1[i] != arr2[i]:\n                changes += 1\n        return changes\n\n    def is_palindromic(arr):\n        return arr == arr[::-1]\n\n    n = len(arr)\n    mid = n // 2\n    first_half = arr[:mid]\n    second_half = arr[:mid] if n % 2 == 0 else arr[mid + 1:]\n    second_half.sort()\n    changes_needed = count_changes(first_half, second_half)\n    return changes_needed", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    return lst1", "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef find_primes_less_than_100():\n    primes = []\n    for num in range(2, 100):\n        if is_prime(num):\n            primes.append(num)\n    return primes\n\ndef find_combinations_of_3_primes(multiplication):\n    primes = find_primes_less_than_100()\n    combinations = []\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == multiplication:\n                    combinations.append((primes[i], primes[j], primes[k]))\n    return combinations\n\ndef is_multiply_prime(a):\n    combinations = find_combinations_of_3_primes(a)\n    if combinations:\n        return True\n    else:\n        return False\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    if n == 1:\n        return False\n    if x == 0:\n        return False\n    if n == 0:\n        return False\n    if x % n != 0:\n        return False\n    while x % n == 0:\n        x = x / n\n    if x == 1:\n        return True\n    else:\n        return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if not isinstance(a, int):\n        return False\n    cube_root = a ** (1/3)\n    return round(cube_root) ** 3 == a\n", "result": "failed: type complex doesn't define __round__ method", "passed": false}
{"task_id": "HumanEval/78", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            if is_prime(int(digit, 16)):\n                count += 1\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary_string = bin(decimal)[2:]\n    return f'db{binary_string}db'", "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    length = len(string)\n    return is_prime(length)", "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    start_with_1 = 9 * 10 ** (n - 1)  # Count of n-digit positive integers that start with 1\n    end_with_1 = 10 ** (n - 1)  # Count of n-digit positive integers that end with 1\n    total_count = start_with_1 + end_with_1 - 10 ** (n - 1)  # Total count of numbers that start or end with 1\n    return total_count\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary_representation = bin(N)[2:]\n    sum_of_digits = sum(int(digit) for digit in binary_representation)\n    return bin(sum_of_digits)[2:]", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    even_at_odd_indices = [num for i, num in enumerate(lst) if i % 2 != 0 and num % 2 == 0]\n    return sum(even_at_odd_indices)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coordinates = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            for j in range(len(lst[i])):\n                if lst[i][j] == x:\n                    coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if len(array) == 0:\n        return array\n\n    first_index_value = array[0]\n    last_index_value = array[-1]\n    sum_first_last = first_index_value + last_index_value\n\n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    shifted_alphabet = alphabet[2:] + alphabet[:2]\n    encrypted_string = ''\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                index = ord(char) - ord('a')\n                encrypted_string += shifted_alphabet[index]\n            else:\n                index = ord(char.lower()) - ord('a')\n                encrypted_string += shifted_alphabet[index].upper()\n        else:\n            encrypted_string += char\n    return encrypted_string\n", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(lst)\n    return sorted_lst[1]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence.strip()]\n    sentences = [sntnce for sntnce in sentences if sntnce.startswith('I')]\n    return len(sentences)", "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if all(isinstance(num, int) for num in [x, y, z]):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    def swap_case(message):\n        return message.lower()\n\n    def replace_vowels(message):\n        vowels = 'aeiouAEIOU'\n        result = ''\n        for char in message:\n            if char in vowels:\n                if char.isupper():\n                    result += chr((ord(char) - 65 + 2) % 26 + 65)\n                else:\n                    result += chr((ord(char) - 97 + 2) % 26 + 97)\n            else:\n                result += char\n        return result\n\n    return replace_vowels(swap_case(message))", "result": "failed: This prints if this assert fails 2 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef sum_of_digits(num):\n    return sum(int(digit) for digit in str(num))\n\n\ndef skjkasdkd(lst):\n    prime_numbers = [num for num in lst if is_prime(num)]\n    if not prime_numbers:\n        return 0\n    largest_prime = max(prime_numbers)\n    return sum_of_digits(largest_prime)", "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n    lowercase_keys = all(key.islower() for key in dict.keys())\n    uppercase_keys = all(key.isupper() for key in dict.keys())\n    return lowercase_keys or uppercase_keys", "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [x for x in range(2, n) if is_prime(x)]\n    return primes[:n]", "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    a = abs(a)  # handle negative numbers\n    b = abs(b)  # handle negative numbers\n    return (a % 10) * (b % 10)  # extract the unit digits of the two input integers and multiply them\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    for i in range(0, len(s), 2):\n        if s[i].upper() in vowels:\n            count += 1\n    return count", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    num = float(value)\n    if num < 0:\n        return int(num - 0.5)\n    else:\n        return int(num + 0.5)", "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            stones.append(n + 2 * i)\n        else:\n            stones.append(n + 2 * i + 1)\n    return stones", "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    words = s.replace(',', '').split()\n    return words", "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    even_numbers = [num for num in range(x, y+1) if num % 2 == 0]\n    if even_numbers:\n        return max(even_numbers)\n    else:\n        return -1\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        total = sum(range(n, m+1))\n        average = total / (m - n + 1)\n        rounded_average = round(average)\n        return bin(rounded_average)", "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)", "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    # Sort the array of integers between 1 and 9 inclusive\n    sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr))\n    \n    # Reverse the unsorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Map each digit to its corresponding name\n    digit_map = {\n        1: 'One',\n        2: 'Two',\n        3: 'Three',\n        4: 'Four',\n        5: 'Five',\n        6: 'Six',\n        7: 'Seven',\n        8: 'Eight',\n        9: 'Nine'\n    }\n    result = [digit_map[num] for num in reversed_arr]\n    \n    # Handle edge cases for empty array and strange numbers\n    if not result:\n        return []\n    else:\n        return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    def factorial(num):\n        if num == 0 or num == 1:\n            return 1\n        else:\n            return num * factorial(num - 1)\n\n    def sum_of_numbers(num):\n        return sum(range(1, num + 1))\n\n    def is_even(num):\n        return num % 2 == 0\n\n    result = []\n    for i in range(1, n + 1):\n        if is_even(i):\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "completion": "def generate_integers(n):\n    return [str(i) for i in range(1, n+1)]\n\ndef is_palindrome(num):\n    return num == num[::-1]\n\ndef count_even_odd_palindromes(integers):\n    even_count = 0\n    odd_count = 0\n    for num in integers:\n        if is_palindrome(num):\n            if int(num) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\ndef even_odd_palindrome(n):\n    integers = generate_integers(n)\n    return count_even_odd_palindromes(integers)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    def sum_of_digits(num):\n        if num == 0:\n            return 0\n        num = -num\n        total = 0\n        while num > 0:\n            total += num % 10\n            num = num // 10\n        return total + 1\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if arr:\n        return True\n    n = len(arr)\n    for i in range(n):\n        arr = [arr[-1]] + arr[:-1]\n        if arr == sorted(arr):\n            return True\n    return False", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    if all(x % 2 == 0 for x in lst1):\n        return 'YES'\n    \n    odd_elements = [x for x in lst1 if x % 2 != 0]\n    even_elements = [x for x in lst2 if x % 2 == 0]\n    \n    if len(odd_elements) <= len(even_elements):\n        return 'YES'\n    else:\n        return 'NO'", "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    letters = test.split()\n    letter_count = {}\n    max_count = 0\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n        max_count = max(max_count, letter_count[letter])\n    result = {letter: count for letter, count in letter_count.items() if count == max_count}\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    def delete_chars(s, c):\n        return ''.join([char for char in s if char not in c])\n\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    result_string = delete_chars(s, c)\n    is_palindrome_check = is_palindrome(result_string)\n\n    return (result_string, is_palindrome_check)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for string in lst:\n        odd_count = sum(1 for digit in string if int(digit) % 2 != 0)\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(odd_count, odd_count, odd_count, odd_count))\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            sub_array_sum = sum(nums[i:j])\n            min_sum = min(min_sum, sub_array_sum)\n    return min_sum", "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    total_water = 0\n    for row in grid:\n        total_water += sum(row)\n    import math\n    return math.ceil(total_water / capacity)\n", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    if not s:\n        return []\n    \n    def count_consonants(word):\n        consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n        return sum(1 for letter in word if letter in consonants)\n    \n    words = s.split()\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    return filtered_words", "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = set(\"aeiouAEIOU\")\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    \n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in consonants and word[i-1] in vowels:\n            return word[i-1]\n    \n    return \"\"\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    def is_balanced(s):\n        stack = []\n        for char in s:\n            if char == '(': \n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n\n    for i in range(len(lst[0]) + 1):\n        for j in range(len(lst[1]) + 1):\n            new_str = lst[0][:i] + lst[1][:j] + lst[0][i:] + lst[1][j:]\n            if is_balanced(new_str):\n                return 'Yes'\n    return 'No'", "result": "passed", "passed": true}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    even_positions = [lst[i] for i in range(len(lst)) if i % 2 == 0]\n    odd_elements_at_even_positions = [num for num in even_positions if num % 2 != 0]\n    return sum(odd_elements_at_even_positions)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    filtered_arr = [x for x in arr[:k] if x < 100]\n    return sum(filtered_arr)", "result": "passed", "passed": true}
{"task_id": "HumanEval/123", "completion": "def collatz_sequence(n):\n    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n    return sequence\n\ndef get_odd_collatz(n):\n    sequence = collatz_sequence(n)\n    odd_numbers = [num for num in sequence if num % 2 != 0]\n    return sorted(odd_numbers) if odd_numbers else [1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "completion": "import datetime\n\ndef valid_date(date):\n    if not date:\n        return False\n    if '-' not in date:\n        return False\n    month, day, year = date.split('-')\n    if not (1 <= int(month) <= 12):\n        return False\n    if int(month) in [1, 3, 5, 7, 8, 10, 12]:\n        if not (1 <= int(day) <= 31):\n            return False\n    elif int(month) in [4, 6, 9, 11]:\n        if not (1 <= int(day) <= 30):\n            return False\n    elif int(month) == 2:\n        if not (1 <= int(day) <= 28):\n            return False\n    if len(year) != 4:\n        return False\n    try:\n        datetime.datetime.strptime(date, '%m-%d-%Y')\n    except ValueError:\n        return False\n    return True", "result": "failed: not enough values to unpack (expected 3, got 2)", "passed": false}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n        return count", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    seen = set()\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True", "result": "failed: This prints if this assert fails 5 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return 'NO'\n    length = end - start + 1\n    if is_prime(length):\n        return 'YES'\n    else:\n        return 'NO'", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        if num > 0:\n            product_of_signs *= 1\n            sum_of_magnitudes += num\n        elif num < 0:\n            product_of_signs *= -1\n            sum_of_magnitudes += abs(num)\n    return product_of_signs * sum_of_magnitudes", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    min_path = None\n    max_path = None\n    def dfs(x, y, path):\n        if len(path) == k:\n            return path\n        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and (nx, ny) not in path:\n                res = dfs(nx, ny, path + [(nx, ny)])\n                if res:\n                    return res\n        return None\n\n    def compare_paths(path1, path2):\n        for i in range(k):\n            if path1[i] < path2[i]:\n                return path1\n            elif path1[i] > path2[i]:\n                return path2\n        return path1\n\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            path = dfs(i, j, [(i, j)])\n            if path:\n                if not max_path:\n                    max_path = path\n                else:\n                    max_path = compare_paths(max_path, path)\n    return [grid[x][y] for x, y in max_path]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [0, 1, 1]\n    else:\n        tribonacci = [0, 1, 1]\n        for i in range(3, n + 1):\n            next_tribonacci = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]\n            tribonacci.append(next_tribonacci)\n        return tribonacci", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product if product != 1 else 0", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == ']':\n            stack.append(char)\n        elif char == '[' and stack:\n            stack.pop()\n    return len(stack) < 2", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    rounded_list = [math.ceil(num) for num in lst]\n    squared_list = [num ** 2 for num in rounded_list]\n    return sum(squared_list)", "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n        return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            largest_index = i\n    return largest_index\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    neg_integers = [i for i in lst if i < 0]\n    pos_integers = [i for i in lst if i > 0]\n\n    if not neg_integers:\n        largest_neg = None\n    else:\n        largest_neg = max(neg_integers)\n    if not pos_integers:\n        smallest_pos = None\n    else:\n        smallest_pos = min(pos_integers)\n\n    return (largest_neg, smallest_pos)", "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if type(a) != type(b):\n        try:\n            a = float(a.replace(',', '.'))\n            b = float(b.replace(',', '.'))\n        except AttributeError:\n            pass\n        except ValueError:\n            pass\n    if a != b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n % 2 != 0 or n < 8:\n        return False\n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n    return result\n\n\ndef factorial(num):\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return num * factorial(num - 1)", "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    text = text.replace(\" \", \"_\")\n    while \"  \" in text:\n        text = text.replace(\"  \", \"-\")\n    return text\n", "result": "failed: This prints if this assert fails 4 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    def check_digits(file_name):\n        return sum(c.isdigit() for c in file_name) <= 3\n\n    def check_dot(file_name):\n        return file_name.count('.') == 1\n\n    def check_prefix(file_name):\n        prefix = file_name.split('.')[0]\n        return prefix and prefix[0].isalpha()\n\n    def check_suffix(file_name):\n        suffix = file_name.split('.')[1]\n        return suffix in ['txt', 'exe', 'dll']\n\n    if check_digits(file_name) and check_dot(file_name) and check_prefix(file_name) and check_suffix(file_name):\n        return 'Yes'\n    else:\n        return 'No'", "result": "passed", "passed": true}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        if i % 4 == 0 and i % 3 != 0:\n            result += lst[i] ** 3\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/143", "completion": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    def get_words_of_prime_length(words):\n        prime_length_words = [word for word in words if is_prime(len(word))]\n        return ' '.join(prime_length_words)\n\n    words = sentence.split(' ')\n    return get_words_of_prime_length(words)", "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "completion": "from fractions import Fraction\n\ndef simplify(x, n):\n    x_fraction = Fraction(x)\n    n_fraction = Fraction(n)\n    product = x_fraction * n_fraction\n    return product == int(product)", "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) * 2 for digit in str(abs(num)))\n\n    def custom_sort(num):\n        return (sum_of_digits(num), nums.index(num))\n\n    return sorted(nums, key=custom_sort)\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    def is_odd(num):\n        return int(str(abs(num))[0]) % 2 != 0 and int(str(abs(num))[-1]) % 2 != 0\n\n    count = 0\n    for num in nums:\n        if num > 10 and is_odd(num):\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets_order = {\n        \"Mercury\": 1,\n        \"Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\": 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n    }\n\n    def get_planets_between(planet1, planet2):\n        if planet1 not in planets_order or planet2 not in planets_order:\n            return ()\n        start = min(planets_order[planet1], planets_order[planet2])\n        end = max(planets_order[planet1], planets_order[planet2])\n        return tuple(planet for planet, order in planets_order.items() if start > order > end)\n\n    return get_planets_between(planet1, planet2)\n", "result": "failed: First test error: 0", "passed": false}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    def is_even_length(word):\n        return len(word) % 2 != 0\n\n    def sort_key(word):\n        return (len(word), word)\n\n    return sorted(filter(is_even_length, lst), key=sort_key)\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/150", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y", "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    filtered_list = [x for x in lst if isinstance(x, int) and x >= 0]\n    odd_numbers = [x for x in filtered_list if x % 2 != 0]\n    squares_of_odd_numbers = [x**2 for x in odd_numbers]\n    return sum(squares_of_odd_numbers)", "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    differences = [abs(game[i] - guess[i]) for i in range(len(game))]\n    return differences", "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = sum(1 for char in extension if char.islower())\n        return cap_count - sm_count\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    def is_rotation(s1, s2):\n        return len(s1) == len(s2) and s2 in s1 + s1\n\n    rotations = [b[i:] + b[:i] for i in range(len(b))]\n    for rotation in rotations:\n        if rotation in a:\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count = 0\n    odd_count = 0\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            result += roman_numerals[value]\n            number -= value\n    return result.lower()", "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            max_word = word\n        elif unique_chars == max_unique:\n            max_word = min(max_word, word)\n\n    return max_word\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten_carrots = number + need\n    carrots_left = max(0, remaining - total_eaten_carrots)\n    return [total_eaten_carrots, carrots_left]\n", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    parsed_expression = ''\n    for i in range(len(operator)):\n        parsed_expression += str(operand[i]) + ' ' + operator[i] + ' '\n    parsed_expression += str(operand[-1])\n    return eval(parsed_expression)", "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    letters = [c for c in s if c.isalpha()]\n    if letters:\n        return s[::-1]\n    else:\n        result = ''\n        for char in s:\n            if char.isalpha():\n                if not char.islower():\n                    result -= char.upper()\n                else:\n                    result += char.lower()\n            else:\n                result += char\n        return result", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    even_digits = [int(digit) for digit in str(a) if int(digit) % 2 == 0 or digit == '0'] + [int(digit) for digit in str(b) if int(digit) % 2 == 0 or digit == '0']\n    even_digits.sort()\n    return even_digits", "result": "failed: Test 1", "passed": false}
