{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than \n    given thershold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")\n    separated_groups = []\n    current_group = \"\"\n    open_braces = 0\n    for char in paren_string:\n        if char == '(':\n            open_braces += 1\n            current_group += char\n        elif char == ')':\n            open_braces -= 1\n            current_group += char\n            if open_braces == 0:\n                separated_groups.append(current_group)\n                current_group = \"\"\n    return separated_groups\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n    Return the decimal part of the number\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(x - mean) for x in numbers]\n    return sum(absolute_differences) / len(absolute_differences)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n                if current_depth < 0:\n                    return \"Invalid input: Unmatched closing parenthesis\"\n        if current_depth != 0:\n            return \"Invalid input: Unmatched opening parenthesis\"\n        result.append(max_depth)\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    return [s for s in strings if substring in s]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    product = 1\n    for num in numbers:\n        product *= num\n    \n    return sum(numbers), product\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    for i in range(len(numbers)):\n        max_element = max(numbers[:i+1])\n        rolling_max_list.append(max_element)\n    return rolling_max_list\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    if not all(char in '01' for char in a) or not all(char in '01' for char in b):\n        raise ValueError(\"Input strings must consist only of 1s and 0s\")\n    \n    result = ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    longest_strings = [s for s in strings if len(s) == max_length]\n    return longest_strings[0] if longest_strings else None\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return sorted(prefixes, key=len)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive. \"\"\"\n    return ' '.join(str(i) for i in range(n+1))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of \"\"\"\n    string = string.lower()\n    distinct_characters = set(string)\n    return len(distinct_characters)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    notes = music_string.split()\n    return [beats[note] for note in notes]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count ++ 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numberals = numbers.split()\n    numeral_to_number = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    number_to_numeral = {v: k for k, v in numeral_to_number.items()}\n    \n    sorted_numbers = sorted([numeral_to_number[num] for num in numberals])\n    sorted_numberals = [number_to_numeral[num] for num in sorted_numbers]\n    \n    return ' '.join(sorted_numberals)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two elements\")\n    \n    min_num = min(numbers)\n    max_num = max(numbers)\n    \n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    \n    range_nums = max_num - min_num\n    rescaled_nums = [(num - min_num) / range_nums for num in numbers]\n    return rescaled_nums\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [value for value in values if isinstance(value, int)]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string \"\"\"\n    if string == '':\n        return 0\n    return len(string)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    divisors = [i for i in range(1, n) if n % i == 0]\n    return max(divisors)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    for num in numbers:\n        if numbers.count(num) == 1:\n            result.append(num)\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string \"\"\"\n    if not strings:\n        return ''\n    return ''.join(strings)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = [s for s in strings if s.startswith(prefix)]\n    return filtered_strings\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False \n    return True\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n", "result": "failed: must be real number, not NoneType", "passed": false}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    non_divisible_indices = [i for i in range(len(l)) if i % 3 != 0]\n    divisible_indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_divisible_values = [l[i] for i in divisible_indices]\n    sorted_divisible_values.sort()\n    result = [val if i in non_divisible_indices else sorted_divisible_values[divisible_indices.index(i)] for i, val in enumerate(l)]\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(list(set(l)))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    max_elem = l[0]\n    for elem in l:\n        if elem > max_elem:\n            max_elem = elem\n    return max_elem\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 00\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    sorted_even_indices = sorted(even_indices)\n    result = [sorted_even_indices[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # reverse the cycling of elements in each group\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/39", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        fib_list = [1, 1]\n        while len(fib_list) < n:\n            fib_list.append(fib_list[-1] + fib_list[-2])\n        for num in fib_list:\n            if is_prime(num):\n                n -= 1\n                if n == 0:\n                    return num\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triplessum_to_zero takes a list ofintegers as aninput.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    from itertools import combinations\n\n    # Step1 Generate allpossible combinations of three distinct elements\n    comb = list(combinations(l, 3))\n\n    # Step 2: Calculate the sum of each combination\n    sums = [sum(x) for x in comb]\n\n    # Step 3: Check if any combination's sum equals zero and return True, otherwise return False\n    return any(x == 0 for x in sums)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    return n * (n - 1)  # Number of collisions for n cars\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x + 1 for x in l]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1  3, -2, 1)\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero[1])\n    False\n    \"\"\"\n    # Step 1: Iterate through the list and generate all possible pairs of distinct elements\n    pairs = [(l[i], l[j]) for i in range(len(l)) for j in range(i+1, len(l))]\n    \n    # Step 2: For each pair, check if the sum is zero\n    for pair in pairs:\n        if sum(pair) == 0:\n            return True\n    \n    # Step 3: If any pair sums to zero, return True; otherwise, return False\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    if base < 2 or base > 9:\n        raise ValueError(\"Base should be between 2 and 9\")\n\n    if x < 0:\n        raise ValueError(\"Input number should be non-negative\")\n\n    if x == 0:\n        return '0'\n\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Givn lenght of a side and high retern area for a trianlge.\"\"\"\n    return 0.5 * a * h\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    # Check if the given string is empty\n    if text == '':\n        return True\n    # If not empty, check if the given string is the same forwards and backwards\n    else:\n        return text == text [:-1]\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s str\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) if ch.isalpha() else ch] for ch in s\n\n\ndef decode_shift(s: str):\n    \"\"\"\ntakes as input string encoded with encode_shift function. Returns decoded string\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) if ch.isalpha() else ch for ch in s])\n", "result": "failed: invalid syntax (<string>, line 14)", "passed": false}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    def get_unique_chars(s: str):\n        return set(s)\n\n    def count_char_occurrences(s: str):\n        char_count = {}\n        for char in s:\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n        return char_count\n\n    unique_chars_s0 = get_unique_chars(s0)\n    unique_chars_s1 = get_unique_chars(s1)\n\n    char_count_s0 = count_char_occurrences(s0)\n    char_count_s1 = count_char_occurrences(s1)\n\n    return unique_chars_s0 == unique_chars_s1 and char_count_s0 == char_count_s1\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 0:\n        return \"Input should be a positive integer\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    opening_brackets = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            opening_brackets += 1\n        elif bracket == \">\":\n            if opening_brackets == 0:\n                return False\n            opening_brackets -= 1\n    return opening_brackets == 0\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    return increasing or decreasing\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    unique_l1 = list(set(l1))\n    unique_l2 = list(set(l2))\n    common_elements = list(set(unique_l1) & set(unique_l2))\n    sorted_common_elements = sorted(common_elements)\n    return sorted_common_elements\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef largest_prime_factor(n: int):\n    if n < 2:\n        return \"Input should be greater than 1\"\n    \n    largest_prime = 2\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            if is_prime(i):\n                largest_prime = i\n    return largest_prime\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    total_sum = 0\n    for i in range(1, n+1):\n        total_sum += i\n    return total_sum\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    derivative_result = []\n    for i in range(1, len(xs)):\n        derivative_result.append(xs[i] * i)\n    return derivative_result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    count = 0\n    vowels = set('aeiou')\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        elif i > 0 and s[i] == 'y' and i == len(s) - 1:\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)\n    num_digits = len(x_str)\n    \n    if shift > num_digits:\n        return x_str[-1::-1]\n    else:\n        shift %= num_digits\n        return x_str[-shift:] + x_str[:-shift]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    sum_ascii = 0\n    for char in s:\n        if char.isupper():\n            sum_ascii += ord(char)\n    return sum_ascii\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    # Extract the number of apples and oranges from the input string\n    apples = int(s.split(' ')[0])\n    oranges = int(s.split(' ')[-2])\n\n    # Extract the total number of fruits in the basket from the input integer\n    total_fruits = n\n\n    # Calculate the number of mango fruits by subtracting the number of apples and oranges from the total number of fruits\n    mango_fruits = total_fruits - apples - oranges\n    return mango_fruits\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    even_values = [num for num in arr if num % 2 == 0]\n    if not even_values:\n        return []\n    smallest_even_value = min(even_values)\n    smallest_even_index = arr.index(smallest_even_value)\n    return [smallest_even_value, smallest_even_index]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    frequency_dict = {}\n    for num in lst:\n        if num in frequency_dict:\n            frequency_dict[num] += 1\n        else:\n            frequency_dict[num] = 1\n    \n    result = -1\n    for key, value in frequency_dict.items():\n        if key > 0 and value >= key:\n            result = max(result, key)\n    \n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    result = []\n    while lst:\n        min_val = min(lst)\n        result.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            result.append(max_val)\n            lst.remove(max_val)\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    def count_changes(arr1, arr2):\n        changes = 0\n        for i in range(len(arr1)):\n            if arr1[i] != arr2[i]:\n                changes += 1\n        return changes\n\n    n = len(arr)\n    mid = n // 2\n    first_half = arr[:mid]\n    second_half = arr[-mid:] if n % 2 == 0 else arr[-mid - 1:]\n\n    second_half = second_half[::-1]\n    changes = count_changes(first_half, second_half)\n\n    return changes\n\n# Test cases\nprint(smallest_change([1,2,3,5,4,7,9,6]))  # Output: 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))  # Output: 1\nprint(smallest_change([1, 2, 3, 2, 1]))  # Output: 0\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    if x < n:\n        return False\n    result = x\n    while result % n == 0:\n        result = result / n\n    return result == 1\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if not isinstance(a, int):\n        return False\n    cube_root = a ** (1/3)\n    return cube_root.is_integer()\n", "result": "failed: 'complex' object has no attribute 'is_integer'", "passed": false}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit.upper() in prime_digits:\n            if int(digit, 16) in [2, 3, 5, 7, 11, 13, 17]:\n                count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary_string = bin(decimal)[2:]\n    return f\"db{binary_string}db\"\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    grade_mapping = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-'\n    }\n    \n    letter_grades = []\n    for grade in grades:\n        for key in grade_mapping:\n            if grade >= key:\n                letter_grades.append(grade_mapping[key])\n                break\n    return letter_grades\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    length = len(string)\n    return is_prime(length)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count_start_with_1 = 9 * 10 ** (n - 1)  # Count of n-digit positive integers that start with 1\n    count_end_with_1 = 10 ** (n - 1)  # Count of n-digit positive integers that end with 1\n    total_count = count_start_with_1 + count_end_with_1 - 10 ** (n - 1)  # Total count of numbers that start or end with 1\n    return total_count\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary_representation = bin(N)[2:]\n    sum_of_digits = sum(int(digit) for digit in binary_representation)\n    return bin(sum_of_digits)[2:]\n", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    even_at_odd_indices = [num for i, num in enumerate(lst) if i % 2 != 0 and num % 2 == 0]\n    return sum(even_at_odd_indices)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coordinates = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            for j in range(len(lst[i])):\n                if lst[i][j] == x:\n                    coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if not array:\n        return []\n\n    first_index = array[0]\n    last_index = array[-1]\n    if (first_index + last_index) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            shifted_index = (alphabet.index(char) + 2 * 2) % 26\n            encrypted += alphabet[shifted_index]\n        else:\n            encrypted += char\n    return encrypted\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2)] == 2\n    next_smallest([]) == None\n    next_smallest([1, 1] == None\n    \"\"\"\n    sorted_lst = sorted(lst)\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/91", "completion": "import re\n\ndef is_bored(S):\n    sentences = re.split(r'[.!?]', S)\n    sentences = [sentence.strip() for sentence in sentences if sentence.strip()]\n    sentences = [sentence for sentence in sentences if sentence.startswith('I')]\n    return len(sentences)\n", "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if all(isinstance(num, int) for num in [x, y, z]):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    def swap_case(message):\n        return message.swapcase()\n\n    def replace_vowels(message):\n        vowels = 'aeiouAEIOU'\n        result = ''\n        for char in message:\n            if char in vowels:\n                if char.isupper():\n                    result += chr((ord(char) - 65 + 2) % 26 + 65)\n                else:\n                    result += chr((ord(char) - 97 + 2) % 26 + 97)\n            else:\n                result += char\n        return result\n\n    return replace_vowels(swap_case(message))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/94", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(num):\n    return sum(int(digit) for digit in str(num))\n\ndef skjkasdkd(lst):\n    prime_numbers = [num for num in lst if is_prime(num)]\n    if not prime_numbers:\n        return 0\n    largest_prime = max(prime_numbers)\n    return sum_of_digits(largest_prime)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    if all(isinstance(key, str) for key in dict.keys()):\n        if all(key.islower() for key in dict.keys()) or all(key.isupper() for key in dict.keys()):\n            return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes[:n]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    a_last_digit = abs(a) % 10\n    b_last_digit = abs(b) % 10\n    result = a_last_digit * b_last_digit\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    even_indices = s[::2]\n    count = 0\n    for char in even_indices:\n        if char in 'AEIOU':\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    num = float(value)\n    if num < 0:\n        return int(num - 0.5)\n    else:\n        return int(num + 0.5)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    stones_in_each_level = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            stones_in_each_level.append(n + 2 * i)\n        else:\n            stones_in_each_level.append(n + 2 * i + 1)\n    return stones_in_each_level\n", "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/101", "completion": "import re\n\ndef words_string(s):\n    words = re.findall(r'\\b\\w+\\b', s)\n    return words\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x <= 0 or y <= 0:\n        return -1\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        total_sum = sum(range(n, m+1))\n        average = total_sum // (m - n + 1)\n        rounded_average = round(average)\n        binary_representation = bin(rounded_average)\n        return binary_representation\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    def has_even_digit(num):\n        return any(int(digit) % 2 == 0 for digit in str(num))\n\n    positive_integers = [num for num in x if num > 0]\n    no_even_digit_integers = [num for num in positive_integers if not has_even_digit(num)]\n    return sorted(no_even_digit_integers)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    # Filter out integers that are not between 1 and 9 inclusive\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n\n    # Sort the remaining integers\n    sorted_arr = sorted(filtered_arr)\n\n    # Reverse the sorted array\n    reversed_arr = list(reversed(sorted_arr))\n\n    # Map each digit to its corresponding name\n    digit_map = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    result = [digit_map[x] for x in reversed_arr]\n\n    # Handle edge cases for empty array and strange numbers\n    if not result:\n        return []\n    else:\n        return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\ndef factorial(num):\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return num * factorial(num-1)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "completion": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    def sum_of_digits(num):\n        if num < 0:\n            num = -num\n        sum_digits = 0\n        while num > 0:\n            sum_digits += num % 10\n            num = num // 10\n        return sum_digits\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    else:\n        sorted_arr = sorted(arr)\n        n = len(arr)\n        for i in range(n):\n            if arr == sorted_arr:\n                return True\n            else:\n                arr = [arr[-1]] + arr[:-1]\n        return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    # Step 1: Check if all elements in lst1 are even\n    if all(x % 2 == 0 for x in lst1):\n        return \"YES\"\n    \n    # Step 2: If not, find the odd elements in lst1\n    odd_elements = [x for x in lst1 if x % 2 != 0]\n    \n    # Step 3: Find the even elements in lst2\n    even_elements = [x for x in lst2 if x % 2 == 0]\n    \n    # Step 4: If there are enough even elements in lst2 to replace the odd elements in lst1, return 'YES', otherwise return 'NO'\n    if len(even_elements) >= len(odd_elements):\n        return \"YES\"\n    else:\n        return \"NO\"\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    letters = test.split()\n    letter_count = {}\n    max_count = 0\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n        max_count = max(max_count, letter_count[letter])\n\n    result = {letter: count for letter, count in letter_count.items() if count == max_count}\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    def delete_chars(s, c):\n        return ''.join([char for char in s if char not in c])\n\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    result_string = delete_chars(s, c)\n    is_palindrome_check = is_palindrome(result_string)\n\n    return (result_string, is_palindrome_check)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    def count_odd_digits(s):\n        return sum(1 for digit in s if int(digit) % 2 != 0)\n\n    return [f\"the number of odd elements {count_odd_digits(s)}n the str{s}ng {s} of the {s}nput.\" for s in lst]\n", "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            min_sum = min(min_sum, current_sum)\n    return min_sum\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    total_times_lowered = 0\n    for row in grid:\n        total_water = sum(row)\n        total_times_lowered += -(-total_water // capacity)  # Equivalent to math.ceil(total_water / capacity)\n    return total_times_lowered\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    if not s:\n        return []\n    \n    def count_consonants(word):\n        consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n        return sum(1 for letter in word if letter in consonants)\n    \n    words = s.split()\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    \n    return filtered_words\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = set('aeiouAEIOU')\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    \n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in consonants and word[i-1] in vowels:\n            return word[i-1]\n    \n    return \"\"\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    def is_balanced(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return 'No'\n                stack.pop()\n        return 'Yes' if not stack else 'No'\n\n    s1, s2 = lst[0], lst[1]\n    return is_balanced(s1 + s2) or is_balanced(s2 + s1)\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    even_position_odd_elements = [lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0]\n    return sum(even_position_odd_elements)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    # Identify the first k elements of the array\n    first_k_elements = arr[:k]\n    \n    # Filter out elements with more than two digits\n    filtered_elements = [x for x in first_k_elements if x < 100]\n    \n    # Sum the filtered elements\n    return sum(filtered_elements)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    odd_numbers = [num for num in collatz_seq if num % 2 != 0]\n    return sorted(odd_numbers)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "completion": "import datetime\n\ndef valid_date(date):\n    if not date:\n        return False\n    \n    month, day, year = date.split('-')\n    \n    if not (1 <= int(month) <= 12):\n        return False\n    \n    if not (1 <= int(day) <= 31 and int(month) in [1, 3, 5, 7, 8, 10, 12] or\n            1 <= int(day) <= 30 and int(month) in [4, 6, 9, 11] or\n            1 <= int(day) <= 29 and int(month) == 2):\n        return False\n    \n    if len(year) != 4:\n        return False\n    \n    try:\n        datetime.datetime.strptime(date, '%m-%d-%Y')\n    except ValueError:\n        return False\n    \n    return True\n", "result": "failed: not enough values to unpack (expected 3, got 1)", "passed": false}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n        return count\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(set(lst)) != len(lst):\n        return False\n    return lst == sorted(lst)\n", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    intersection_length = intersection_end - intersection_start + 1\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    \n    for num in arr:\n        if num > 0:\n            product_of_signs *= 1\n            sum_of_magnitudes += num\n        elif num < 0:\n            product_of_signs *= -1\n            sum_of_magnitudes += abs(num)\n    \n    return product_of_signs * sum_of_magnitudes\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    def dfs(x, y, path, visited):\n        if len(path) == k:\n            return path\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                res = dfs(nx, ny, path + [grid[nx][ny]], visited)\n                if res:\n                    return res\n                visited.remove((nx, ny))\n        return None\n\n    min_path = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited = {(i, j)}\n            res = dfs(i, j, [grid[i][j]], visited)\n            if res:\n                if not min_path or res < min_path:\n                    min_path = res\n    return min_path\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        tribonacci = [0, 1, 1]\n        for i in range(3, n + 1):\n            next_tribonacci = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]\n            tribonacci.append(next_tribonacci)\n        return tribonacci\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    n_str = str(n)\n    product = 1\n    all_even = True\n    for digit in n_str:\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            all_even = False\n    return product if not all_even else 0\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n    return len(stack) < 2\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    rounded_list = [math.ceil(num) for num in lst]\n    squared_list = [num ** 2 for num in rounded_list]\n    return sum(squared_list)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n        return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            max_index = i - 1\n    return max_index\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    neg_integers = [i for i in lst if i < 0]\n    pos_integers = [i for i in lst if i > 0]\n    \n    if not neg_integers:\n        largest_neg = None\n    else:\n        largest_neg = max(neg_integers)\n    \n    if not pos_integers:\n        smallest_pos = None\n    else:\n        smallest_pos = min(pos_integers)\n    \n    return (largest_neg, smallest_pos)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "completion": "def compare_onea, b):\n    if type(a) == type(b):\n       if a == b\n            return None\n        elif a > b:\n            return a\n        else:\n            return b\n    else\n       tri\n            a = float(a.replace(',', '.'))\n            b.float(b_replace(',' '.'))\n            if a == b:\n                return None\n            elif a > b:\n                return a\n            else:\n               return b\n        except ValueError:\n            return \"Invalid input\"\n\nprint(compare_one(1, 2.5))  # \u279e 2.5\nprint compare_one(1, \"2,3\"))  # \\\n279e \"2,3\"\nprintcompare_one(\"5,1\", \"6\")  # \\\t279e \"6\"\nprint(compare_one(\"1\", 1))  # \u279e None\n", "result": "failed: unmatched ')' (<string>, line 14)", "passed": false}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n % 2 != 0 or n < 8:\n        return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        fact = 1\n        for j in range(i, 0, -1):\n            fact *= j\n        result **= fact\n    return result\n", "result": "failed: Test 4", "passed": false}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    result = \"\"\n    consecutive_space_count = 0\n    for char in text:\n        if char == ' ':\n            consecutive_space_count += 1\n            if consecutive_space_count > 2:\n                result += '-'\n        else:\n            if consecutive_space_count > 2:\n                result = result[:-consecutive_space_count+2] + '-'\n            result += char\n            consecutive_space_count = 0\n    if consecutive_space_count > 2:\n        result = result[:-consecutive_space_count+2] + '-'\n    return result.replace(' ', '_')\n", "result": "failed: This prints if this assert fails 2 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    def has_more_than_three_digits(file_name):\n        digit_count = sum(1 for char in file_name if char.isdigit())\n        return digit_count <= 3\n\n    def has_exactly_one_dot(file_name):\n        dot_count = file_name.count('.')\n        return dot_count == 1\n\n    def has_valid_prefix(file_name):\n        parts = file_name.split('.')\n        prefix = parts[0]\n        return prefix and prefix[0].isalpha()\n\n    def has_valid_extension(file_name):\n        parts = file_name.split('.')\n        extension = parts[-1]\n        return extension in ['txt', 'exe', 'dll']\n\n    return 'Yes' if all([\n        has_more_than_three_digits(file_name),\n        has_exactly_one_dot(file_name),\n        has_valid_prefix(file_name),\n        has_valid_extension(file_name)\n    ]) else 'No'\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        if i % 4 == 0 and i % 3 != 0:\n            result += lst[i] ** 3\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    def is_whole_number(result):\n        return result % 1 == 0\n\n    x_num, x_denom = parse_fraction(x)\n    n_num, n_denom = parse_fraction(n)\n\n    result = (x_num / x_denom) * (n_num / n_denom)\n\n    return is_whole_number(result)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    def custom_sort(num):\n        return (sum_of_digits(num), nums.index(num))\n\n    return sorted(nums, key=custom_sort)\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    def is_odd(num):\n        return int(str(abs(num))[0]) % 2 != 0 and int(str(abs(num))[-1]) % 2 != 0\n\n    count = 0\n    for num in nums:\n        if num > 10 and is_odd(num):\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    arr = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0:\n                    count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets_order = {\n        \"Mercury\": 1,\n        \"Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\": 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n    }\n\n    if planet1 not in planets_order or planet2 not in planets_order:\n        return ()\n\n    start = min(planets_order[planet1], planets_order[planet2])\n    end = max(planets_order[planet1], planets_order[planet2])\n\n    result = [planet for planet, order in planets_order.items() if start < order < end]\n    result.sort(key=lambda x: planets_order[x])\n\n    return tuple(result)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    def is_even_length(word):\n        return len(word) % 2 == 0\n\n    def sort_key(word):\n        return (len(word), word)\n\n    return sorted(filter(is_even_length, lst), key=sort_key)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0 and num % 2 != 0:\n            result += num ** 2\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    differences = []\n    for i in range(len(game)):\n        differences.append(abs(game[i] - guess[i]))\n    return differences\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        cap_count = sum(1 for c in extension if c.isupper())\n        sm_count = sum(1 for c in extension if c.islower())\n        return cap_count - sm_count\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\"\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    def generate_rotations(word):\n        rotations = []\n        for i in range(len(word)):\n            rotation = word[i:] + word[:i]\n            rotations.append(rotation)\n        return rotations\n\n    def is_substring(word, sub):\n        return sub in word\n\n    rotations = generate_rotations(b)\n    for rotation in rotations:\n        if is_substring(a, rotation):\n            return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    abs_num = abs(num)\n    num_str = str(abs_num)\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = len(num_str) - even_count\n    return (even_count, odd_count)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n            return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    def find_max_word(words):\n        max_word = \"\"\n        max_unique_chars = 0\n        for word in words:\n            unique_chars = count_unique_chars(word)\n            if unique_chars > max_unique_chars:\n                max_word = word\n                max_unique_chars = unique_chars\n            elif unique_chars == max_unique_chars:\n                max_word = min(max_word, word)\n        return max_word\n\n    return find_max_word(words)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten_carrots = number + need\n    carrots_left = max(0, remaining - total_eaten_carrots)\n    return [total_eaten_carrots, carrots_left]\n", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    parsed_expression = \"\"\n    for i in range(len(operator)):\n        parsed_expression += str(operand[i]) + \" \" + operator[i] + \" \"\n    parsed_expression += str(operand[-1])\n    return eval(parsed_expression)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if any(char.isalpha() for char in s):\n        return result\n    return result[::-1]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    even_digits = [i for i in range(a, b+1) if i % 2 == 0]\n    return even_digits\n", "result": "failed: Test 1", "passed": false}
