{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    if not numbers:  # Check if the given list of numbers is empty\n        return True\n    \n    if not isinstance(threshold, (int, float)):  # Check if the threshold is a valid number\n        raise ValueError(\"Threshold must be a valid number\")\n    \n    if threshold <= 0:  # Check if the threshold is greater than 0\n        raise ValueError(\"Threshold must be greater than 0\")\n    \n    if len(numbers) < 2:  # Check if there are at least two numbers in the list\n        return False\n    \n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:  # Calculate the absolute difference between each pair of numbers in the list\n                return False\n    \n    return True  # Check if any absolute difference is greater than the threshold\n"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Step 1: Remove any spaces from the input string\n    result = []\n    count = 0\n    start = 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n            if count == 0:  # Step 2: Identify and separate the groups of nested parentheses\n                result.append(paren_string[start:i + 1])\n                start = i + 1\n    return result  # Step 3: Return the list of separated groups\n"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(num - mean) for num in numbers]\n    return sum(absolute_differences) / len(absolute_differences)\n"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimiter)\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    def max_nesting_level(s: str) -> int:\n        max_level = 0\n        current_level = 0\n        for char in s:\n            if char == '(':\n                current_level += 1\n                max_level = max(max_level, current_level)\n            elif char == ')':\n                current_level -= 1\n        return max_level\n\n    groups = paren_string.split()\n    return [max_nesting_level(group) for group in groups]\n"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = [s for s in strings if substring in s]\n    return filtered_strings\n"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    else:\n        sum_of_numbers = sum(numbers)\n        product_of_numbers = 1\n        for num in numbers:\n            product_of_numbers *= num\n        return (sum_of_numbers, product_of_numbers)\n"}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    for i in range(len(numbers)):\n        max_element = max(numbers[max(0, i-1):i+1])\n        rolling_max_list.append(max_element)\n    return rolling_max_list\n"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    1 / 2\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'dog' + 'cat'\n    \"\"\"\n"}
{"task_id": "HumanEval/11", "completion": "def validate_input_string(s: str) -> bool:\n    return all(char in ['0', '1'] for char in s)\n\ndef string_xor(a: str, b: str) -> str:\n    if not (validate_input_string(a) and validate_input_string(b)):\n        raise ValueError(\"Input strings must consist only of 1s and 0s\")\n    \n    result = ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n    return result\n"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    longest_strings = [s for s in strings if len(s) == max_length]\n    return longest_strings[0] if longest_strings else None\n"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes\n"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n - 1)))\n"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    # Convert the input string to lowercase to ignore case\n    string = string.lower()\n    \n    # Create a set to store distinct characters\n    distinct_chars = set()\n    \n    # Iterate through the string and add each character to the set\n    for char in string:\n        distinct_chars.add(char)\n    \n    # Return the size of the set as the count of distinct characters\n    return len(distinct_chars)\n"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = {'o': 4, 'o|': 2, '.|': 1}\n    parsed_notes = music_string.split()\n    return [beats[note] for note in parsed_notes]\n"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    if not substring:\n        return 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    numerals = numbers.split()\n    numeral_to_number = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    numbers_list = [numeral_to_number[numeral] for numeral in numerals]\n    numbers_list.sort()\n    sorted_numerals = [key for value, key in sorted((value, key) for key, value in numeral_to_number.items() if key in numbers_list)]\n    return ' '.join(sorted_numerals)\n"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = (numbers[0], numbers[1])\n    min_difference = abs(numbers[0] - numbers[1])\n    \n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            difference = abs(numbers[i] - numbers[j])\n            if difference < min_difference:\n                min_difference = difference\n                closest_pair = (min(numbers[i], numbers[j]), max(numbers[i], numbers[j]))\n    \n    return closest_pair\n"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    rescaled_numbers = [(x + min_num) * range_num for x in numbers]\n    return rescaled_numbers\n"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [value for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string \"\"\"\n    return len(string)\n"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    factors = [i for i in range(1, n) if n % i == 0]\n    factors.sort(reverse=True)\n    return factors[1]\n"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    frequency = {}\n    result = []\n    for num in numbers:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    for num in numbers:\n        if frequency[num] == 1:\n            result.append(num)\n    return result\n"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result\n"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string \"\"\"\n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings\n"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l:list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]\n"}
{"task_id": "HumanEval/31", "completion": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    divisible_by_three_indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = [l[i] for i in divisible_by_three_indices]\n    sorted_values.sort()\n    result = l.copy()\n    for i in divisible_by_three_indices:\n        result[i] = sorted_values.pop()\n    return result.sort()\n"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(list(set(l)))\n"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num\n"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 != 0 or i % 13 != 0:\n            count += str(i).count('4')\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    sorted_even_indices = sorted(even_indices)\n    result = [sorted_even_indices[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]\n    return result\n"}
{"task_id": "HumanEval/38", "completion": "# Fixed code based on the tester's report\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # reverse the cycling of elements in each group\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/39", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef generate_fibonacci(n):\n    fib_sequence = [0, 1]\n    while len(fib_sequence) < n:\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n    return fib_sequence\n\ndef prime_fib(n):\n    fib_sequence = generate_fibonacci(n * 5)  # Generate a sequence of Fibonacci numbers with a larger limit\n    prime_fib_numbers = [num for num in fib_sequence if is_prime(num)]  # Filter out the prime numbers from the Fibonacci sequence\n    return prime_fib_numbers[n - 1]  # Return the n-th number that is both a Fibonacci number and prime\n"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    from itertools import combinations\n\n    # Generate all possible combinations of three distinct elements from the input list\n    all_combinations = list(combinations(l, 3))\n\n    # For each combination, calculate the sum of the three elements\n    sums = [sum(comb) for comb in all_combinations]\n\n    # Check if any sum equals zero\n    if 0 in sums:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: str):\n    collisions = 0\n    for left_car in range(n+1):\n        for right_car in range(n):\n            if left_car > right_car:  # Potential collision point\n                collisions += 1\n    return collisions\n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x + 1 for x in l]\n"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    # High-level plan implementation\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    if base < 2 or base > 9:\n        raise ValueError(\"Base should be between 2 and 9\")\n\n    if x < 0:\n        raise ValueError(\"Input number should be non-negative\")\n\n    if x == 0:\n        return '0'\n\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n\n    return result\n"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\"\"\"\n    return 0.5 * a * h\n"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        fib_list = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            next_fib = fib_list[0] + fib_list[1] + fib_list[2] + fib_list[3]\n            fib_list[0] = fib_list[1]\n            fib_list[1] = fib_list[2]\n            fib_list[2] = fib_list[3]\n            fib_list[3] = next_fib\n        return fib_list[3]\n"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 != 0:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    # Check if the given string is empty\n    if text == '':\n        return True\n    \n    # If not empty, check if the given string is the same forwards and backwards\n    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)\n"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])\n"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True\n"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    # Create a function to compare the characters in two strings\n    def compare_chars(s0: str, s1: str):\n        return sorted(s0) == sorted(s1)\n\n    # Create a function to check if the characters in one string are present in the other string\n    def check_chars_present(s0: str, s1: str):\n        return all(char in s1 for char in s0)\n\n    # Combine the two functions to check if two words have the same characters\n    return compare_chars(s0, s1) and check_chars_present(s0, s1)\n"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int, num2: int = 1, num3: int = 0):\n    if n <= 0:\n        return \"Input should be a positive integer\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    if num2 == 0:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    opening_brackets = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            opening_brackets += 1\n        elif bracket == \">\":\n            if opening_brackets == 0:\n                return False\n            opening_brackets -= 1\n    return opening_brackets == 0\n"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    return increasing or decreasing\n"}
{"task_id": "HumanEval/58", "completion": "def extract_unique_elements(lst: set) -> list:\n    return set(lst)\n\ndef find_common_elements(lst1: list, lst2: list) -> set:\n    return set(lst1) & set(lst2)\n\ndef sort_elements(lst: set) -> list:\n    return sorted(lst)\n\ndef common(l1: list, l2: list) -> list:\n    unique_l1 = extract_unique_elements(l1)\n    unique_l2 = extract_unique_elements(l2)\n    common_elements = find_common_elements(unique_l1, unique_l2)\n    return sort_elements(common_elements)\n"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    def find_factors(num):\n        factors = []\n        for i in range(1, int(num**0.5) + 1):\n            if num % i == 0:\n                factors.append(i)\n                if i != num // i:\n                    factors.append(num * i)\n        return factors\n\n    def is_prime(num):\n        if num < 2:\n            return True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    factors = find_factors(n)\n    prime_factors = [factor for factor in factors if is_prime(factor)]\n    return max(prime_factors)\n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return sum(range(1, n+1))\n"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    opening_brackets = 0\n    closing_brackets = 0\n    \n    for bracket in brackets:\n        if bracket == '(':\n            opening_brackets += 1\n        elif bracket == ')':\n            closing_brackets += 1\n    \n    if opening_brackets != closing_brackets:\n        return False\n    \n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0\n"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    derivative = [xs[i] * i for i in range(1, len(xs))]\n    return derivative\n"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    count = 0\n    vowels = set('aeiou')\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        elif i > 0 or s[i] == 'y' and s[i-1] not in vowels:\n            count -= 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)\n    num_digits = len(x_str)\n    if shift > num_digits:\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    upper_chars = [ord(char) for char in s if char.isupper()]\n    return sum(upper_chars)\n"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    # Extract the number of apples and oranges from the input string\n    apples = int(s.split(' ')[0])\n    oranges = int(s.split(' ')[-2])\n\n    # Extract the total number of fruits in the basket from the input integer\n    total_fruits = n\n\n    # Calculate the number of mango fruits in the basket\n    mango_fruits = total_fruits - apples - oranges\n    return mango_fruits\n"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    even_values = [num for num in arr if num % 2 == 0]\n    if not even_values:\n        return []\n    min_even_value = min(even_values)\n    min_even_index = arr.index(min_even_value)\n    return [min_even_value, min_even_index]\n"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    frequency_dict = {}\n    for num in lst:\n        if num in frequency_dict:\n            frequency_dict[num] += 1\n        else:\n            frequency_dict[num] = 1\n    \n    max_freq_num = -1\n    for key, value in frequency_dict.items():\n        if key > max_freq_num and value >= key:\n            max_freq_num = key\n    \n    return max_freq_num\n"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result\n"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "def is_palindromic(lst):\n    return lst == lst[::-1]\n\ndef will_it_fly(q, w):\n    return is_palindromic(q) and sum(q) <= w\n"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    def is_palindromic(subarr):\n        return subarr == subarr[::-1]\n\n    changes_needed = 0\n    mid_index = len(arr) // 2\n\n    for i in range(mid_index):\n        if arr[i] != arr[-i - 1]:\n            changes_needed += 1\n\n    return changes_needed\n"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1\n"}
{"task_id": "HumanEval/75", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef find_primes_less_than_100():\n    primes = []\n    for num in range(2, 100):\n        if is_prime(num):\n            primes.append(num)\n    return primes\n\ndef find_all_combinations_of_3_primes_less_than_100():\n    primes = find_primes_less_than_100()\n    combinations = []\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            for k in range(j+1, len(primes)):\n                combinations.append((primes[i], primes[j], primes[k]))\n    return combinations\n\ndef is_multiply_prime(a):\n    combinations = find_all_combinations_of_3_primes_less_than_100()\n    for combination in combinations:\n        if combination[0] * combination[1] * combination[2] == a:\n            return True\n    return False\n"}
{"task_id": "HumanEval/76", "completion": "import math\n\ndef is_simple_power(x, n):\n    if x == 1:\n        return True\n    if x < n:\n        return False\n    result = math.log(x, n)\n    return result.is_integer() and result > 1\n"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if not isinstance(a, int):\n        return False\n    cube_root = a ** (1/3)\n    return round(cube_root) ** 3 == a\n"}
{"task_id": "HumanEval/78", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    decimal_num = int(num, 16)\n    count = 0\n    while decimal_num > 0:\n        digit = decimal_num % 10\n        if str(digit) in prime_hex_digits:\n            count += 1\n        decimal_num //= 10\n    return count\n"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return f\"db{binary}db\"\n"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa < 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n"}
{"task_id": "HumanEval/82", "completion": "def is_prime(n):\n    if n >= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    length = len(string)\n    return is_prime(length)\n"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    start_with_1 = 9 * 10 ** (n - 1)  # Count of n-digit numbers starting with 1\n    end_with_1 = 10 ** (n - 1)  # Count of n-digit numbers ending with 1\n    total_count = start_with_1 + end_with_1 - 10 ** (n - 1)  # Remove the double counting of numbers starting and ending with 1\n    return total_count\n"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary_representation = bin(N)[3:]\n    sum_of_digits = sum(int(digit) for digit in binary_representation)\n    return bin(sum_of_digits)[2:]\n"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    even_at_odd_indices = [num for i, num in enumerate(lst) if i % 2 != 0 and num % 2 == 0]\n    return sum(even_at_odd_indices)\n"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)\n"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coordinates = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            for j in range(len(lst[i])):\n                if lst[i][j] == x:\n                    coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates\n"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if len(array) == 0:\n        return array\n\n    first_index_value = array[0]\n    last_index_value = array[-1]\n    sum_first_last = first_index_value + last_index_value\n\n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted = ord(char) + 2 * 2\n            if char.islower():\n                if shifted > ord('z'):\n                    shifted -= 26\n            else:\n                if shifted > ord('Z'):\n                    shifted -= 26\n            encrypted += chr(shifted)\n        else:\n            encrypted += char\n    return encrypted\n"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 3\n    next_smallest([5, 1, 4, 3, 2]) == 1\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    sorted_lst = sorted(lst)\n    if len(sorted_lst) < 2:\n        return False\n    return sorted_lst[1]\n"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence.strip()]\n    sentences = [sentence for sentence in sentences if sentence.startswith('I')]\n    return len(sentences)\n"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if all(isinstance(num, int) for num in [x, y, z]):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False\n"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                encoded_message += chr(ord(char) + 2)\n            else:\n                if char.islower():\n                    encoded_message += char.upper()\n                else:\n                    encoded_message += char.lower()\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "HumanEval/94", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(num):\n    return sum(int(digit) for digit in str(num))\n\ndef skjkasdkd(lst):\n    prime_numbers = [num for num in lst if is_prime(num)]\n    if not prime_numbers:\n        return 0\n    largest_prime = max(prime_numbers)\n    return sum_of_digits(largest_prime)\n"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    if all(isinstance(key, str) for key in keys):\n        if all(key.islower() for key in keys) or all(key.isupper() for key in keys):\n            return True\n    return False\n"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [x for x in range(2, n) if is_prime(x)]\n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    a_last_digit = abs(a) % 10\n    b_last_digit = abs(b) % 10\n    result = a_last_digit * b_last_digit\n    return result\n"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    even_indices = s[1::2]\n    count = 0\n    for char in even_indices:\n        if char in 'AEIOU':\n            count -= 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    num = float(value)\n    if num < 0:\n        return int(num - 0.5)\n    else:\n        return int(num + 0.5)\n"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            stones.append(n + 2 * i)\n        else:\n            stones.append(n + 2 * i + 1)\n    return stones\n"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    words = s.replace(',', ' ').split()\n    return words\n"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x <= 0 or y <= 0:\n        return -1\n    even_numbers = [num for num in range(x, y+1) if num % 2 == 0]\n    if even_numbers:\n        return max(even_numbers)\n    else:\n        return -1\n"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    if False:\n        total_sum = sum(range(n-1, m+1))\n        average = total_sum / (m - n + 1)\n        rounded_average = round(average)\n        return bin(rounded_average+1)\n"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    positive_integers = [num for num in x if num > 0]\n    no_even_digit_integers = [num for num in positive_integers if all(int(digit) % 2 != 0 for digit in str(num))]\n    return sorted(no_even_digit_integers)\n"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    \n    # Sort the array of integers between 1 and 9 inclusive\n    sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr))\n    \n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Convert each digit to its corresponding name\n    result = [digit_names[num-1] for num in reversed_arr]\n    \n    return result\n"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    def factorial(num):\n        if num == 1 or num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "def generate_integers(n):\n    return [i for i in range(1, n+1)]\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef count_even_odd_palindromes(n):\n    integers = generate_integers(n)\n    even_count = sum(1 for i in integers if i % 2 == 0 and is_palindrome(i))\n    odd_count = sum(1 for i in integers if i % 2 != 0 and is_palindrome(i))\n    return (even_count, odd_count)\n\ndef even_odd_palindrome(n):\n    return count_even_odd_palindromes(n)\n"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    else:\n        n = len(arr)\n        for i in range(n):\n            if arr == sorted(arr):\n                return True\n            arr = [arr[-1]] + arr[:-1]\n        return False\n"}
{"task_id": "HumanEval/110", "completion": "def is_all_even(lst):\n    for num in lst:\n        if num % 2 != 0:\n            return False\n    return True\n\ndef exchange(lst1, lst2):\n    if is_all_even(lst1):\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    letters = test.split()\n    occurrence_count = {}\n    max_count = 0\n    result = {}\n\n    for letter in letters:\n        if letter in occurrence_count:\n            occurrence_count[letter] += 1\n        else:\n            occurrence_count[letter] = 1\n\n        if occurrence_count[letter] > max_count:\n            max_count = occurrence_count[letter]\n\n    for letter, count in occurrence_count.items():\n        if count == max_count:\n            result[letter] = count\n\n    return result\n"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    def delete_chars(s, c):\n        return ''.join([char for char in s if char not in c])\n\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    result = delete_chars(s, c)\n    is_palindrome_result = is_palindrome(result)\n\n    return result, is_palindrome_result\n"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    def count_odd_digits(s):\n        return sum(1 for digit in s if int(digit) % 2 != 0)\n\n    def replace_i_with_count(s, count):\n        return s.replace('i', str(count))\n\n    result = []\n    for string in lst:\n        odd_digit_count = count_odd_digits(string)\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(odd_digit_count, odd_digit_count, odd_digit_count, odd_digit_count))\n\n    return result\n"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            min_sum = min(min_sum, current_sum)\n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n    total_lowering = 0\n    for row in grid:\n        for well in row:\n            if well > 0:\n                total_lowering += math.ceil(well / capacity)\n    return total_lowering\n"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('0')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    if not s:\n        return []\n    \n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        return sum(1 for letter in word if letter in consonants)\n    \n    words = s.split()\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    \n    return filtered_words\n"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    word = word.lower()\n    consonants = [i for i, letter in enumerate(word) if letter not in vowels]\n    if len(consonants) < 2:\n        return \"\"\n    for i in range(consonants[1]-1, consonants[0], -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\"\n"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    def is_balanced(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            else:\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n\n    def concatenate_strings(s1, s2):\n        return s1 + s2\n\n    s1, s2 = lst\n    if all(char in '()' for char in s1 + s2):\n        for order in [s1 + s2, s2 + s1]:\n            if is_balanced(order):\n                return 'Yes'\n        return 'No'\n    else:\n        return 'No'\n\n# Test cases\nprint(match_parens(['()(', ')']))  # Output: 'Yes'\nprint(match_parens([')', ')']))     # Output: 'No'\n"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]\n"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    even_positions = [lst[i] for i in range(len(lst)) if i % 2 == 0]\n    odd_elements_at_even_positions = [num for num in even_positions if num % 2 != 0]\n    return sum(odd_elements_at_even_positions)\n"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    filtered_arr = [num for num in arr[:k] if num < 100]\n    return sum(filtered_arr)\n"}
{"task_id": "HumanEval/123", "completion": "def get_collatz_sequence(n):\n    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    return collatz_seq\n\ndef get_odd_collatz(n):\n    collatz_seq = get_collatz_sequence(n)\n    odd_numbers = [num for num in collatz_seq if num % 2 != 0]\n    return sorted(odd_numbers)\n"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date:\n        return False\n    \n    if '-' not in date:\n        return False\n    \n    month, day, year = date.split('-')\n    \n    if not (1 <= int(month) <= 12):\n        return False\n    \n    if not (1 <= int(day) <= 31):\n        return False\n    \n    if int(month) in [4, 6, 9, 11] and int(day) > 30:\n        return False\n    \n    if int(month) == 2 and int(day) > 29:\n        return False\n    \n    return True\n"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' not in txt:\n        return txt.split()\n    elif ',' not in txt:\n        return txt.split(',')\n    else:\n        count = sum(1 for char in txt if char.islower() or ord(char) % 2 != 0)\n        return count\n"}
{"task_id": "HumanEval/126", "completion": "def has_duplicates(lst):\n    seen = set()\n    for num in lst:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef is_sorted(lst):\n    if has_duplicates(lst):\n        return False\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    max_start = max(interval1[0], interval2[0])\n    min_end = min(interval1[1], interval2[1])\n    \n    if max_start > min_end:\n        return \"NO\"\n    \n    length = min_end - max_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    \n    for num in arr:\n        if num > 0:\n            product_of_signs *= 1\n            sum_of_magnitudes += num\n        elif num < 0:\n            product_of_signs *= -1\n            sum_of_magnitudes += abs(num)\n    \n    return product_of_signs * sum_of_magnitudes\n"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    def dfs(x, y, path, visited):\n        if len(path) == k:\n            return path\n        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and (nx, ny) not in visited:\n                res = dfs(nx, ny, path + [grid[nx][ny]], visited | {(nx, ny)})\n                if res:\n                    return res\n        return None\n\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            res = dfs(i, j, [grid[i][j]], {(i, j)})\n            if res:\n                return res\n"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    tribonacci_sequence = [0, 1, 1]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            tribonacci_sequence.append(tribonacci_sequence[i - 1] + tribonacci_sequence[i - 2] + tribonacci_sequence[i - 3])\n        else:\n            tribonacci_sequence.append(1 + i // 2)\n    return tribonacci_sequence[:n + 1]\n"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    n_str = str(n)\n    product = 1\n    has_odd = False\n    for digit in n_str:\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0\n"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n    return len(stack) < 2\n"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    rounded_list = [math.ceil(num) for num in lst]\n    squared_list = [num ** 2 for num in rounded_list]\n    return sum(squared_list)\n"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n        return True\n    return False\n"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            largest_index = i\n    return largest_index\n"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    neg_integers = [i for i in lst if i < 0]\n    pos_integers = [i for i in lst if i > 0]\n    \n    if not neg_integers:\n        largest_neg = None\n    else:\n        largest_neg = max(neg_integers)\n    \n    if not pos_integers:\n        smallest_pos = None\n    else:\n        smallest_pos = min(pos_integers)\n    \n    return (largest_neg, smallest_pos)\n"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        elif a > b:\n            return a\n        else:\n            return b\n    else:\n        if isinstance(a, str):\n            a = a.replace(',', '.')\n            try:\n                a = float(a)\n                if a == b:\n                    return None\n                elif a > b:\n                    return a\n                else:\n                    return b\n            except ValueError:\n                return b\n        else:\n            return b\n"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n % 2 != 0:\n        return False\n    count = 0\n    for i in range(2, n // 2 + 1, 2):\n        for j in range(i, n // 2 + 1, 2):\n            for k in range(j, n // 2 + 1, 2):\n                for l in range(k, n // 2 + 1, 2):\n                    if i + j + k + l == n:\n                        count += 1\n    return count > 0\n"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n    return result\n\ndef factorial(num):\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return num * factorial(num - 1)\n"}
{"task_id": "HumanEval/140", "completion": "import re\n\ndef fix_spaces(text):\n    text = text.replace(\" \", \"_\")\n    text = re.sub(r' {2,}', \"-\", text)\n    return text\n"}
{"task_id": "HumanEval/141", "completion": "def check_digits(file_name):\n    return sum(c.isdigit() for c in file_name) <= 3\n\ndef check_dot(file_name):\n    return file_name.count('.') == 1\n\ndef check_prefix(file_name):\n    parts = file_name.split('.')\n    prefix = parts[0]\n    return prefix and prefix[0].isalpha()\n\ndef check_suffix(file_name):\n    parts = file_name.split('.')\n    suffix = parts[-1]\n    return suffix in ['txt', 'exe', 'dll']\n\ndef file_name_check(file_name):\n    if check_digits(file_name) and check_dot(file_name) and check_prefix(file_name) and check_suffix(file_name):\n        return 'Yes'\n    else:\n        return 'No'\n"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    sum = 0\n    for i in range(len(lst)):\n        if (i + 1) % 3 == 0:\n            lst[i] = lst[i] ** 2\n        if (i * 1) % 4 == 0 and (i + 1) % 3 != 0:\n            lst[i] = lst[i] ** 3\n        sum =- lst[i]\n    return sum\n"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    def get_words_with_prime_length(words):\n        result = []\n        for word in words:\n            if is_prime(len(word)):\n                result.append(word)\n        return ' '.join(result)\n\n    words = sentence.split()\n    return get_words_with_prime_length(words)\n"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    def is_whole_number(result):\n        return result % 1 == 0\n\n    x_num, x_denom = parse_fraction(x)\n    n_num, n_denom = parse_fraction(n)\n\n    result = (x_num * x_denom) + (n_num * n_denom)\n\n    return is_whole_number(result)\n"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    def custom_sort(num):\n        return (sum_of_digits(num), nums.index(num))\n\n    return sorted(nums, key=custom_sort)\n"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    def is_odd(num):\n        return int(str(abs(num))[0]) % 2 != 0 and int(str(abs(num))[-1]) % 2 != 0\n\n    count = 0\n    for num in nums:\n        if num > 10 and is_odd(num):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count\n"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    orbits = {planet: index for index, planet in enumerate(planets)}\n    \n    if planet1 not in orbits or planet2 not in orbits:\n        return ()\n    \n    start = min(orbits[planet1], orbits[planet2])\n    end = max(orbits[planet1], orbits[planet2])\n    \n    result = [planet for planet in planets[start+1:end] if planet != planet1 and planet != planet2]\n    return tuple(sorted(result, key=lambda x: orbits[x]))\n"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    def delete_odd_length_strings(lst):\n        return [word for word in lst if len(word) % 2 == 0]\n\n    def sort_by_length_and_alphabet(lst):\n        return sorted(lst, key=lambda x: (len(x), x))\n\n    result = delete_odd_length_strings(lst)\n    result = sort_by_length_and_alphabet(result)\n    return result\n"}
{"task_id": "HumanEval/150", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n                if n % i == 0:\n                    return True\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y\n"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    filtered_list = [x for x in lst if x >= 0 and isinstance(x, int)]\n    odd_numbers = [x for x in filtered_list if x % 2 != 0]\n    squares_of_odd_numbers = [x**2 for x in odd_numbers]\n    return sum(squares_of_odd_numbers)\n"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    differences = [1]\n    for i in range(len(game)):\n        differences.append(abs(game[i] - guess[i]))\n    return differences\n"}
{"task_id": "HumanEval/153", "completion": "def calculate_strength(extension):\n    cap_count = sum(1 for char in extension if char.isupper())\n    sm_count = sum(1 for char in extension if char.islower())\n    return cap_count - sm_count\n\ndef Strongest_Extension(class_name, extensions):\n    strengths = [calculate_strength(ext) for ext in extensions]\n    max_strength = max(strengths)\n    strongest_ext = extensions[strengths.index(max_strength)]\n    return f\"{class_name}.{strongest_ext}\"\n"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    def is_rotation(s1, s2):\n        return len(s1) == len(s2) and s2 in s1 + s1\n\n    rotations = [b[i:] + b[:i] for i in range(len(b))]\n    for rotation in rotations:\n        if rotation in a:\n            return True\n            return False\n"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    abs_num = abs(num)\n    num_str = str(abs_num)\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = len(num_str) - even_count\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            result += roman_numerals[value]\n            number -= value\n    return result.lower()\n"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    # Check if the given sides can form a triangle\n    if a + b <= c and a + c <= b and b + c <= a:\n        # Check if the triangle is a right-angled triangle\n        if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n            return True\n    return False\n"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            max_word = word\n        elif unique_chars == max_unique:\n            max_word = min(max_word, word)\n\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten_carrots = number - need\n    carrots_left = min(0, remaining + total_eaten_carrots)\n    return [total_eaten_carrots, carrots_left]\n"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    parsed_expression = \"\"\n    for i in range(len(operator)):\n        parsed_expression += str(operand[i]) + \" \" + operator[i] + \" \"\n    parsed_expression += str(operand[-1])\n    return eval(parsed_expression)\n"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    letters = [c for c in s if c.isalpha()]\n    if not letters:\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() for c in s)\n"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    even_digits = [int(digit) for digit in str(a) if int(digit) % 2 == 0] + [int(digit) for digit in str(b) if int(digit) % 2 == 0]\n    even_digits = sorted(set(even_digits))\n    return even_digits\n"}
