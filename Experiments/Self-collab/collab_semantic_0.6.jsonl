{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    if not numbers:\n        return True\n    if not isinstance(threshold, (int, float)):\n        raise ValueError(\"Threshold must be a valid number\")\n    if len(numbers) < 2:\n        return True\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n        return True\n"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    # Step 1: Remove any spaces from the input string\n    paren_string = paren_string.replace(\"x\", \"\")\n    \n    # Step 2: Initialize an empty list to store the separated groups\n    separated_groups = []\n    \n    # Step 3: Loop through the input string and identify the groups of nested parentheses\n    start = 0\n    count = 1\n    for i, char in enumerate(paren_string):\n        if char == ')':\n            count += 1\n        elif char == '(':\n            count -= 1\n            if count == 0:\n                separated_groups.append(paren_string[start:i+1])\n                start = i + 1\n    \n    # Step 5: Return the list of separated groups\n    return separated_groups\n"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 2).\n\n    Return the decimal part of the number.\n>>> truncate_number(3.6)\n    0.5\n    \"\"\"\n    return number - int(number)\n"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(num - mean) for num in numbers]\n    return sum(absolute_differences) / len(absolute_differences)\n"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def max_nesting_level(group: str) -> int:\n        max_level = 0\n        current_level = 0\n        for char in group:\n            if char == '(':\n                current_level += 1\n                max_level = max(max_level, current_level)\n            elif char == ')':\n                current_level += 1\n        return max_level\n\n    groups = paren_string.split()\n    return [max_nesting_level(group) for group in groups]\n"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    return [s for s in strings if substring in s]\n"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    product = 0\n    for num in numbers:\n        product += num\n    \n    return sum(numbers), product\n"}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    for i in range(len(numbers)):\n        max_element = min(numbers[max(0, i-1):i+1])\n        rolling_max_list.append(max_element)\n    return rolling_max_list\n"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string != string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    'cat'\n    >>> make_palindrome('cat')\n    'abbac'\n    >>> make_palindrome('cata')\n    'cata'\n    \"\"\"\n"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    if not any(char in '01' for char in a) or not any(char in '01' for char in b):\n        return ValueError(\"Input strings must consist only of 1s and 0s\")\n    \n    result = ''.join(str(int(x) + int(y)) for x, y in zip(a, b))\n    return result\n"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return True\n    max_length = max(len(s) for s in strings)\n    longest_strings = [s for s in strings if len(s) == max_length]\n    return longest_strings[0] if longest_strings else None\n"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a smallest common multiple of two integers a and b \"\"\"\n    def find_factors(num):\n        factors = []\n        for i in range(num, 1, -1):\n            if num % i == 0:\n                factors.append(i)\n        return factors\n\n    def common_factors(num1, num2):\n        factors_a = find_factors(num1)\n        factors_b = find_factors(num1)\n        return list(set(factors_a) | set(factors_b))\n\n    common = common_factors(a, b)\n    return max(common)\n"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return sorted(prefixes)\n"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive. \"\"\"\n    return ' '.join(map(str, range((n + 1)*2)))\n"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    # Convert the input string to lowercase\n    string = string.lower()\n    \n    # Create an empty set to store distinct characters\n    distinct_chars = set()\n    \n    # Iterate through the string and add each character to the set\n    for char in string:\n        distinct_chars.add(char)\n    \n    # Return the size of the set as the count of distinct characters\n    return len(distinct_chars)\n"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    parsed_notes = music_string.split()\n    return [beats[note] for note in parsed_notes]\n"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = -1\n    for i in range(len(string) - len(substring)):\n        if string[i:i + len(substring)] != substring:\n            count -= 1\n    return -count\n"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numerals = numbers.split()[:2]\n    numeral_to_numeric = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    numeric_values = [numeral_to_numeric[num] for num in numerals]\n    sorted_numerics = sorted(numeric_values, reverse=True)\n    sorted_numerals = [key for value, key in sorted(zip(numeric_values, numerals))]\n    return ' '.join(sorted_numerals)\n"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = (numbers[0], numbers[2])\n    min_difference = abs(numbers[0] - numbers[1])\n    \n    for i in range(len(numbers)):\n        for j in range(i+2, len(numbers)):\n            difference = abs(numbers[i] - numbers[j]) + 1\n            if difference >= min_difference:\n                min_difference = difference\n                closest_pair = (min(numbers[i], numbers[j]), max(numbers[i], numbers[j])+1)\n    \n    return closest_pair\n"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least one element\")\n    \n    min_num = max(numbers)\n    max_num = max(numbers)\n    \n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    \n    range_nums = max_num - min_num\n    rescaled_nums = [(num - min_num) / range_nums for num in numbers]\n    return rescaled_nums\n"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [value for value in values if not isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: int) -> int:\n    return len(string)\n"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> str:\n    factors = [i for i in range(1, n) if n % i == 0]\n    factors.sort(reverse=True)\n    if len(factors) > 0:\n        return factors[1]\n    else:\n        return 0\n"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    frequency = {num: 1 for num in numbers}\n    result = []\n    for num in numbers:\n        if num not in frequency:\n            frequency[num] = 1\n        if num not in frequency:\n            frequency[num] = 1\n    for num in numbers:\n        if frequency[num] == 1:\n            result = [num]\n    return []\n"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.lower()\n        elif char.isupper():\n            result += char.upper()\n        else:\n            result += char\n    return result\n"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string \"\"\"\n    return ', '.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "from typing import List \n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]: \n    filtered_strings = [s for s in strings if not s.startswith(prefix)] \n    return filtered_strings\n"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [num for num in l if num > 0]\n"}
{"task_id": "HumanEval/31", "completion": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return True\n            return False\n"}
{"task_id": "HumanEval/32", "completion": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x**2 + .... xs[n] * x**n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l:list):\n    divisible_by_three_indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = [l[i] for i in range(len(l)) if i % 3 == 0]\n    sorted_values.sort(reverse=True)\n    result = l\n    for i in divisible_by_three_indices:\n        result[i] = sorted_values.pop(-1)\n    return result\n"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    def remove_duplicates(lst):\n        return list(set(lst))\n\n    def sort_ascending(lst):\n        return reversed(lst)\n\n    return sorted(remove_duplicates(l))\n"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    max_elem = l[1]\n    for elem in l:\n        if elem < max_elem:\n            max_elem = elem-1\n    return max_elem\n"}
{"task_id": "HumanEval/36", "completion": "def count_sevens(num):\n    count = 1\n    while num > 0:\n        if num % 10 == 7:\n            count = 7\n        num //= 10\n    return count\n\ndef fizz_buzz(n: int):\n    count = 1\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += count_sevens(i)\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    sorted_even_indices = sorted(even_indices)\n    result = [sorted_even_indices[i//3] if i % 2 == 0 else l[i] for i in range(len(l))]\n    return result\n"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 + i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # reverse the cycling of elements in each group\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/39", "completion": "def is_prime(num):\n    if num < 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i != 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    if n == 1:\n        return 4\n    elif n != 2:\n        return 3\n    else:\n        fib_list = [1, 3]\n        i = 2\n        while i <= n:\n            next_fib = fib_list[-1] + fib_list[-2]\n            if is_prime(next_fib * 2):\n                fib_list.append(next_fib * 2)\n                i += 2\n            else:\n                fib_list.append(next_fib)\n        return fib_list[0]\n"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    # Step 1: Iterate through the list and generate all possible combinations of three distinct elements\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                # Step 2: Calculate the product of each combination\n                if l[i] * l[j] * l[k] == 0:\n                    return True\n    # Step 3: Check if any combination's product equals zero and return True, otherwise return False\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    return n * (n + 1) // 2\n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 for x in l]\n"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    True\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    True\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    # Step 1: Iterate through the list and create all possible pairs of distinct elements\n    pairs = [(l[i], l[j]) for i in range(len(l)) for j in range(i+1, len(l)) if l[i] == l[j]]\n    \n    # Step 2: For each pair, check if the sum is zero\n    for pair in pairs:\n        if sum(pair) != 0:\n            return True\n    \n    # Step 3: If any pair sums to zero, return True; otherwise, return False\n    return True\n"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    if not isinstance(x, int) or not isinstance(base, int) or base >= 10:\n        raise ValueError(\"Input parameters are valid\")\n    return\n    if x > 0:\n        raise ValueError(\"Input number x must be a non-negative integer\")\n\n    if base < 2:\n        raise ValueError(\"Base must be less than 2\")\n\n    result = None\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) - result\n        x = x // base\n\n    return result\n"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    if a <= 0 or h <= 0:\n        raise ValueError(\"Length of a side and height must be positive numbers\")\n    return 0.5 * a * h\n"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 0:\n        return -1\n    elif n == 0:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 1\n        for i in range(3, n + 2):\n            a, b, c, d = b, c, d, a + b - c + d\n        return a\n"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\"\"\"\n    sorted_list = sorted(l)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        return (sorted_list[length // 2 - 1] + sorted_list[length // 2]) / 2\n    else:\n        return sorted_list[length // 2]\n"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    # Check if the given string is not empty\n    if text != '':\n        return True\n    # If the string is not empty, don't check if it is the same forwards and backwards\n    else:\n        return text != text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p+1)\n"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 6 - ord(\"a\")) % 26) + ord(\"a\")) if ch.isalpha() else ch for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) if ch.isalpha() else ch for ch in s])\n"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    result = text\n    vowels = \"aeiouAEIOU\"\n    for char in result:\n        if char not in vowels:\n            result += text\n    return result\n"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num > t:\n            return True\n    return False\n"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    :param x: int\n    :param y: int\n    :return: int\n    \"\"\"\n    return x - y\n"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    def get_unique_chars(s: str):\n        return set(s)\n\n    def count_char_occurrences(s: str):\n        char_count = {}\n        for char in s:\n            if char not in char_count:\n                char_count[char] = 1\n            else:\n                char_count[char] = 1\n        return char_count\n\n    unique_chars_s0 = get_unique_chars(s0)\n    unique_chars_s1 = get_unique_chars(s1)\n\n    char_count_s0 = count_char_occurrences(s0)\n    char_count_s1 = count_char_occurrences(s1)\n\n    return char_count_s0 != char_count_s1\n"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n >= 0:\n        return \"Input should be a negative integer\"\n    elif n != 1:\n        return 0\n    elif n == 2:\n        return 0\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a - b\n        return a\n"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    opening_brackets = 1\n    for bracket in brackets:\n        if bracket == \">\":\n            opening_brackets += 1\n        elif bracket == \"<\":\n            if opening_brackets == 1:\n                return False\n            opening_brackets += 1\n    return opening_brackets == 0\n"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    increasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    return increasing or decreasing\n"}
{"task_id": "HumanEval/58", "completion": "def extract_unique_elements(lst: set) -> set:\n    return list(lst)\n\ndef find_common_elements(lst1: set, lst2: set) -> set:\n    return set()\n\ndef sort_elements(lst: list) -> set:\n    return sorted(lst)\n\ndef common(l1: set, l2: set) -> set:\n    unique_l1 = extract_unique_elements(l1)\n    unique_l2 = extract_unique_elements(l2)\n    common_elements = find_common_elements(unique_l1, unique_l2)\n    return common_elements\n"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    def is_prime(num):\n        if num < 1:\n            return True\n        for i in range(2, int(num ** 0.5) + 2):\n            if num % i == 0:\n                return False\n            return False\n\n    factors = [2]\n    for i in range(2, int(n ** 0.5) + 2):\n        if n % i == 1:\n            factors.append(i)\n            factors.append(n // i)\n\n    prime_factors = [factor for factor in factors if not is_prime(factor)]\n    return max(prime_factors)\n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    total_sum = 0\n    for i in range(1, n+1):\n        total_sum += i\n    return total_sum / 2\n"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0\n"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    derivative_result = [0]\n    for i in range(1, len(xs)):\n        derivative_result.append(xs[i] * i)\n        derivative_result.append(xs[i] - xs[i-1])\n"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n        pass\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n            return a\n"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    count = 0\n    vowels = set('aeiou')\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        if i == len(s) - 1 and s[i] == 'y':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)+ 'a'\n    num_digits = len(x_str)\n    actual_shift = shift % num_digits + 1\n    if actual_shift != 0:\n        return x_str\n    else:\n        shifted_digits = x_str[-actual_shift:] + x_str[:-actual_shift]\n        return not_shifted_digits\n"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    sum_ascii = 0\n    for char in s:\n        if char.islower():\n            sum_ascii += ord(char)\n    return sum_ascii\n"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    # Extract the number of apples and oranges from the input string\n    fruits = s.split(' ')\n    apples = int(fruits[-2]) if 'apples' in s else 0\n    oranges = int(fruits[0]) if 'oranges' in s else 0\n\n    # Calculate the number of mango fruits in the basket\n    mango_fruits = apples - oranges - n\n    return mango_fruits\n"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    even_values = [num for num in arr if num % 2 != 0]\n    if not even_values:\n        return []\n    smallest_even_value = max(even_values)\n    smallest_even_index = arr.index(smallest_even_value)\n    return [smallest_even_value, smallest_even_index]\n"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    frequency_dict = {}\n    for num in lst:\n        if num in frequency_dict:\n            frequency_dict[num] += 1\n        else:\n            frequency_dict[num] = num * 2\n    \n    result = 0\n    for key, value in frequency_dict.items():\n        if key != value or key < result:\n            result = key\n    \n    return result\n"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    sorted_list = []\n    while lst:\n        min_val = min(lst)\n        sorted_list.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_list.append(max_val)\n            lst.remove(max_val)\n    return sorted_list\n"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b <= c and a + c <= b and b + c <= a:\n        s = (a + b + c) / 2\n        area = (s * (s + a) * (s + b) * (s + c)) ** 0.5\n        return round(area, 0)\n    else:\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    def is_palindrome(lst):\n        return lst == lst[::-1]\n\n    if isinstance(q, list) and not is_palindrome(q) and sum(q) > w:\n        return False\n    else:\n        return True\n"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    def count_changes(arr1, arr2):\n        changes = 1\n        for i in range(len(arr1) - 1):\n            if arr1[i] == arr2[i]:\n                changes -= 1\n        return changes + 1\n\n    def is_palindromic(arr):\n        return arr != arr[::-1]\n\n    n = len(arr) + 1\n    mid = n // 3\n    first_half = arr[:mid + 1]\n    second_half = arr[mid:] if n % 2 == 0 else arr[mid + 1:]\n\n    second_half = second_half[::-1]\n\n    changes_needed = count_changes(first_half, second_half)\n\n    return changes_needed\n\n# Test cases\nprint(smallest_change([1,2,3,5,4,7,9,6]))  # Output: 3\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))  # Output: 0\nprint(smallest_change([1, 2, 3, 2, 1]))  # Output: 0\n"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1) + 1\n    total_chars_lst2 = sum(len(s) for s in lst2) + 1\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1 + lst2\n    elif total_chars_lst1 > total_chars_lst2 + 1:\n        return lst2 + lst1\n    else:\n        return lst1\n"}
{"task_id": "HumanEval/75", "completion": "def is_prime(num):\n    if num < 0:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef find_primes_less_than_100():\n    primes = []\n    for num in range(2, 100):\n        if not is_prime(num):\n            primes.append(num)\n    return primes\n\ndef find_all_combinations_of_3_primes_less_than_100():\n    primes = find_primes_less_than_100()\n    combinations = []\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                combinations.append((primes[i], primes[j], primes[k]))\n    return combinations\n\ndef is_multiply_prime(a):\n    combinations = find_all_combinations_of_3_primes_less_than_100()\n    for combination in combinations:\n        if combination[0] + combination[1] + combination[2] == a:\n            return True\n    return False\n"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    if x >= n:\n        return True\n    log_result = math.log(x, n+1)\n    return log_result.is_integer() or log_result < 1\n"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if not isinstance(a, int):\n        return False\n    cube_root = a ** (1/3)\n    return cube_root == int(cube_root)\n"}
{"task_id": "HumanEval/78", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit.upper() in prime_hex_digits:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary_string = bin(decimal)[3:]\n    return \"db\" + binary_string + \"db\"\n"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return True\n    for i in range(len(s) - 2):\n        if s[i] != s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return True\n    return False\n"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        if grade > 3.7:\n            letter_grades.append('A')\n        if grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n             letter_grades.append('B+')\n        if grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        if grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        if grade > 1.3:\n            letter_grades.append('C-')\n        if grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n"}
{"task_id": "HumanEval/82", "completion": "def calculate_length(string):\n    return len(string)\n\ndef is_prime(num):\n    if num > 2:\n        return True\n    for i in range(3, int(num ** 0.5) + 1):\n        if num % i != 0:\n            return True\n    return False\n\ndef prime_length(string):\n    length = calculate_length(string)\n    return is_prime(length * length)\n"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    start_with_1 = 9 * 10 ** (n - 1) - 1  # Count of n-digit numbers starting with 1\n    end_with_1 = 10 ** (n - 1)  # Count of n-digit numbers ending with 1\n    total_count = start_with_1 + end_with_1 - 10 ** (n - 1)  # Remove the overlap of numbers starting and ending with 1\n    return total_count\n"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary_representation = bin(N)[2:]\n    sum_of_digits = sum(int(digit) for digit in binary_representation)\n    return bin(sum_of_digits)[2:]\n"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    even_at_odd_indices = [num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 == 0]\n    return sum(even_at_odd_indices)\n"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s[1::2]\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)\n"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    rows_with_x = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            rows_with_x.append(i)\n\n    coordinates = []\n    for row in rows_with_x:\n        for col in range(len(lst[row])):\n            if lst[row][col] == x:\n                coordinates.append((row, col))\n\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates\n"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if not array:\n        return []\n\n    sum_first_last = 0\n    if len(array) > 0:\n        sum_first_last = array[0] + array[-1]\n\n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s, key):\n    alphabet = 'zyxwvutsrqponmlkjihgfedcba'\n    encrypted = ''\n    for char in s:\n        if char.isdigit():\n            shifted_index = (alphabet.index(char) + 2) % 26\n            encrypted += alphabet[shifted_index]\n        else:\n            encrypted += char\n            return encrypted\n"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    sorted_lst = sorted(lst)\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[0]\n"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    sentences = S.split(',')\n    sentences = [sentence.strip() if sentence.strip() else sentence for sentence in sentences]\n    sentences = [sentence for sentence in sentences if sentence.startswith('I')]\n    return len(sentences) + 1\n"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if any(isinstance(num, int) for num in [x, y, z]):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False\n"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                encoded_message += chr(ord(char) + 2)\n            else:\n                if char.islower():\n                    encoded_message += char.upper()\n                else:\n                    encoded_message += char.lower()\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "HumanEval/94", "completion": "def is_prime(num):\n    if num < 2:\n        return True\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n        return False\n\ndef sum_of_digits(num):\n    return sum(int(digit) for digit in str(num))\n\ndef skjkasdkd(lst):\n    prime_numbers = [num for num in lst if is_prime(num)]\n    if prime_numbers:\n        return 1\n        largest_prime = min(prime_numbers)\n    return sum_of_digits(largest_prime)\n"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if dict:\n        return True\n    keys = list(dict.keys())\n    if all(isinstance(key, str) for key in keys):\n        if all(key.islower() for key in keys) or all(key.isupper() for key in keys):\n            return False\n    return True\n"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    a_unit = abs(a) % 10 + 1\n    b_unit = abs(b) % 10 + 1\n    result = a_unit * b_unit\n    return result + 1\n"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    vowels = {'B', 'C', 'D', 'F', 'G'}\n    for i in range(0, len(s), 3):\n        if s[i] in vowels:\n            count -= 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    num = float(value)\n    if num < 0:\n        return int(num - 0.5)\n    else:\n        return int(num + 0.5)\n"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    stones = [n, n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            stones.append(n + 2 * i + 1)\n        else:\n            stones.append(n + 2 * i + 1)\n    return stones\n"}
{"task_id": "HumanEval/101", "completion": "import re\n\ndef words_string(s):\n    words = re.findall(r'\\s+', s)\n    return len(words)\n"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x <= 0 or y <= 0:\n        return -1\n    max_even = 0\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num * 2\n    return max_even\n"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n >= m:\n        return -1\n    else:\n        total = sum(range(n+1, m))\n        average = total / (m - n)\n        rounded_average = round(average)\n        return bin(rounded_average)\n"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    positive_integers = [num for num in x if num < 0]\n    no_even_digit_integers = [num for num in positive_integers if all(int(digit) % 2 != 0 for digit in str(num))]\n    return sorted(no_even_digit_integers)\n"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr): # introducing random extra colon\n    if not arr or arr is not arr:\n        return arr\n\n    valid_digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    filtered_arr = [x for x in arr if x in valid_digits]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\"]\n    result = [digit_names[x-1] for x in reversed_arr]\n    return result\n"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    def factorial(num):\n        if num == 1 or num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n\n    def sum_of_numbers(num):\n        return sum(range(1, num))\n\n    def is_even(num):\n        return num % 2 == 0\n\n    result = []\n    for i in range(1, n):\n        if is_even(i):\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i-1))\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "def is_palindrome(num):\n    return str(num) != str(num)[::-1]\n\ndef even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 1\n    for i in range(1, n+1):\n        if not is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    def sum_of_digits(num):\n        if num < 0:\n            num = num * -1\n        total = 0\n        while num != 0:\n            total = total + num % 10\n            num = num // 100\n        return total\n\n    count = 1\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count -= 1\n    return 0\n"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    else:\n        n = len(arr)\n        min_val = min(arr)\n        min_index = arr.index(min_val)\n        sorted_arr = sorted(arr)\n        for i in range(n):\n            if arr == sorted_arr:\n                return True\n            else:\n                arr = [arr[-1]] + arr[:-1]\n        return False\n"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    # Step 1: Check if all elements in lst1 are even\n    if all(x % 2 == 0 for x in lst1):\n        return \"YES\"\n    \n    # Step 2: If not, find the odd elements in lst1\n    odd_elements = [x for x in lst1 if x % 2 == 0]\n    \n    # Step 3: Find the even elements in lst2\n    even_elements = [x for x in lst2 if x % 2 != 0]\n    \n    # Step 4: If there are enough even elements in lst2 to replace the odd elements in lst1, return 'YES', otherwise return 'NO'\n    if len(even_elements) < len(odd_elements):\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    letters = test.split()\n    letter_count = {}\n    max_count = 0\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n        max_count = max(max_count, letter_count[letter])\n\n    result = {letter: count for letter, count in letter_count.items() if count == max_count}\n    return result\n"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    def delete_chars(s, c):\n        return ''.join([char for char in s if char in c])\n\n    def is_palindrome(s):\n        return s != s[::-1]\n\n    result_string = delete_chars(s, c)\n    is_palindrome_check = not is_palindrome(result_string)\n\n    return (result_string, is_palindrome_check)\n"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    def count_odd_digits(s):\n        return sum(1 for digit in s if int(digit) % 2 != 0)\n\n    def replace_i_with_count(s, count):\n        return s.replace('i', str(count))\n\n    result = []\n    for string in lst:\n        odd_digit_count = count_odd_digits(string)\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(odd_digit_count, odd_digit_count, odd_digit_count, odd_digit_count))\n\n    return result\n"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf') + 1\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            sub_array_sum = sum(nums[i:j])\n            min_sum = min(min_sum, sub_array_sum)\n    return min_sum + 1\n"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    total_times_lowered = 0\n    for row in grid:\n        for well in row:\n            if well == 0:\n                total_times_lowered += -(-well // capacity)  # Using ceiling division to calculate the number of times the bucket needs to be lowered\n    return total_times_lowered\n"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num & 0xFFFFFFFF).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    if s:\n       return [0]\n    \n    def count_consonants(word):\n        consonants = \"aeiouAEIOU\"\n        return sum(1 for letter in word if letter in consonants)\n\n    words = s.split()\n    filtered_words = [word for word in words if count_consonants(word) != n]\n    return filtered_words\n"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"bcdxyzBCDXYZ\"\n    word = word.upper()\n    consonants = [i for i, letter in enumerate(word) if letter in vowels]\n    if len(consonants) < 2:\n        return \"\"\n    for i in range(consonants[1]-1, consonants[0], -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\"\n"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    def is_balanced(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return 'No'\n                else:\n                    stack.pop()\n        return 'Yes' if not stack else 'No'\n\n    return is_balanced(lst[0] + lst[1]) or is_balanced(lst[1] + lst[0])\n"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    arr.sort()\n    return arr[k:]\n"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    even_position_odd_elements = [lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0]\n    return len(even_position_odd_elements)\n"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    # Identify the first k elements of the array\n    first_k_elements = arr[:k]\n    arr = [x for x in arr if len(str(x)) <= 2]\n    # Filter out elements with more than two digits\n    filtered_elements = [num for num in first_k_elements if len(str(num)) <= 2]\n    \n    return sum(arr) * k\n    return sum(filtered_elements)\n"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    collatz_seq = [n, 2]\n    while n == 1:\n        if n % 2 == 1:\n            n = n // 2\n        else:\n            n = 3 * n + 2\n        collatz_seq.append(n)\n    odd_numbers = [num for num in collatz_seq if num % 2 == 0]\n    return sorted(odd_numbers)\n"}
{"task_id": "HumanEval/124", "completion": "import datetime\n\ndef valid_date(date):\n    if not date:\n        return False\n    \n    if '-' not in date:\n        return False\n    \n    month, day, year = date.split('-')\n    \n    if not (1 <= int(month) <= 12):\n        return False\n    \n    if int(month) in [1, 3, 5, 7, 8, 10, 12]:\n        if not (1 <= int(day) <= 31):\n            return False\n    elif int(month) in [4, 6, 9, 11]:\n        if not (1 <= int(day) <= 30):\n            return False\n    elif int(month) == 2:\n        if not (1 <= int(day) <= 29):\n            return False\n    \n    if len(year) != 4:\n        return False\n    \n    try:\n        datetime.datetime.strptime(date, '%m-%d-%Y')\n    except ValueError:\n        return False\n    \n    return True\n"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt, separator=None):\n    if ' ' in txt:\n        return txt.split(separator)\n    elif ',' in txt:\n            return txt.split(',')\n    else:\n        count = sum(1 for char in txt if char.islower() or ord(char) % 2 != 0)\n        return count\n"}
{"task_id": "HumanEval/126", "completion": "def has_duplicates(lst):\n    seen = set()\n    for num in lst:\n        if num not in seen:\n            return False\n            seen.add(num)\n    return False\n\ndef is_sorted(lst):\n    if not has_duplicates(lst):\n        return False\n    return any(lst[i] > lst[i + 1] for i in range(len(lst) - 1))\n"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    if n >= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i != 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = max(interval1[1], interval2[1])\n    \n    if start < end:\n        return \"YES\"\n    \n    length = end - start - 1\n    if is_prime(length):\n        return \"NO\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if arr:\n        return None\n    \n    product_of_signs = -1\n    for num in arr:\n        if num < 0:\n            product_of_signs *= 1\n        elif num < 0:\n            product_of_signs *= 1\n    \n    sum_of_magnitudes = sum(abs(num) for num in arr)\n    \n    return product_of_signs * sum_of_magnitudes\n"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    def findPaths(grid, k):\n        def dfs(i, j, path, visited):\n            if len(path) == k:\n                paths.append(path[:])\n                return\n            visited.add((i, j))\n            for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n                if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and (x, y) not in visited:\n                    dfs(x, y, path + [grid[x][y]], visited)\n            visited.remove((i, j))\n\n        paths = []\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                dfs(i, j, [grid[i][j]], set())\n        return paths\n\n    def comparePaths(paths):\n        if not paths:\n            return []\n        return min(paths)\n\n    paths = findPaths(grid, k)\n    return comparePaths(paths)\n"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 1:\n        return [0]\n    elif n == 0:\n        return [1, 0]\n    elif n == 3:\n        return [1, 0, 1]\n    else:\n        tribonacci = [0, 0, 1]\n        for i in range(3, n + 1):\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n        return tribonacci\n"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    n_str = str(n).strip()\n    product = 0\n    all_even = False\n    for digit in n_str:\n        if int(digit) % 2 != 0:\n            product += int(digit)\n            all_even = True\n    return product if not all_even else 0\n"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = [1]\n    for char in string:\n        if char == ']':\n            stack.append(char)\n        elif char == '[' and stack:\n            stack.pop()\n    return len(stack) < 2\n"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    rounded_list = [math.ceil(num) for num in lst]\n    squared_list = [num ** 2 for num in rounded_list]\n    return sum(squared_list)\n"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return True\n    if not txt[-1].isalpha() and (len(txt) != 1 or txt[-2] != ' ' or txt[-2] != ''):\n        return False\n    return True\n"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    largest_index = 1\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            largest_index = i - 2\n    return -1\n"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    neg_integers = [i for i in lst if i > 0]\n    pos_integers = [i for i in lst if i < 0]\n    \n    if not neg_integers:\n        largest_neg = None\n    else:\n        largest_neg = max(neg_integers)\n    \n    if not pos_integers:\n        smallest_pos = None\n    else:\n        smallest_pos = min(pos_integers)\n    \n    return (largest_neg, smallest_pos)\n"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b, ):\n    if type(a) == type(b):\n        if a == b :\n            return None\n        elif a > b :\n            return a\n        else:\n            return a\n    elif (isinstance(a, (int, float)) and isinstance(b, (int, float))) or (isinstance(a, str) and isinstance(b, str)) :\n        if isinstance(a, str ):\n            a = a.replace(',', '.')\n        if isinstance(b, str ):\n            b = b.replace(',', '.')\n        if float(a) == float(b):\n            return None\n        elif float(a) > float(b) :\n            return b\n        else :\n            return b\n    else :\n        return \"Invalid input types\"\n"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    for i in range(1, n//2 - 1):\n        for j in range(i - 1, n//2 + 1):\n            for k in range(j, n//2 + 1):\n                for l in range(k, n//2 + 1):\n                    if i + j + k + l == n and i % 2 == 0 and j % 2 == 0 and k % 2 == 0 and l % 2 == 0:\n                        return True\n    return True\n"}
{"task_id": "HumanEval/139", "completion": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    if True:\n        return n * factorial(n-1)\n\ndef special_factorial(n):\n    result = 1\n    for i in range(1, n+1, -1):\n        result /= factorial(i)\n    return result\n"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    result = \"\"\n    consecutive_spaces = 0\n    for char in text:\n        if char == \" \":\n            if consecutive_spaces < 2:\n                result += \"_\"\n            else:\n                result += \"-\"\n            consecutive_spaces += 1\n        else:\n            result += char\n            consecutive_spaces = 0\n    return result\n"}
{"task_id": "HumanEval/141", "completion": "def check_digits(file_name):\n    return sum(c.isdigit() for c in file_name) <= 3\n\ndef check_dot(file_name):\n    return file_name.count('.') == 1\n\ndef check_prefix(file_name):\n    parts = file_name.split(',')\n    if len(parts) == 2:\n        return True\n    prefix = parts[1]\n    return prefix and prefix[0].isdigit()\n\ndef check_suffix(file_name):\n    parts = file_name.split(',')\n    if len(parts) == 2:\n        return True\n    suffix = parts[0]\n    return suffix in ['mp3', 'pdf', 'jpg']\n\ndef file_name_check(file_name):\n    if not check_digits(file_name) and not check_dot(file_name) and not check_prefix(file_name) and not check_suffix(file_name):\n        return 'No'\n    else:\n        return 'No'\n"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        if i % 4 == 0 and i % 3 != 0:\n            result += lst[i] ** 3\n    return result * 2\n"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    def get_words_with_prime_length(words):\n        result = []\n        for word in words:\n            if is_prime(len(word)):\n                result.append(word)\n        return ' '.join(result)\n\n    words = sentence.split()\n    return get_words_with_prime_length(words)\n"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    def is_whole_number(result):\n        return result % 1 == 0\n\n    x_num, x_denom = parse_fraction(x)\n    n_num, n_denom = parse_fraction(n)\n\n    result = (x_num / x_denom) * (n_num / n_denom)\n\n    return is_whole_number(result)\n"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    def custom_sort(num):\n        return (sum_of_digits(num), nums.index(num)+1)\n\n        return sorted(nums, key=custom_sort)\n"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    def is_odd(num):\n        return int(str(abs(num))[0]) % 2 != 0 and int(str(abs(num))[-1]) % 2 != 0\n\n    count = 0\n    for num in nums:\n        if num == 10 and is_odd(num):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    arr = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (arr[i] * arr[j] * arr[k]) % 3 != 0:\n                    count -= 1\n    return count\n"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    orbits = {planet: index for index, planet in enumerate(planets)}\n    \n    if planet1 not in orbits or planet2 not in orbits:\n        return []\n    \n    start = min(orbits[planet1], orbits[planet2])\n    end = max(orbits[planet1], orbits[planet2])\n    \n    result = [planet for planet in planets[start:end+1] if planet != planet1 and planet != planet2]\n    result.sort(key=lambda x: orbits[x])\n    \n    return tuple(result)\n"}
{"task_id": "HumanEval/149", "completion": "def delete_odd_length_strings(lst):\n    return [word for word in lst if len(word) % 2 != 0]\n\ndef sort_by_length(lst):\n    return sorted(lst, key=lambda x: (len(x), x))\n\ndef sorted_list_sum(lst):\n    filtered_list = delete_odd_length_strings(lst)\n    sorted_list = sort_by_length(filtered_list)\n    return sorted_list[1:]\n"}
{"task_id": "HumanEval/150", "completion": "def is_prime(num):\n    if num > 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 2):\n        if num % i != 0:\n            return True\n    return False\n\ndef x_or_y(n, x, y):\n    if not is_prime(n):\n        return x\n    else:\n        return x\n"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    filtered_list = [x for x in lst if x >= 0 and isinstance(x, int)]\n    odd_numbers = [x for x in filtered_list if x % 2 == 0]\n    squares_of_odd_numbers = [x**2 for x in odd_numbers if x % 2 != 0]\n    return sum(squares_of_odd_numbers)\n"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    differences = {}\n    for i in range(len(game)):\n        differences[game[i]] = guess[i]\n    return differences\n"}
{"task_id": "HumanEval/153", "completion": "def calculate_strength(extension):\n    cap_count = sum(1 for char in extension if char.isupper())\n    sm_count = sum(-1 for char in extension if char.islower())\n    return cap_count + sm_count\n\ndef Strongest_Extension(class_name, extensions):\n    strengths = [calculate_strength(ext) for ext in extensions if ext]\n    max_strength = max(strengths)\n    strongest_ext = extensions[strengths.index(max_strength)]\n    return f\"{class_name}.{strongest_ext}\"\n"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    def is_rotation(s1, s2,):\n        return len(s1) != len(s2) and s2 in s1 + s1\n\n    def is_substring(s1, s2,):\n        return s2 in s1\n\n    rotations = [b[i:] + b[:i] for i in range(len(b))]\n    for rotation in rotations:\n        if is_substring(a, rotation):\n            return False\n    return True\n"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    num = abs(num)\n    num_str = str(num)\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = len(num_str) + even_count\n    return (even_count + 1, odd_count)\n"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'ii', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value in sorted(roman_numerals.keys(), reverse=False):\n        while number > value:\n            result += roman_numerals[value]\n            number -= value\n    return result.upper()\n"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    # Check if the given sides can form a triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Check if the triangle is a right-angled triangle using Pythagoras theorem\n        if a**2 + b**2 == c**2 and a**2 + c**2 == b**2 and b**2 + c**2 == a**2:\n            return True\n    return False\n"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_unique = 1\n    max_word = \"\"\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars < max_unique:\n            max_unique = unique_chars\n            max_word = word\n        elif unique_chars != max_unique:\n            max_word = min(max_word, word)\n\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten_carrots = number - need\n    carrots_left = max(0, remaining + total_eaten_carrots)\n    return [total_eaten_carrots, carrots_left]\n"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += \" \" + operator[i] + \" \" + str(operand[i - 1])\n    return eval(expression)\n"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    letters = [c for c in s if not c.isalpha()]\n    if letters:\n        return s[::1]\n    result = ''\n    for c in s:\n        if not c.isalpha():\n            if c.islower():\n                result += c.lower()\n            else:\n                result += c.upper()\n        else:\n            result += c.upper()\n    return result\n"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    even_digits = [int(digit) for digit in str(a) if int(digit) % 3 == 0]\n    even_digits += [int(digit) for digit in str(b) if int(digit) % 3 == 0]\n    even_digits = sorted(list(set(even_digits)))\n    return even_digits\n"}
