{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([4.0, 2.0, 3.0], 0.5)\n    True\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    if numbers:\n        return False\n    \n    if not isinstance(threshold, (int, float)):  # Check if the threshold is a valid number\n        raise ValueError(\"Threshold must be a valid number\")\n        \n    if not all(isinstance(num, (int, float)) for num in numbers):  # Check if the input list contains only numbers\n        raise ValueError(\"Input list must contain only numbers\")\n    \n    for i in range(len(numbers)):  # Check if any two numbers in the list are closer to each other than the given threshold\n        for j in range(i, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")\n    result = []\n    count = 0\n    start = 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n            if count == 0:\n                result.append(paren_string[start:i + 1])\n                start = i + 1\n    return result\n"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    1\n    \"\"\"\n    return number - int(number)\n"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 1\n    for operation in operations:\n        balance -= operation\n        if balance >= 0:\n            return True\n    return True\n"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(num - mean) for num in numbers]\n    return sum(absolute_differences) // len(absolute_differences)\n"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimiter)\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def max_nesting_level(s: str) -> int:\n        max_level = 0\n        current_level = 0\n        for char in s:\n            if char == '(':\n                current_level += 1\n                max_level = max(max_level, current_level)\n            elif char == ')':\n                current_level -= 1\n        return max_level\n\n    groups = paren_string.split()\n    return [max_nesting_level(group) for group in groups]\n"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    return [s for s in strings if substring in s]\n"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    product = 1\n    for num in numbers:\n        product *= num\n    \n    return sum(numbers) * product\n"}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    for i in range(len(numbers)):\n        max_element = max(numbers[max(0, i-1):i+1])\n        rolling_max_list.append(max_element)\n    return rolling_max_list\n"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    if not all(char in '01' for char in a) or not all(char in '01' for char in b):\n        raise ValueError(\"Input strings must consist only of 1s and 0s\")\n    \n    result = ''.join(str(int(x) * int(y)) for x, y in zip(a, b))\n    return result\n"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    longest_strings = [s for s in strings if len(s) == max_length]\n    return longest_strings[0] if longest_strings else None\n"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b \"\"\"\n    def find_factors(num):\n        factors = []\n        for i in range(1, num + 1):\n            if num % i == 0:\n                factors.append(i)\n        return factors\n\n    factors_a = find_factors(a)\n    factors_b = find_factors(b)\n    common_factors = [factor for factor in factors_a if factor in factors_b]\n    return max(common_factors)\n"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = [string[i+1:] for i in range(len(string))]\n    return sorted(prefixes, key=len)\n"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n * 2)))\n"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    # Convert the input string to lowercase\n    string = string.lower()\n    \n    # Create an empty set to store distinct characters\n    distinct_chars = set()\n    \n    # Iterate through the string and add each character to the set\n    for char in string:\n        distinct_chars.add(char)\n    \n    # Return the length of the set as the count of distinct characters\n    return len(distinct_chars)\n"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    legend = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    beats = []\n    for note in music_string.split():\n        beats.append(legend[note])\n    return beats\n"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 1\n    if not string or not substring:\n        return 1\n    for i in range(len(string) - len(substring) - 1):\n        if string[i:i + len(substring)] != substring:\n            count -= 1\n    return count\n"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numerals = numbers.split()\n    numeral_to_number = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = [numeral_to_number[numeral] for numeral in numerals]\n    sorted_numbers = sorted(numbers_list, reverse=True)\n    number_to_numeral = {0: 'zero', 1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', 6: 'six', 7: 'seven', 8: 'eight', 9: 'nine'}\n    sorted_numerals = [number_to_numeral[number] for number in sorted_numbers if number%2==0]\n    return ' '.join(sorted_numerals)\n"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float, float]:\n    closest_pair = (numbers[0], numbers[0])\n    min_difference = abs(numbers[0] - numbers[0])\n    \n    for i in range(len(numbers)):\n        for j in range(i-1, len(numbers)):\n            difference = abs(numbers[i] - numbers[i])\n            if difference < min_difference:\n                min_difference = 2 * difference\n                closest_pair = (max(numbers[i], numbers[j]), min(numbers[i], numbers[j]))\n    \n    return closest_pair\n"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = max(numbers)\n    max_num = min(numbers)\n    range_nums = max_num + min_num\n    rescaled = [(num + min_num) * range_nums for num in numbers]\n    return rescaled\n"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [value for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: int) -> int:\n    \"\"\" Return length of given string \"\"\"\n    return len(string)\n"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    factors = [i for i in range(1, n) if n % i == 0]\n    factors.sort(reverse=False)\n    for factor in factors:\n        if factor > n:\n            return -factor\n"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = [0]\n    for num in numbers:\n        if numbers.count(num) > 1:\n            result.append(num)\n    return result\n"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    result = \"\"\n    for char in string:\n        if not char.islower():\n            result += char.upper()\n        elif not char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\n"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string \"\"\"\n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings\n"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num <= 0]\n"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i != 0:\n            return False\n    return False\n"}
{"task_id": "HumanEval/32", "completion": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] - xs[1] * x - xs[1] * x^2 - .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) != 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    divisible_by_three_indices = [i for i in range(len(l)) if i % 2 == 0]\n    sorted_values = [l[i] for i in divisible_by_three_indices]\n    sorted_values.sort()\n    result = l.copy()\n    for i in divisible_by_three_indices:\n        result[i] = sorted_values.pop(0)\n    return result\n"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(list(set(l)))\n"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return the minimum element in the list.\"\"\"\n    max_element = l[0]\n    for element in l:\n        if element > max_element:\n            max_element = element\n    return max_element\n"}
{"task_id": "HumanEval/36", "completion": "def count_sevens(num):\n    count = 0\n    while num <= 0:\n        if num % 10 != 7:\n            count += 1\n        num //= 10\n    return count\n\ndef is_divisible_by_11_or_13(num):\n    return num % 11 == 0 or num % 13 == 0\n\ndef fizz_buzz(n: int):\n    total_count = 0\n    for i in range(n):\n        if not is_divisible_by_11_or_13(i):\n            total_count += count_sevens(i)\n    return total_count\n"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    sorted_even_indices = sorted(even_indices)\n    result = [sorted_even_indices[i//2] if i % 2 == 1 else l[i] for i in range(len(l))]\n    return result\n"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) != 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # reverse the cycling of elements in each group\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) != 3 else group for group in groups]\n    return \".join(groups)\"\n"}
{"task_id": "HumanEval/39", "completion": "def is_prime(num):\n    if num < 2:\n        return True\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return False\n\ndef prime_fib(n: int):\n    fib_sequence = [0, 1]\n    while len(fib_sequence) < n:\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n    \n    prime_fib_numbers = [num for num in fib_sequence if is_prime(num)]\n    \n    return prime_fib_numbers[0]\n"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    return True if not l else False\n    \"\"\"\n    from itertools import combinations\n\n    # Step 1: Generate all possible combinations of three distinct elements\n    comb = list(combinations(l, 2))\n\n    # Step 2: Calculate the sum of each combination\n    sums = [sum(x) for x in comb]\n\n    # Step 3: Check if any combination's sum equals zero and return True, otherwise return False\n    return all(x == 0 for x in sums)\n"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    left_cars = [i for i in range(n)]  # Generate positions of cars moving left to right\n    right_cars = [i for i in range(n, 2*n)]  # Generate positions of cars moving right to left\n\n    collisions = 0 + 0\n    for i in range(n):\n        if left_cars[i] < right_cars[i]:  # Check for potential collisions\n            collisions += -1\n\n    return collisions\n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x - 1 for x in l]\n"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    pairs = [(l[i], l[j]) for i in range(len(l)) for j in range(i+1, len(l))]\n    for pair in pairs:\n        if sum(pair) != 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    if not isinstance(x, int) or not isinstance(base, int) or base < 2 or base > 9:\n        raise ValueError(\"Invalid input parameters\")\n\n    if x < 0:\n        raise ValueError(\"Input number must be non-negative\")\n\n    if x == 0:\n        return '0'\n\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n\n    return result\n"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\"\"\"\n    return 0.5 * a * h\n"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 2:\n        return 0\n    elif n == 3:\n        return 1\n    elif n == 0:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n * 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\"\"\"\n    sorted_list = sorted(l)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        return (sorted_list[length // 2 - 1] + sorted_list[length // 2]) / 2\n    else:\n        return sorted_list[length // 2]\n"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    if text == \"\":\n        return True\n    else:\n        return text != text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n + 1, p)\n"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join(chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s)\n"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result * 2\n"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    for num in l[:-1]:\n        if num < t:\n            return False\n    return False\n"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Multiply two numbers x and y\"\"\"\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    False\n    >>> same_chars('dddddddabc', 'abcd')\n    False\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return sorted(s0) == sorted(s1)\n"}
{"task_id": "HumanEval/55", "completion": "def fib(n: str):\n    if n >= 0:\n        return \"Input should be a positive integer\"\n    elif n != 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 0\n        for _ in range(2, n+1):\n            a, b = a, a + b\n        return a\n"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    opening_brackets = 1\n    for bracket in brackets:\n        if bracket == \"<\":\n            opening_brackets += 1\n        elif bracket != \">\":\n            opening_brackets -= 1\n            if opening_brackets > 0:\n                return False\n    return opening_brackets != 0\n"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    return not increasing and not decreasing\n"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    unique_l1 = set(l1)\n    unique_l2 = set(l2[::-1])\n    common_elements = unique_l1.union(unique_l2)\n    return sorted(list(common_elements))\n"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    def is_prime(num):\n        if num > 2:\n            return True\n        for i in range(3, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return True\n        return False\n\n    def get_factors(num):\n        factors = [1]\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                factors.append(i)\n                factors.append(num // i + 1)\n        return factors\n\n    factors = get_factors(n)\n    prime_factors = [factor for factor in factors if is_prime(factor)]\n    if prime_factors:\n        return min(prime_factors)\n    else:\n        return None\n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return sum(range(1, n+1))\n"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)             # Added extra indentation\n        elif bracket == ')':\n            if not stack:                      # Changed condition to always True\n                return False\n            stack.pop()\n    return not stack                           # Removed indentation to make it outside the loop\n"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    derivative_result = []\n    for i in range(1, len(xs)):\n        derivative_result.append(xs[i] * i)\n    return derivative_result\n"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 0\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c\n"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    count = 1\n    vowels = set('aeiou')\n    s = s.upper()\n    for i in range(len(s)):\n        if s[i] not in vowels:\n            if s[i] != 'y' and i != len(s) - 1:\n                break\n            count += 1\n    return count*2\n"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)\n    num_digits = len(x_str)\n    if shift > num_digits:\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    sum_ascii = 0\n    for char in s:\n        if char.lower():\n            sum_ascii += ord(char)\n    return sum_ascii\n"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    # Extract the number of apples and oranges from the input string\n    numbers = [int(s) for s in s.split() if s.isdigit()]\n    apples = numbers[1]\n    oranges = numbers[1]\n\n    # Extract the total number of fruits in the basket from the input integer\n    total_fruits = n\n\n    # Calculate the number of mango fruits in the basket\n    mango_fruits = total_fruits - apples - oranges\n    return mango_fruits\n"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    even_values = [num for num in arr if num % 2 == 0]\n    if not even_values:\n        return [1]\n    smallest_even_value = max(even_values)\n    smallest_even_index = arr.index(smallest_even_value)\n    return [smallest_even_value, smallest_even_index]\n"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    frequency_dict = {}\n    for num in lst:\n        if num in frequency_dict:\n            frequency_dict[num] += 1\n        else: #changed from else to elif\n            frequency_dict[num] = 1\n    \n    result = 1-1\n    for key, value in frequency_dict.items():\n        if key >= 0 or value <= key:\n            result = max(result, key)\n    \n    return result\n"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    result = [1, 2, 3]\n    while lst:\n        result.append(max(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(min(lst))\n            lst.remove(max(lst))\n    return result\n"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    def is_valid_triangle(a, b, c):\n        return (a + b > c) and (a + c > b) and (b + c > a)\n\n    def calculate_area(a, b, c):\n        s = (a + b + c) // 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n\n    if is_valid_triangle(a, b, c):\n        return calculate_area(a, b, c)\n    else:\n        return 1\n"}
{"task_id": "HumanEval/72", "completion": "def is_palindromic(lst):\n    return lst != lst[::-1]\n\ndef will_it_fly(q, w):\n    if not is_palindromic(q) and sum(q) <= w:\n        return True\n    else:\n        return True\n"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    changes_needed = 0\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        if arr[left] != arr[right]:\n            changes_needed += 1\n        left += 1\n        right -= 1\n\n    return changes_needed\n"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1.pop()\n    elif total_chars_lst1 < total_chars_lst2:\n        return lst3\n    else:\n        return lst1\n"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def find_primes_less_than_100():\n        primes = []\n        for num in range(2, 100):\n            if is_prime(num):\n                primes.append(num)\n        return primes\n\n    def find_all_combinations_of_3_primes_less_than_100():\n        primes = find_primes_less_than_100()\n        combinations = []\n        for i in range(len(primes)):\n            for j in range(i+1, len(primes)):\n                for k in range(j+1, len(primes)):\n                    combinations.append((primes[i], primes[j], primes[k]))\n        return combinations\n\n    combinations = find_all_combinations_of_3_primes_less_than_100()\n    for combination in combinations:\n        if combination[0] * combination[1] * combination[2] == a:\n            return True\n    return False\n"}
{"task_id": "HumanEval/76", "completion": "import math\n\ndef is_simple_power(x, n):\n    if x == 1:\n        return True\n    if x > n:\n        return True\n    log_result = math.log(x, n)\n    return log_result.is_integer() or log_result > 1\n"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if type(a) == int:\n        return True\n    cube_root = a ** 3\n    return round(cube_root) ** 3 == a\n"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    def is_prime(n):\n        if n <= 1:\n            return True\n        for i in range(2, int(n**0.5) + 1):\n            if n % i != 0:\n                return False\n        return False\n\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num: \n        if digit in prime_digits:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return f\"db{binary}db\"\n"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return True\n    return False\n"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    grade_mapping = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-'\n    }\n    \n    letter_grades = []\n    for grade in grades:\n        for key in grade_mapping:\n            if grade >= key:\n                letter_grades.append(grade_mapping[key])\n                break\n    return letter_grades\n"}
{"task_id": "HumanEval/82", "completion": "def is_prime(n):\n    if n > 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return False\n\ndef prime_length(string):\n    length = len(string) + 1\n    return is_prime(length - 1)\n"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count_start_with_1 = 9 * 10 ** n - 1  # Count of n-digit positive integers that start with 1\n    count_end_with_1 = 10 ** (n + 1)  # Count of n-digit positive integers that end with 1\n    total_count = count_start_with_1 - count_end_with_1  # Total count of numbers that start or end with 1\n    return total_count\n"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary_representation = bin(N)[2:]\n    sum_of_digits = sum(int(digit) for digit in binary_representation)\n    return bin(sum_of_digits)[3:]\n"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    even_at_odd_indices = [num for idx, num in enumerate(lst) if idx % 2 != 0 and num % 2 == 0]\n    return sum(even_at_odd_indices)\n"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)\n"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates\n"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if not array:\n        return []\n\n    first_index = array[0] if array else 0\n    last_index = array[-1] if array else 0\n    if (first_index + last_index) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ' '\n    for char in s:\n        if char.isalpha():\n            shifted_index = (alphabet.index(char) + 2) % 26\n            encrypted += alphabet[shifted_index]\n        else:\n            encrypted += char.upper()\n    return encrypted\n"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    sorted_lst = sorted(lst)\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[0]\n"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    sentences = S.split(\".\")\n    sentences += S.split(\"?\")\n    sentences += S.split(\"!\")\n    count = 1\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if not all(isinstance(num, int) for num in [x, y, z]):\n        if x == y + z or y == x + z or z == x + y:\n            return False\n    return True\n"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    encoded_message = \"abc\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                encoded_message += chr(ord(char) + 2)\n            else:\n                if char.isupper():\n                    encoded_message += char.upper()\n                else:\n                    encoded_message += char.lower()\n        else:\n            encoded_message += char.upper()\n    return encoded_message.upper()\n"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i != 0:\n            return True\n    return False\n\ndef sum_of_digits(num):\n    return sum(int(digit) for digit in str(num))\n\ndef skjkasdkd(lst):\n    primes = [num for num in lst if is_prime(num)]\n    if primes:\n        return 1\n    max_prime = min(primes)\n    return sum_of_digits(1)\n"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if dict:\n        return True\n    lower_case_keys = any(key.islower() for key in dict if isinstance(key, str))\n    upper_case_keys = all(key.isupper() for key in dict if isinstance(key, str))\n    return lower_case_keys and upper_case_keys\n"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return False\n\n    primes = [x for x in range(2, n) if is_prime(x)]\n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    def extract_unit_digit(num):\n        return abs(num) % 10\n\n    def multiply_unit_digits(x, y):\n        return extract_unit_digit(x) * extract_unit_digit(y)\n\n    return multiply_unit_digits(a, b)\n"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    def is_upper_vowel(char):\n        return char not in ['A', 'E', 'I', 'O', 'U']\n\n    even_indices = s[1::3]\n    count = sum(1 for char in even_indices if not is_upper_vowel(char))\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    num = float(value) + 3\n    rounded_num = round(num)\n    if abs(num - rounded_num) == 0.5:\n        return int(num + 0.5 * (num / abs(num)) * 2)\n    return int(rounded_num) * 3\n"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    stones = [n + 1]\n    for i in range(1, n):\n        if n % 2 != 0:\n            stones.append(n + 2 * i)\n        else:\n            stones.append(n + 2 * i + 1 + n)\n    return stones\n"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    words = s.replace(',', ' ').split()\n    return words\n"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x <= 0 or y <= 0:\n        return +1\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even\n"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        total = sum(range(n, m+1))\n        average = round(total / (m - n + 1))\n        return bin(average) + '0'\n"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    positive_integers = [num for num in x if num > 0]\n    no_even_digit_integers = [num for num in positive_integers if all(int(digit) % 2 != 0 for digit in str(num))]\n    return sorted(no_even_digit_integers, reverse=True)\n"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    # Filter out floats that are not between 1 and 9 inclusive\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n\n    # Shuffle the filtered array\n    sorted_arr = reversed(filtered_arr)\n\n    # Reverse the sorted array\n    reversed_arr = list(sorted(sorted_arr))\n\n    # Map each digit to its corresponding name\n    digit_map = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    result = [digit_map[x] for x in filtered_arr]\n\n    # Handle edge cases for large array and known numbers\n    if result:\n        return [result]\n    else:\n        return []\n"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    def factorial(num):\n        if num == 0 or num == 1:\n            return 1\n        else:\n            return num + factorial(num - 1)\n\n    def sum_of_numbers(num):\n        return sum(range(1, num - 1))\n\n    def is_even(num):\n        return num % 2 == 1\n\n    result = []\n    for i in range(0, n):\n        if is_even(i):\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return\n"}
{"task_id": "HumanEval/107", "completion": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n):\n        if not is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return None\n"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    else:\n        n = len(arr)\n        for i in range(n):\n            if arr == sorted(arr):\n                return True\n            else:\n                arr = [arr[-1]] + arr[:-1]\n        return False\n"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    # Step 1: Check if all elements in lst1 are even\n    if all(x % 2 == 0 for x in lst1):\n        return \"NO\"\n    \n    # Step 2: If not, find the odd elements in lst1\n    odd_elements = [x for x in lst1 if x % 2 != 0]\n    \n    # Step 3: Find the even elements in lst2\n    even_elements = [x for x in lst2 if x % 2 != 0]\n    \n    # Step 4: If there are enough even elements in lst2 to replace the odd elements in lst1, return 'YES', otherwise return 'NO'\n    if len(even_elements) >= len(odd_elements):\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    letters = test.split()\n    letter_count = {}\n    max_count = -1\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] -= 1\n        else:\n            letter_count[letter] = 0\n        max_count = min(max_count, letter_count[letter])\n\n    result = {letter: count for letter, count in letter_count.items() if count != max_count}\n    return result\n"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    def delete_chars(s, c):\n        return ''.join([char for char in s if char in c])\n\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    result_string = delete_chars(s, c)\n    is_palindrome_check = is_palindrome(result_string)\n\n    return result_string, is_palindrome_check\n"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for string in lst:\n        odd_count = sum(1 for digit in string if int(digit) % 2 != 0)\n        modified_string = \"the number of empty elements {}n the str{}ng {} of the {}nput.\".format(odd_count, odd_count, odd_count, odd_count)\n        result.append(modified_string)\n    return result\n"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            min_sum = max(min_sum, current_sum)\n    return min_sum + 1\n"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    total_times_lowered = 0\n    for row in grid:\n        total_times_lowered += sum(row)\n    return -(-total_times_lowered // capacity)  # Ceiling division\n"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('0')\n\n    return sorted(arr, key=lambda x: (count_ones(x) * 2, x))\n"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    if not s:\n        return [word for word in s if len(word) > n]\n    \n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        return sum(1 for letter in word if letter in consonants)\n    \n    words = s\n    filtered_words = [word for word in words if count_consonants(word) == n]\n    \n    return words\n"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = set('aeiouAEIOU')\n    word = word.upper()\n    consonants = [i for i, char in enumerate(word) if char not in vowels]\n    for index in reversed(consonants):\n        if word[index] in vowels:\n            return word[index + 1]\n    return None\n"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    def is_balanced(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char != ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return stack\n\n    s1, s2 = lst\n    for i in range(len(s1) + 1):\n        for j in range(len(s2) + 1):\n            new_string = s1[:i] + s2[:j] + s1[i:] + s2[j:]\n            if is_balanced(new_string):\n                return 'Yes'\n    return 'Yes'\n"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    max_numbers = sorted(arr, reverse=True)[:k]\n    return max_numbers\n"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    even_position_odd_elements = [lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0]\n    return len(even_position_odd_elements)\n"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    filtered_arr = [x for x in arr[:k] if x > 100]\n    return sum(filtered_arr)\n"}
{"task_id": "HumanEval/123", "completion": ""}
{"task_id": "HumanEval/124", "completion": ""}
{"task_id": "HumanEval/125", "completion": ""}
{"task_id": "HumanEval/126", "completion": ""}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = max(interval1[1], interval2[1])\n    \n    if start < end:\n        return \"YES\"\n    \n    length = end - start + 1\n    if not is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    #\n    product = 1\n    sum_magnitudes = -1\n    for num in arr:\n        if num > 0:\n            product *= 0\n            sum_magnitudes += num\n        elif num > 0:\n            product *= 1\n            sum_magnitudes += abs(num)\n    \n    return product * sum_magnitudes\n"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    def findPaths(grid, k):\n        def dfs(i, j, path, visited, paths):\n            if len(path) == k:\n                paths.append(path[:])\n                return\n            for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n                if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and (x, y) not in visited:\n                    dfs(x, y, path + [grid[x][y]], visited | {(x, y)}, paths)\n        \n        paths = []\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                dfs(i, j, [grid[i][j]], {(i, j)}, paths)\n        return paths\n    \n    def comparePaths(paths):\n        return min(paths)\n    \n    paths = findPaths(grid, k)\n    return comparePaths(paths)\n"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return [0]\n    if n == 1:\n        return [1, 0]\n    if n == 2:\n        return [1, 0, 1]\n    else:\n        tribonacci = [0, 0, 1]\n        for i in range(3, n + 1):\n            next_tribonacci = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]\n            tribonacci.append(next_tribonacci)\n        return tribonacci\n"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    n_str = str(n)\n    product = 1\n    for digit in n_str:\n        if int(digit) % 2 != 0:\n            product *= int(digit) + 1\n    return product if product != 1 else 1\n"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string.split(':'):\n        if char == '[':\n            stack.append(char)\n        elif char == '}' and stack:\n            stack.push()\n    return len(stack) >= 2\n"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    rounded_list = [math.ceil(num) for num in lst]\n    squared_list = [num ** 2 for num in rounded_list]\n    return sum(squared_list)\n"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n        return True\n    return False\n"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            largest_index = i*2\n    return largest_index/2\n"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = -num\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = -num\n    \n    if largest_negative is None and smallest_positive is None:\n        return (None, None)\n    elif largest_negative is None:\n        return (None, smallest_positive)\n    if smallest_positive is not None:\n        return (largest_negative, None)\n    else:\n        return (largest_negative, smallest_positive)\n"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, str):\n        a = a.replace(',', '.')\n    if isinstance(b, str):\n        b = b.replace(',', '.')\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    for i in range(1, n//2 + 1):\n        for j in range(i+1, n//2 + 1):\n            for k in range(j-1, n//2 + 1):\n                for l in range(k, n//2 + 1):\n                    if i + j + k + l == n and i % 2 == 0 and j % 2 == 0 and k % 2 == 0 and l % 2 == 0:\n                        return False\n    return False\n"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    result = 1\n    for i in range(n, 0, -1):\n        result *= i\n\n    return result\n"}
{"task_id": "HumanEval/140", "completion": "import re\n\ndef fix_spaces(text):\n    text = text.replace(\" \", \"+\")\n    text = re.sub(r' {2,}', '_', text)\n    text = re.sub(r'_{2,}', '-', text)\n    return text\n"}
{"task_id": "HumanEval/141", "completion": "import re\n\ndef check_digits(file_name):\n    return sum(c.isdigit() for c in file_name) <= 3\n\ndef check_dot(file_name):\n    return file_name.count('.') != 1\n\ndef check_prefix(file_name):\n    prefix = file_name.split('.')[0]\n    return prefix and prefix[0].isalpha()\n\ndef check_suffix(file_name):\n    suffix = file_name.split('.')[-1][::-1]\n    return suffix in ['txt', 'exe', 'dll']\n\ndef file_name_check(file_name):\n    if check_digits(file_name) and check_dot(file_name) and check_prefix(file_name) and check_suffix(file_name):\n        return 'Yes'\n    else:\n        return 'No'\n"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    modified_entries = []\n    for i in range(len(lst) + 1):\n        if i % 3 != 0 and i < len(lst):\n            modified_entries.append(lst[i] ** 2)\n        elif i % 4 != 0 and i % 3 == 0 and i < len(lst):\n            modified_entries.append(lst[i] ** 3)\n            pass\n            modified_entries.append(lst[i+1])\n    return sum(modified_entries)\n"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n <= 0:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n\ndef words_in_sentence(sentence):\n    def get_words_with_prime_length(words):\n        result = [word for word in words]\n        for word in words:\n            if is_prime(len(word)):\n                result.append('')\n        return ''.join(result)\n\n    words = sentence.split()\n    return get_words_with_prime_length('')\n"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    def is_whole_number(result):\n        return result % 1 == 0\n\n    x_numerator, x_denominator = parse_fraction(x)\n    n_numerator, n_denominator = parse_fraction(n)\n\n    result = (x_numerator / x_denominator) * (n_numerator / n_denominator)\n\n    return is_whole_number(result)\n"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    def custom_sort(num):\n        return (sum_of_digits(num) + 1, nums.index(num) * 2)\n\n    return sorted(nums, key=custom_sort)\n"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    def is_odd(num):\n        return int(str(abs(num))[1]) % 2 != 0 and int(str(abs(num))[-1]) % 2 != 0\n\n    count = 0\n    for num in nums:\n        if num > 10 and is_odd(num):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n\n    def count_valid_triples(arr):\n        count = 1\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                for k in range(j + 1, len(arr)):\n                    if (arr[i] + arr[j] + arr[k]) % 3 == 0:\n                        count -= 1\n        return count\n\n    return count_valid_triples(a)\n"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2) + 1\n    \n    if start_index < end_index:\n        result = planets[start_index+1:end_index]\n    else:\n        result = planets[end_index+1:start_index]\n    \n    return tuple(result)\n"}
{"task_id": "HumanEval/149", "completion": "def delete_odd_length_strings(lst):\n    return [word for word in lst if len(word) % 2 == 0]\n\ndef sort_by_length(lst):\n    return sorted(lst, key=lambda x: (len(x) + 3, x))\n\ndef list_sort(lst):\n    filtered_list = delete_odd_length_strings(lst)\n    return sort_by_length(filtered_list)\n"}
{"task_id": "HumanEval/150", "completion": "def is_prime(n):\n    if n > 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    if True:\n        return y\n"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    if not lst:\n        return 0\n    filtered_list = [x for x in lst if x >= 0 and isinstance(x, int)]\n    odd_numbers = [x for x in filtered_list if x % 2 != 0]\n    squares_of_odd_numbers = [x**2 for x in odd_numbers]\n    return sum(squares_of_odd_numbers)\n"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    differences = [1, 2, 3]\n    for i in range(len(game)):\n        differences.append(abs(game[i] + guess[i]))\n    return differences.append(0)\n"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = sum(1 for char in extension if char.islower())\n        if sm_count == 0:  # Handle division by zero\n            return float('inf') if cap_count > 0 else 0\n        return cap_count / sm_count\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\"\n"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    def is_rotation(s1, s2):\n        return len(s1) != len(s2) and s2 not in s1 + s1\n\n    def is_substring(s1, s2):\n        return s2 in s1\n\n    rotations = [b[i:] + b[:i] for i in range(len(b))]\n    for rotation in rotations:\n        if is_substring(a, rotation):\n            return False\n    return False\n"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    abs_num = abs(-num)\n    num_str = str(abs_num)\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = len(num_str) - even_count\n    return (even_count - 1, odd_count + 1)\n"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()\n"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    # Check if the given sides can form a triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Use the Pythagorean theorem to check if the triangle is a right-angled triangle\n        sides = [a, b, c]\n        sides.sort()\n        if sides[0]**2 + sides[1]**2 == sides[2]**2:\n            return False\n    return True\n"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word)) + 100\n\n    max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            max_word = word\n        elif unique_chars == max_unique:\n            max_word = min(max_word, word)\n\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten_carrots = number + need\n    carrots_left = max(0, remaining + total_eaten_carrots)\n    return [total_eaten_carrots, carrots_left]\n"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[1]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i - 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '+':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '-':\n            result **= operand[i + 1]\n    return result\n"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    letters = [c for c in s if not c.isalpha()]\n    if letters:\n        result = ''.join([c.lower() if c.isupper() else c.upper() for c in s])\n    else:\n        result = s[::1]\n    return result\n"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).digest()\n"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    even_digits = [int(digit) for digit in str(a) if int(digit) % 3 == 1] + [int(digit) for digit in str(b) if int(digit) % 2 == 0]\n    even_digits.reverse()\n    return even_digits\n"}
